diff --git a/.travis.yml b/.travis.yml
index e746bb793530..0be40d36e36f 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -10,7 +10,6 @@ php:

 matrix:
     allow_failures:
-        - php: 5.6
         - php: hhvm-nightly

 services: mongodb
diff --git a/UPGRADE-2.5.md b/UPGRADE-2.5.md
index 69f57506fac4..7c729aed5893 100644
--- a/UPGRADE-2.5.md
+++ b/UPGRADE-2.5.md
@@ -97,7 +97,7 @@ Validator

    After:

-   Default email validation is now done via a simple regex which may cause invalid emails (not RFC compilant) to be
+   Default email validation is now done via a simple regex which may cause invalid emails (not RFC compliant) to be
    valid. This is the default behaviour.

    Strict email validation has to be explicitly activated in the configuration file by adding
diff --git a/composer.json b/composer.json
index fea20c83aee5..d8fc9320c968 100644
--- a/composer.json
+++ b/composer.json
@@ -70,6 +70,7 @@
         "doctrine/data-fixtures": "1.0.*",
         "doctrine/dbal": "~2.2",
         "doctrine/orm": "~2.2,>=2.2.3",
+        "doctrine/doctrine-bundle": "~1.2",
         "monolog/monolog": "~1.3",
         "propel/propel1": "1.6.*",
         "ircmaxell/password-compat": "1.0.*",
@@ -87,7 +88,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Bridge/Doctrine/composer.json b/src/Symfony/Bridge/Doctrine/composer.json
index 383df1ed370b..16a0cc27c462 100644
--- a/src/Symfony/Bridge/Doctrine/composer.json
+++ b/src/Symfony/Bridge/Doctrine/composer.json
@@ -45,7 +45,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Bridge/Monolog/composer.json b/src/Symfony/Bridge/Monolog/composer.json
index 067f1c70d71d..2ce523e5fe2b 100644
--- a/src/Symfony/Bridge/Monolog/composer.json
+++ b/src/Symfony/Bridge/Monolog/composer.json
@@ -36,7 +36,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Bridge/Propel1/composer.json b/src/Symfony/Bridge/Propel1/composer.json
index 6aa820d6b34e..e1fe6f469a83 100644
--- a/src/Symfony/Bridge/Propel1/composer.json
+++ b/src/Symfony/Bridge/Propel1/composer.json
@@ -32,7 +32,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Bridge/ProxyManager/composer.json b/src/Symfony/Bridge/ProxyManager/composer.json
index 04cc581ac381..9d9859b162a0 100644
--- a/src/Symfony/Bridge/ProxyManager/composer.json
+++ b/src/Symfony/Bridge/ProxyManager/composer.json
@@ -29,7 +29,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Bridge/Swiftmailer/composer.json b/src/Symfony/Bridge/Swiftmailer/composer.json
index 8e5277692e70..d077c543b7e5 100644
--- a/src/Symfony/Bridge/Swiftmailer/composer.json
+++ b/src/Symfony/Bridge/Swiftmailer/composer.json
@@ -29,7 +29,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Bridge/Twig/Extension/CodeExtension.php b/src/Symfony/Bridge/Twig/Extension/CodeExtension.php
index 763f315f8ab5..93d99f936c74 100644
--- a/src/Symfony/Bridge/Twig/Extension/CodeExtension.php
+++ b/src/Symfony/Bridge/Twig/Extension/CodeExtension.php
@@ -36,7 +36,7 @@ class CodeExtension extends \Twig_Extension
     public function __construct($fileLinkFormat, $rootDir, $charset)
     {
         $this->fileLinkFormat = empty($fileLinkFormat) ? ini_get('xdebug.file_link_format') : $fileLinkFormat;
-        $this->rootDir = str_replace('\\', '/', $rootDir).'/';
+        $this->rootDir = str_replace('\\', '/', dirname($rootDir)).'/';
         $this->charset = $charset;
     }

@@ -164,12 +164,14 @@ public function fileExcerpt($file, $line)
      */
     public function formatFile($file, $line, $text = null)
     {
+        $file = trim($file);
+
         if (null === $text) {
-            $file = trim($file);
-            $text = $file;
+            $text = str_replace('\\', '/', $file);
             if (0 === strpos($text, $this->rootDir)) {
-                $text = str_replace($this->rootDir, '', str_replace('\\', '/', $text));
-                $text = sprintf('<abbr title="%s">kernel.root_dir</abbr>/%s', $this->rootDir, $text);
+                $text = substr($text, strlen($this->rootDir));
+                $text = explode('/', $text, 2);
+                $text = sprintf('<abbr title="%s%2$s">%s</abbr>%s', $this->rootDir, $text[0], isset($text[1]) ? '/'.$text[1] : '');
             }
         }

diff --git a/src/Symfony/Bridge/Twig/composer.json b/src/Symfony/Bridge/Twig/composer.json
index 44541136600b..59db37b44f68 100644
--- a/src/Symfony/Bridge/Twig/composer.json
+++ b/src/Symfony/Bridge/Twig/composer.json
@@ -50,7 +50,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Bundle/FrameworkBundle/Controller/ControllerResolver.php b/src/Symfony/Bundle/FrameworkBundle/Controller/ControllerResolver.php
index 69c8f1d03fde..e1998be22050 100644
--- a/src/Symfony/Bundle/FrameworkBundle/Controller/ControllerResolver.php
+++ b/src/Symfony/Bundle/FrameworkBundle/Controller/ControllerResolver.php
@@ -63,6 +63,8 @@ protected function createController($controller)
                 list($service, $method) = explode(':', $controller, 2);

                 return array($this->container->get($service), $method);
+            } elseif ($this->container->has($controller) && method_exists($service = $this->container->get($controller), '__invoke')) {
+                return $service;
             } else {
                 throw new \LogicException(sprintf('Unable to parse the controller name "%s".', $controller));
             }
diff --git a/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/FrameworkExtension.php b/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/FrameworkExtension.php
index 15e0801fb9cd..f9146c242e04 100644
--- a/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/FrameworkExtension.php
+++ b/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/FrameworkExtension.php
@@ -61,6 +61,9 @@ public function load(array $configs, ContainerBuilder $container)
         if ($container->getParameter('kernel.debug')) {
             $loader->load('debug.xml');

+            $definition = $container->findDefinition('debug.debug_handlers_listener');
+            $definition->replaceArgument(0, array(new Reference('http_kernel', ContainerInterface::NULL_ON_INVALID_REFERENCE), 'terminateWithException'));
+
             $definition = $container->findDefinition('http_kernel');
             $definition->replaceArgument(2, new Reference('debug.controller_resolver'));

@@ -69,6 +72,9 @@ public function load(array $configs, ContainerBuilder $container)
             $definition->setPublic(false);
             $container->setDefinition('debug.event_dispatcher.parent', $definition);
             $container->setAlias('event_dispatcher', 'debug.event_dispatcher');
+        } else {
+            $definition = $container->findDefinition('debug.debug_handlers_listener');
+            $definition->replaceArgument(2, E_COMPILE_ERROR | E_PARSE | E_ERROR | E_CORE_ERROR);
         }

         $configuration = $this->getConfiguration($configs, $container);
diff --git a/src/Symfony/Bundle/FrameworkBundle/Resources/config/debug.xml b/src/Symfony/Bundle/FrameworkBundle/Resources/config/debug.xml
index c457e4f903a3..cdec77671398 100644
--- a/src/Symfony/Bundle/FrameworkBundle/Resources/config/debug.xml
+++ b/src/Symfony/Bundle/FrameworkBundle/Resources/config/debug.xml
@@ -9,7 +9,6 @@
         <parameter key="debug.stopwatch.class">Symfony\Component\Stopwatch\Stopwatch</parameter>
         <parameter key="debug.container.dump">%kernel.cache_dir%/%kernel.container_class%.xml</parameter>
         <parameter key="debug.controller_resolver.class">Symfony\Component\HttpKernel\Controller\TraceableControllerResolver</parameter>
-        <parameter key="debug.debug_handlers_listener.class">Symfony\Component\HttpKernel\EventListener\DebugHandlersListener</parameter>
     </parameters>

     <services>
@@ -26,27 +25,5 @@
             <argument type="service" id="controller_resolver" />
             <argument type="service" id="debug.stopwatch" />
         </service>
-
-        <service id="debug.deprecation_logger_listener" class="%debug.errors_logger_listener.class%">
-            <tag name="kernel.event_subscriber" />
-            <tag name="monolog.logger" channel="deprecation" />
-            <argument>deprecation</argument>
-            <argument type="service" id="logger" on-invalid="null" />
-        </service>
-
-        <service id="debug.scream_logger_listener" class="%debug.errors_logger_listener.class%">
-            <tag name="kernel.event_subscriber" />
-            <tag name="monolog.logger" channel="scream" />
-            <argument>scream</argument>
-            <argument type="service" id="logger" on-invalid="null" />
-        </service>
-
-        <service id="debug.debug_handlers_listener" class="%debug.debug_handlers_listener.class%">
-            <tag name="kernel.event_subscriber" />
-            <argument type="collection">
-                <argument type="service" id="http_kernel" on-invalid="null" />
-                <argument>terminateWithException</argument>
-            </argument>
-        </service>
     </services>
 </container>
diff --git a/src/Symfony/Bundle/FrameworkBundle/Resources/config/debug_prod.xml b/src/Symfony/Bundle/FrameworkBundle/Resources/config/debug_prod.xml
index 36872ad529ca..4a842f31a93b 100644
--- a/src/Symfony/Bundle/FrameworkBundle/Resources/config/debug_prod.xml
+++ b/src/Symfony/Bundle/FrameworkBundle/Resources/config/debug_prod.xml
@@ -5,15 +5,17 @@
     xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd">

     <parameters>
-        <parameter key="debug.errors_logger_listener.class">Symfony\Component\HttpKernel\EventListener\ErrorsLoggerListener</parameter>
+        <parameter key="debug.debug_handlers_listener.class">Symfony\Component\HttpKernel\EventListener\DebugHandlersListener</parameter>
     </parameters>

     <services>
-        <service id="debug.emergency_logger_listener" class="%debug.errors_logger_listener.class%">
+        <service id="debug.debug_handlers_listener" class="%debug.debug_handlers_listener.class%">
             <tag name="kernel.event_subscriber" />
-            <tag name="monolog.logger" channel="emergency" />
-            <argument>emergency</argument>
+            <tag name="monolog.logger" channel="php" />
+            <argument /><!-- Exception handler -->
             <argument type="service" id="logger" on-invalid="null" />
+            <argument /><!-- Log levels map for enabled error levels -->
+            <argument>%kernel.debug%</argument>
         </service>
     </services>
 </container>
diff --git a/src/Symfony/Bundle/FrameworkBundle/Tests/Controller/ControllerResolverTest.php b/src/Symfony/Bundle/FrameworkBundle/Tests/Controller/ControllerResolverTest.php
new file mode 100644
index 000000000000..49fa22bcb2ff
--- /dev/null
+++ b/src/Symfony/Bundle/FrameworkBundle/Tests/Controller/ControllerResolverTest.php
@@ -0,0 +1,164 @@
+<?php
+
+/*
+ * This file is part of the Symfony package.
+ *
+ * (c) Fabien Potencier <fabien@symfony.com>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace Symfony\Bundle\FrameworkBundle\Tests\Controller;
+
+use Psr\Log\LoggerInterface;
+use Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser;
+use Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver;
+use Symfony\Component\DependencyInjection\ContainerAwareInterface;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+use Symfony\Component\HttpFoundation\Request;
+use Symfony\Component\HttpKernel\Tests\Controller\ControllerResolverTest as BaseControllerResolverTest;
+
+class ControllerResolverTest extends BaseControllerResolverTest
+{
+    public function testGetControllerOnContainerAware()
+    {
+        $resolver = $this->createControllerResolver();
+        $request = Request::create('/');
+        $request->attributes->set('_controller', 'Symfony\Bundle\FrameworkBundle\Tests\Controller\ContainerAwareController::testAction');
+
+        $controller = $resolver->getController($request);
+
+        $this->assertInstanceOf('Symfony\Component\DependencyInjection\ContainerInterface', $controller[0]->getContainer());
+        $this->assertSame('testAction', $controller[1]);
+    }
+
+    public function testGetControllerWithBundleNotation()
+    {
+        $shortName = 'FooBundle:Default:test';
+        $parser = $this->createMockParser();
+        $parser->expects($this->once())
+            ->method('parse')
+            ->with($shortName)
+            ->will($this->returnValue('Symfony\Bundle\FrameworkBundle\Tests\Controller\ContainerAwareController::testAction'))
+        ;
+
+        $resolver = $this->createControllerResolver(null, $parser);
+        $request = Request::create('/');
+        $request->attributes->set('_controller', $shortName);
+
+        $controller = $resolver->getController($request);
+
+        $this->assertInstanceOf('Symfony\Bundle\FrameworkBundle\Tests\Controller\ContainerAwareController', $controller[0]);
+        $this->assertInstanceOf('Symfony\Component\DependencyInjection\ContainerInterface', $controller[0]->getContainer());
+        $this->assertSame('testAction', $controller[1]);
+    }
+
+    public function testGetControllerService()
+    {
+        $container = $this->createMockContainer();
+        $container->expects($this->once())
+            ->method('get')
+            ->with('foo')
+            ->will($this->returnValue($this))
+        ;
+
+        $resolver = $this->createControllerResolver(null, null, $container);
+        $request = Request::create('/');
+        $request->attributes->set('_controller', 'foo:controllerMethod1');
+
+        $controller = $resolver->getController($request);
+
+        $this->assertInstanceOf(get_class($this), $controller[0]);
+        $this->assertSame('controllerMethod1', $controller[1]);
+    }
+
+    public function testGetControllerInvokableService()
+    {
+        $container = $this->createMockContainer();
+        $container->expects($this->once())
+            ->method('has')
+            ->with('foo')
+            ->will($this->returnValue(true))
+        ;
+        $container->expects($this->once())
+            ->method('get')
+            ->with('foo')
+            ->will($this->returnValue($this))
+        ;
+
+        $resolver = $this->createControllerResolver(null, null, $container);
+        $request = Request::create('/');
+        $request->attributes->set('_controller', 'foo');
+
+        $controller = $resolver->getController($request);
+
+        $this->assertInstanceOf(get_class($this), $controller);
+    }
+
+    /**
+     * @dataProvider getUndefinedControllers
+     */
+    public function testGetControllerOnNonUndefinedFunction($controller, $exceptionName = null, $exceptionMessage = null)
+    {
+        $this->setExpectedException($exceptionName, $exceptionMessage);
+
+        parent::testGetControllerOnNonUndefinedFunction($controller);
+    }
+
+    public function getUndefinedControllers()
+    {
+        return array(
+            array('foo', '\LogicException', 'Unable to parse the controller name "foo".'),
+            array('foo::bar', '\InvalidArgumentException', 'Class "foo" does not exist.'),
+            array('stdClass', '\LogicException', 'Unable to parse the controller name "stdClass".'),
+            array(
+                'Symfony\Component\HttpKernel\Tests\Controller\ControllerResolverTest::bar',
+                '\InvalidArgumentException',
+                'Controller "Symfony\Component\HttpKernel\Tests\Controller\ControllerResolverTest::bar" for URI "/" is not callable.'
+            )
+        );
+    }
+
+    protected function createControllerResolver(LoggerInterface $logger = null, ControllerNameParser $parser = null, ContainerInterface $container = null)
+    {
+        if (!$parser) {
+            $parser = $this->createMockParser();
+        }
+
+        if (!$container) {
+            $container = $this->createMockContainer();
+        }
+
+        return new ControllerResolver($container, $parser, $logger);
+    }
+
+    protected function createMockParser()
+    {
+        return $this->getMock('Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser', array(), array(), '', false);
+    }
+
+    protected function createMockContainer()
+    {
+        return $this->getMock('Symfony\Component\DependencyInjection\ContainerInterface');
+    }
+}
+
+class ContainerAwareController implements ContainerAwareInterface
+{
+    private $container;
+
+    public function setContainer(ContainerInterface $container = null)
+    {
+        $this->container = $container;
+    }
+
+    public function getContainer()
+    {
+        return $this->container;
+    }
+
+    public function testAction()
+    {
+    }
+}
diff --git a/src/Symfony/Bundle/FrameworkBundle/composer.json b/src/Symfony/Bundle/FrameworkBundle/composer.json
index 894f1f7869c3..7cdb9b0da430 100644
--- a/src/Symfony/Bundle/FrameworkBundle/composer.json
+++ b/src/Symfony/Bundle/FrameworkBundle/composer.json
@@ -21,7 +21,7 @@
         "symfony/config" : "~2.4",
         "symfony/event-dispatcher": "~2.5",
         "symfony/http-foundation": "~2.4",
-        "symfony/http-kernel": "~2.5",
+        "symfony/http-kernel": "~2.6",
         "symfony/filesystem": "~2.3",
         "symfony/routing": "~2.2",
         "symfony/security-core": "~2.4",
@@ -52,7 +52,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Bundle/SecurityBundle/Command/SetAclCommand.php b/src/Symfony/Bundle/SecurityBundle/Command/SetAclCommand.php
new file mode 100644
index 000000000000..de01dc6b33d4
--- /dev/null
+++ b/src/Symfony/Bundle/SecurityBundle/Command/SetAclCommand.php
@@ -0,0 +1,171 @@
+<?php
+
+/*
+ * This file is part of the Symfony package.
+ *
+ * (c) Fabien Potencier <fabien@symfony.com>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace Symfony\Bundle\SecurityBundle\Command;
+
+use Symfony\Bundle\FrameworkBundle\Command\ContainerAwareCommand;
+use Symfony\Component\Console\Input\InputArgument;
+use Symfony\Component\Console\Input\InputInterface;
+use Symfony\Component\Console\Input\InputOption;
+use Symfony\Component\Console\Output\OutputInterface;
+use Symfony\Component\Security\Acl\Domain\ObjectIdentity;
+use Symfony\Component\Security\Acl\Domain\RoleSecurityIdentity;
+use Symfony\Component\Security\Acl\Domain\UserSecurityIdentity;
+use Symfony\Component\Security\Acl\Exception\AclAlreadyExistsException;
+use Symfony\Component\Security\Acl\Permission\MaskBuilder;
+use Symfony\Component\Security\Acl\Model\MutableAclProviderInterface;
+
+/**
+ * Sets ACL for objects
+ *
+ * @author Kévin Dunglas <kevin@les-tilleuls.coop>
+ */
+class SetAclCommand extends ContainerAwareCommand
+{
+    /**
+     * {@inheritdoc}
+     */
+    public function isEnabled()
+    {
+        if (!$this->getContainer()->has('security.acl.provider')) {
+            return false;
+        }
+
+        $provider = $this->getContainer()->get('security.acl.provider');
+        if (!$provider instanceof MutableAclProviderInterface) {
+            return false;
+        }
+
+        return parent::isEnabled();
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    protected function configure()
+    {
+        $this
+            ->setName('acl:set')
+            ->setDescription('Sets ACL for objects')
+            ->setHelp(<<<EOF
+The <info>%command.name%</info> command sets ACL.
+The ACL system must have been initialized with the <info>init:acl</info> command.
+
+To set <comment>VIEW</comment> and <comment>EDIT</comment> permissions for the user <comment>kevin</comment> on the instance of <comment>Acme\MyClass</comment> having the identifier <comment>42</comment>:
+
+<info>php %command.full_name% --user=Symfony/Component/Security/Core/User/User:kevin VIEW EDIT Acme/MyClass:42</info>
+
+Note that you can use <comment>/</comment> instead of <comment>\\ </comment>for the namespace delimiter to avoid any
+problem.
+
+To set permissions for a role, use the <info>--role</info> option:
+
+<info>php %command.full_name% --role=ROLE_USER VIEW Acme/MyClass:1936</info>
+
+To set permissions at the class scope, use the <info>--class-scope</info> option:
+
+<info>php %command.full_name% --class-scope --user=Symfony/Component/Security/Core/User/User:anne OWNER Acme/MyClass:42</info>
+EOF
+            )
+            ->addArgument('arguments', InputArgument::IS_ARRAY | InputArgument::REQUIRED, 'A list of permissions and object identities (class name and ID separated by a column)')
+            ->addOption('user', null, InputOption::VALUE_REQUIRED, 'A list of security identities')
+            ->addOption('role', null, InputOption::VALUE_REQUIRED | InputOption::VALUE_IS_ARRAY, 'A list of roles')
+            ->addOption('class-scope', null, InputOption::VALUE_NONE, 'Use class-scope entries')
+        ;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    protected function execute(InputInterface $input, OutputInterface $output)
+    {
+        // Parse arguments
+        $objectIdentities = array();
+        $maskBuilder = $this->getMaskBuilder();
+        foreach ($input->getArgument('arguments') as $argument) {
+            $data = explode(':', $argument, 2);
+
+            if (count($data) > 1) {
+                $objectIdentities[] = new ObjectIdentity($data[1], strtr($data[0], '/', '\\'));
+            } else {
+                $maskBuilder->add($data[0]);
+            }
+        }
+
+        // Build permissions mask
+        $mask = $maskBuilder->get();
+
+        $userOption = $input->getOption('user');
+        $roleOption = $input->getOption('role');
+        $classScopeOption = $input->getOption('class-scope');
+
+        if (empty($userOption) && empty($roleOption)) {
+            throw new \InvalidArgumentException('A Role or a User must be specified.');
+        }
+
+        // Create security identities
+        $securityIdentities = array();
+
+        if ($userOption) {
+            foreach ($userOption as $user) {
+                $data = explode(':', $user, 2);
+
+                if (count($data) === 1) {
+                    throw new \InvalidArgumentException('The user must follow the format "Acme/MyUser:username".');
+                }
+
+                $securityIdentities[] = new UserSecurityIdentity($data[1], strtr($data[0], '/', '\\'));
+            }
+        }
+
+        if ($roleOption) {
+            foreach ($roleOption as $role) {
+                $securityIdentities[] = new RoleSecurityIdentity($role);
+            }
+        }
+
+        /** @var $container \Symfony\Component\DependencyInjection\ContainerInterface */
+        $container = $this->getContainer();
+        /** @var $aclProvider MutableAclProviderInterface */
+        $aclProvider = $container->get('security.acl.provider');
+
+        // Sets ACL
+        foreach ($objectIdentities as $objectIdentity) {
+            // Creates a new ACL if it does not already exist
+            try {
+                $aclProvider->createAcl($objectIdentity);
+            } catch (AclAlreadyExistsException $e) {
+            }
+
+            $acl = $aclProvider->findAcl($objectIdentity, $securityIdentities);
+
+            foreach ($securityIdentities as $securityIdentity) {
+                if ($classScopeOption) {
+                    $acl->insertClassAce($securityIdentity, $mask);
+                } else {
+                    $acl->insertObjectAce($securityIdentity, $mask);
+                }
+            }
+
+            $aclProvider->updateAcl($acl);
+        }
+    }
+
+    /**
+     * Gets the mask builder
+     *
+     * @return MaskBuilder
+     */
+    protected function getMaskBuilder()
+    {
+        return new MaskBuilder();
+    }
+}
diff --git a/src/Symfony/Bundle/SecurityBundle/Tests/Functional/Bundle/AclBundle/AclBundle.php b/src/Symfony/Bundle/SecurityBundle/Tests/Functional/Bundle/AclBundle/AclBundle.php
new file mode 100644
index 000000000000..1208003bcc2c
--- /dev/null
+++ b/src/Symfony/Bundle/SecurityBundle/Tests/Functional/Bundle/AclBundle/AclBundle.php
@@ -0,0 +1,21 @@
+<?php
+
+/*
+ * This file is part of the Symfony package.
+ *
+ * (c) Fabien Potencier <fabien@symfony.com>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace Symfony\Bundle\SecurityBundle\Tests\Functional\Bundle\AclBundle;
+
+use Symfony\Component\HttpKernel\Bundle\Bundle;
+
+/**
+ * @author Kévin Dunglas <kevin@les-tilleuls.coop>
+ */
+class AclBundle extends Bundle
+{
+}
diff --git a/src/Symfony/Bundle/SecurityBundle/Tests/Functional/Bundle/AclBundle/Entity/Car.php b/src/Symfony/Bundle/SecurityBundle/Tests/Functional/Bundle/AclBundle/Entity/Car.php
new file mode 100644
index 000000000000..dd46db2f6459
--- /dev/null
+++ b/src/Symfony/Bundle/SecurityBundle/Tests/Functional/Bundle/AclBundle/Entity/Car.php
@@ -0,0 +1,22 @@
+<?php
+
+/*
+ * This file is part of the Symfony package.
+ *
+ * (c) Fabien Potencier <fabien@symfony.com>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace Symfony\Bundle\SecurityBundle\Tests\Functional\Bundle\AclBundle\Entity;
+
+/**
+ * Car
+ *
+ * @author Kévin Dunglas <kevin@les-tilleuls.coop>
+ */
+class Car
+{
+    public $id;
+}
diff --git a/src/Symfony/Bundle/SecurityBundle/Tests/Functional/SetAclCommandTest.php b/src/Symfony/Bundle/SecurityBundle/Tests/Functional/SetAclCommandTest.php
new file mode 100644
index 000000000000..c476714e88f2
--- /dev/null
+++ b/src/Symfony/Bundle/SecurityBundle/Tests/Functional/SetAclCommandTest.php
@@ -0,0 +1,168 @@
+<?php
+
+namespace Symfony\Bundle\SecurityBundle\Tests\Functional;
+
+/*
+ * This file is part of the Symfony package.
+ *
+ * (c) Fabien Potencier <fabien@symfony.com>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+use Symfony\Bundle\FrameworkBundle\Console\Application;
+use Symfony\Bundle\SecurityBundle\Command\InitAclCommand;
+use Symfony\Bundle\SecurityBundle\Command\SetAclCommand;
+use Symfony\Component\Console\Tester\CommandTester;
+use Symfony\Component\Security\Acl\Domain\ObjectIdentity;
+use Symfony\Component\Security\Acl\Domain\RoleSecurityIdentity;
+use Symfony\Component\Security\Acl\Domain\UserSecurityIdentity;
+use Symfony\Component\Security\Acl\Exception\NoAceFoundException;
+use Symfony\Component\Security\Acl\Permission\BasicPermissionMap;
+
+/**
+ * Tests SetAclCommand
+ *
+ * @author Kévin Dunglas <kevin@les-tilleuls.coop>
+ */
+class SetAclCommandTest extends WebTestCase
+{
+    const OBJECT_CLASS = 'Symfony\Bundle\SecurityBundle\Tests\Functional\Bundle\AclBundle\Entity\Car';
+    const SECURITY_CLASS = 'Symfony\Component\Security\Core\User\User';
+
+    public function testSetAclUser()
+    {
+        $objectId = 1;
+        $securityUsername1 = 'kevin';
+        $securityUsername2 = 'anne';
+        $grantedPermission1 = 'VIEW';
+        $grantedPermission2 = 'EDIT';
+
+        $application = $this->getApplication();
+        $application->add(new SetAclCommand());
+
+        $setAclCommand = $application->find('acl:set');
+        $setAclCommandTester = new CommandTester($setAclCommand);
+        $setAclCommandTester->execute(array(
+            'command' => 'acl:set',
+            'arguments' => array($grantedPermission1, $grantedPermission2, sprintf('%s:%s', self::OBJECT_CLASS, $objectId)),
+            '--user' => array(sprintf('%s:%s', self::SECURITY_CLASS, $securityUsername1), sprintf('%s:%s', self::SECURITY_CLASS, $securityUsername2))
+        ));
+
+        $objectIdentity = new ObjectIdentity($objectId, self::OBJECT_CLASS);
+        $securityIdentity1 = new UserSecurityIdentity($securityUsername1, self::SECURITY_CLASS);
+        $securityIdentity2 = new UserSecurityIdentity($securityUsername2, self::SECURITY_CLASS);
+        $permissionMap = new BasicPermissionMap();
+
+        /** @var \Symfony\Component\Security\Acl\Model\AclProviderInterface $aclProvider */
+        $aclProvider = $application->getKernel()->getContainer()->get('security.acl.provider');
+        $acl = $aclProvider->findAcl($objectIdentity, array($securityIdentity1));
+
+        $this->assertTrue($acl->isGranted($permissionMap->getMasks($grantedPermission1, null), array($securityIdentity1)));
+        $this->assertTrue($acl->isGranted($permissionMap->getMasks($grantedPermission1, null), array($securityIdentity2)));
+        $this->assertTrue($acl->isGranted($permissionMap->getMasks($grantedPermission2, null), array($securityIdentity2)));
+
+        try {
+            $acl->isGranted($permissionMap->getMasks('OWNER', null), array($securityIdentity1));
+            $this->fail('NoAceFoundException not throwed');
+        } catch (NoAceFoundException $e) {
+        }
+
+        try {
+            $acl->isGranted($permissionMap->getMasks('OPERATOR', null), array($securityIdentity2));
+            $this->fail('NoAceFoundException not throwed');
+        } catch (NoAceFoundException $e) {
+        }
+    }
+
+    public function testSetAclRole()
+    {
+        $objectId = 1;
+        $securityUsername = 'kevin';
+        $grantedPermission = 'VIEW';
+        $role = 'ROLE_ADMIN';
+
+        $application = $this->getApplication();
+        $application->add(new SetAclCommand());
+
+        $setAclCommand = $application->find('acl:set');
+        $setAclCommandTester = new CommandTester($setAclCommand);
+        $setAclCommandTester->execute(array(
+            'command' => 'acl:set',
+            'arguments' => array($grantedPermission, sprintf('%s:%s', strtr(self::OBJECT_CLASS, '\\', '/'), $objectId)),
+            '--role' => array($role)
+        ));
+
+        $objectIdentity = new ObjectIdentity($objectId, self::OBJECT_CLASS);
+        $userSecurityIdentity = new UserSecurityIdentity($securityUsername, self::SECURITY_CLASS);
+        $roleSecurityIdentity = new RoleSecurityIdentity($role);
+        $permissionMap = new BasicPermissionMap();
+
+        /** @var \Symfony\Component\Security\Acl\Model\AclProviderInterface $aclProvider */
+        $aclProvider = $application->getKernel()->getContainer()->get('security.acl.provider');
+        $acl = $aclProvider->findAcl($objectIdentity, array($roleSecurityIdentity, $userSecurityIdentity));
+
+        $this->assertTrue($acl->isGranted($permissionMap->getMasks($grantedPermission, null), array($roleSecurityIdentity)));
+        $this->assertTrue($acl->isGranted($permissionMap->getMasks($grantedPermission, null), array($roleSecurityIdentity)));
+
+        try {
+            $acl->isGranted($permissionMap->getMasks('VIEW', null), array($userSecurityIdentity));
+            $this->fail('NoAceFoundException not throwed');
+        } catch (NoAceFoundException $e) {
+        }
+
+        try {
+            $acl->isGranted($permissionMap->getMasks('OPERATOR', null), array($userSecurityIdentity));
+            $this->fail('NoAceFoundException not throwed');
+        } catch (NoAceFoundException $e) {
+        }
+    }
+
+    public function testSetAclClassScope()
+    {
+        $objectId = 1;
+        $grantedPermission = 'VIEW';
+        $role = 'ROLE_USER';
+
+        $application = $this->getApplication();
+        $application->add(new SetAclCommand());
+
+        $setAclCommand = $application->find('acl:set');
+        $setAclCommandTester = new CommandTester($setAclCommand);
+        $setAclCommandTester->execute(array(
+            'command' => 'acl:set',
+            'arguments' => array($grantedPermission, sprintf('%s:%s', self::OBJECT_CLASS, $objectId)),
+            '--class-scope' => true,
+            '--role' => array($role)
+        ));
+
+        $objectIdentity1 = new ObjectIdentity($objectId, self::OBJECT_CLASS);
+        $objectIdentity2 = new ObjectIdentity(2, self::OBJECT_CLASS);
+        $roleSecurityIdentity = new RoleSecurityIdentity($role);
+        $permissionMap = new BasicPermissionMap();
+
+        /** @var \Symfony\Component\Security\Acl\Model\AclProviderInterface $aclProvider */
+        $aclProvider = $application->getKernel()->getContainer()->get('security.acl.provider');
+
+        $acl1 = $aclProvider->findAcl($objectIdentity1, array($roleSecurityIdentity));
+        $this->assertTrue($acl1->isGranted($permissionMap->getMasks($grantedPermission, null), array($roleSecurityIdentity)));
+
+        $acl2 = $aclProvider->createAcl($objectIdentity2);
+        $this->assertTrue($acl2->isGranted($permissionMap->getMasks($grantedPermission, null), array($roleSecurityIdentity)));
+    }
+
+    private function getApplication()
+    {
+        $kernel = $this->createKernel(array('test_case' => 'Acl'));
+        $kernel->boot();
+
+        $application = new Application($kernel);
+        $application->add(new InitAclCommand());
+
+        $initAclCommand = $application->find('init:acl');
+        $initAclCommandTester = new CommandTester($initAclCommand);
+        $initAclCommandTester->execute(array('command' => 'init:acl'));
+
+        return $application;
+    }
+}
diff --git a/src/Symfony/Bundle/SecurityBundle/Tests/Functional/app/Acl/bundles.php b/src/Symfony/Bundle/SecurityBundle/Tests/Functional/app/Acl/bundles.php
new file mode 100644
index 000000000000..0dad9099b493
--- /dev/null
+++ b/src/Symfony/Bundle/SecurityBundle/Tests/Functional/app/Acl/bundles.php
@@ -0,0 +1,8 @@
+<?php
+
+return array(
+    new Doctrine\Bundle\DoctrineBundle\DoctrineBundle(),
+    new Symfony\Bundle\SecurityBundle\SecurityBundle(),
+    new Symfony\Bundle\FrameworkBundle\FrameworkBundle(),
+    new Symfony\Bundle\SecurityBundle\Tests\Functional\Bundle\AclBundle\AclBundle()
+);
diff --git a/src/Symfony/Bundle/SecurityBundle/Tests/Functional/app/Acl/config.yml b/src/Symfony/Bundle/SecurityBundle/Tests/Functional/app/Acl/config.yml
new file mode 100644
index 000000000000..33eadbc7cdf0
--- /dev/null
+++ b/src/Symfony/Bundle/SecurityBundle/Tests/Functional/app/Acl/config.yml
@@ -0,0 +1,24 @@
+imports:
+    - { resource: ./../config/framework.yml }
+
+doctrine:
+    dbal:
+        driver:   pdo_sqlite
+        memory:   true
+        charset:  UTF8
+
+security:
+    firewalls:
+        test:
+            pattern:  ^/
+            security: false
+    acl:
+        connection: default
+    encoders:
+        Symfony\Component\Security\Core\User\User: plaintext
+    providers:
+        in_memory:
+            memory:
+                users:
+                    kevin: { password: test, roles: [ROLE_USER] }
+                    anne:  { password: test, roles: [ROLE_ADMIN]}
diff --git a/src/Symfony/Bundle/SecurityBundle/composer.json b/src/Symfony/Bundle/SecurityBundle/composer.json
index c54213c9bfb3..33493d6f20d2 100644
--- a/src/Symfony/Bundle/SecurityBundle/composer.json
+++ b/src/Symfony/Bundle/SecurityBundle/composer.json
@@ -25,7 +25,8 @@
         "symfony/twig-bundle": "~2.2",
         "symfony/validator": "~2.2",
         "symfony/yaml": "~2.0",
-        "symfony/expression-language": "~2.4"
+        "symfony/expression-language": "~2.4",
+        "doctrine/doctrine-bundle": "~1.2"
     },
     "autoload": {
         "psr-0": { "Symfony\\Bundle\\SecurityBundle\\": "" }
@@ -34,7 +35,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Bundle/TwigBundle/Controller/ExceptionController.php b/src/Symfony/Bundle/TwigBundle/Controller/ExceptionController.php
index e0acb565648f..8afab1ca81d4 100644
--- a/src/Symfony/Bundle/TwigBundle/Controller/ExceptionController.php
+++ b/src/Symfony/Bundle/TwigBundle/Controller/ExceptionController.php
@@ -51,14 +51,35 @@ public function showAction(Request $request, FlattenException $exception, DebugL

         $code = $exception->getStatusCode();

+        $originalRequest = $request->attributes->get('original_request');
+
+        // allow the developer to see the real template with ?_real_template=1
+        $debug = $this->debug;
+        if ($debug && $originalRequest && $originalRequest->query->get('_real_template')) {
+            $debug = false;
+        }
+
+        // determine if we're able to show the link to view the true error template
+        $showErrorTemplateLink = false;
+        $errorTemplateParams = array();
+        if ($originalRequest && $originalRequest->isMethod('GET')) {
+            $showErrorTemplateLink = true;
+            $errorTemplateParams = array_merge(
+                $request->query->all(),
+                array('_real_template' => 1)
+            );
+        }
+
         return new Response($this->twig->render(
-            $this->findTemplate($request, $_format, $code, $this->debug),
+            $this->findTemplate($request, $_format, $code, $debug),
             array(
                 'status_code'    => $code,
                 'status_text'    => isset(Response::$statusTexts[$code]) ? Response::$statusTexts[$code] : '',
                 'exception'      => $exception,
                 'logger'         => $logger,
                 'currentContent' => $currentContent,
+                'showErrorTemplateLink' => $showErrorTemplateLink,
+                'errorTemplateParams'   => $errorTemplateParams,
             )
         ));
     }
diff --git a/src/Symfony/Bundle/TwigBundle/Resources/views/Exception/error.html.twig b/src/Symfony/Bundle/TwigBundle/Resources/views/Exception/error.html.twig
index 22d0c3a29bcb..05cafe7c5772 100644
--- a/src/Symfony/Bundle/TwigBundle/Resources/views/Exception/error.html.twig
+++ b/src/Symfony/Bundle/TwigBundle/Resources/views/Exception/error.html.twig
@@ -9,9 +9,8 @@
         <h2>The server returned a "{{ status_code }} {{ status_text }}".</h2>

         <div>
-            Something is broken. Please e-mail us at [email] and let us know
-            what you were doing when this error occurred. We will fix it as soon
-            as possible. Sorry for any inconvenience caused.
+            Something is broken. Please let us know what you were doing when this error occurred.
+            We will fix it as soon as possible. Sorry for any inconvenience caused.
         </div>
     </body>
 </html>
diff --git a/src/Symfony/Bundle/TwigBundle/Resources/views/Exception/exception_full.html.twig b/src/Symfony/Bundle/TwigBundle/Resources/views/Exception/exception_full.html.twig
index 1920b6008b11..9b0c0d54bc35 100644
--- a/src/Symfony/Bundle/TwigBundle/Resources/views/Exception/exception_full.html.twig
+++ b/src/Symfony/Bundle/TwigBundle/Resources/views/Exception/exception_full.html.twig
@@ -11,3 +11,16 @@
 {% block body %}
     {% include 'TwigBundle:Exception:exception.html.twig' %}
 {% endblock %}
+
+{% block header_right %}
+    {% if showErrorTemplateLink %}
+    <span class="sf-reset">
+        <a href="?{{ errorTemplateParams|url_encode }}"
+           title="Render the true error page that your end users will see"
+           onclick="alert('If you don\'t see an error page after the refresh, see: http://symfony.com/doc/current/cookbook/controller/error_pages.html');"
+        >
+            Render True Error Page
+        </a>
+    </span>
+    {% endif %}
+{% endblock %}
diff --git a/src/Symfony/Bundle/TwigBundle/Resources/views/layout.html.twig b/src/Symfony/Bundle/TwigBundle/Resources/views/layout.html.twig
index 69409827057d..b98913f57743 100644
--- a/src/Symfony/Bundle/TwigBundle/Resources/views/layout.html.twig
+++ b/src/Symfony/Bundle/TwigBundle/Resources/views/layout.html.twig
@@ -31,6 +31,8 @@
                                     </span>
                                 </span>
                             </button>
+
+                            {% block header_right %}{% endblock %}
                         </div>
                    </form>
                 </div>
diff --git a/src/Symfony/Bundle/TwigBundle/composer.json b/src/Symfony/Bundle/TwigBundle/composer.json
index 3dd1a7218f94..965d77a19999 100644
--- a/src/Symfony/Bundle/TwigBundle/composer.json
+++ b/src/Symfony/Bundle/TwigBundle/composer.json
@@ -35,7 +35,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Bundle/WebProfilerBundle/Resources/views/Collector/logger.html.twig b/src/Symfony/Bundle/WebProfilerBundle/Resources/views/Collector/logger.html.twig
index e2d7d5faaed6..4ab569020f5d 100644
--- a/src/Symfony/Bundle/WebProfilerBundle/Resources/views/Collector/logger.html.twig
+++ b/src/Symfony/Bundle/WebProfilerBundle/Resources/views/Collector/logger.html.twig
@@ -105,7 +105,7 @@


 {% macro display_message(log_index, log) %}
-    {% if constant('Symfony\\Component\\HttpKernel\\Debug\\ErrorHandler::TYPE_DEPRECATION') == log.context.type|default(0) %}
+    {% if log.context.level is defined and log.context.type is defined and (constant('E_DEPRECATED') == log.context.type or constant('E_USER_DEPRECATED') == log.context.type) %}
         DEPRECATION -  {{ log.message }}
         {% set id = 'sf-call-stack-' ~ log_index %}
         <a href="#" onclick="Sfjs.toggle('{{ id }}', document.getElementById('{{ id }}-on'), document.getElementById('{{ id }}-off')); return false;">
diff --git a/src/Symfony/Bundle/WebProfilerBundle/Resources/views/Profiler/admin.html.twig b/src/Symfony/Bundle/WebProfilerBundle/Resources/views/Profiler/admin.html.twig
index 3ca28ff1629c..54140171726d 100644
--- a/src/Symfony/Bundle/WebProfilerBundle/Resources/views/Profiler/admin.html.twig
+++ b/src/Symfony/Bundle/WebProfilerBundle/Resources/views/Profiler/admin.html.twig
@@ -13,8 +13,8 @@
                 &#187;&#160;<a href="{{ path('_profiler_export', { 'token': token }) }}">Export</a>
             </div>
         {% endif %}
-        &#187;&#160;<label for="file">Import</label><br>
-        <input type="file" name="file" id="file"><br>
+        &#187;&#160;<label for="file">Import</label><br />
+        <input type="file" name="file" id="file"><br />
         <button type="submit" class="sf-button">
             <span class="border-l">
                 <span class="border-r">
diff --git a/src/Symfony/Bundle/WebProfilerBundle/Resources/views/Profiler/search.html.twig b/src/Symfony/Bundle/WebProfilerBundle/Resources/views/Profiler/search.html.twig
index 08defd6c5061..d9771d17393c 100644
--- a/src/Symfony/Bundle/WebProfilerBundle/Resources/views/Profiler/search.html.twig
+++ b/src/Symfony/Bundle/WebProfilerBundle/Resources/views/Profiler/search.html.twig
@@ -5,7 +5,7 @@
     </h3>
     <form action="{{ path('_profiler_search') }}" method="get">
         <label for="ip">IP</label>
-        <input type="text" name="ip" id="ip" value="{{ ip }}">
+        <input type="text" name="ip" id="ip" value="{{ ip }}" placeholder="e.g. 127.0.0.1">
         <div class="clear-fix"></div>
         <label for="method">Method</label>
         <select name="method" id="method">
@@ -15,16 +15,16 @@
         </select>
         <div class="clear-fix"></div>
         <label for="url">URL</label>
-        <input type="text" name="url" id="url" value="{{ url }}">
+        <input type="url" name="url" id="url" value="{{ url }}" placeholder="e.g. {{ app.request.baseUrl }}">
         <div class="clear-fix"></div>
         <label for="token">Token</label>
-        <input type="text" name="token" id="token" value="{{ token }}">
+        <input type="text" name="token" id="token" value="{{ token }}" placeholder="e.g. 1f321b">
         <div class="clear-fix"></div>
         <label for="start">From</label>
-        <input type="text" name="start" id="start" value="{{ start }}">
+        <input type="date" name="start" id="start" value="{{ start }}" placeholder="e.g. {{ '-2days'|date('dd.mm.YYYY') }}">
         <div class="clear-fix"></div>
         <label for="end">Until</label>
-        <input type="text" name="end" id="end" value="{{ end }}">
+        <input type="date" name="end" id="end" value="{{ end }}" placeholder="e.g. {{ 'now'|date('dd.mm.YYYY') }}">
         <div class="clear-fix"></div>
         <label for="limit">Limit</label>
         <select name="limit" id="limit">
diff --git a/src/Symfony/Bundle/WebProfilerBundle/composer.json b/src/Symfony/Bundle/WebProfilerBundle/composer.json
index c6e5ee51248a..15a9beffb85c 100644
--- a/src/Symfony/Bundle/WebProfilerBundle/composer.json
+++ b/src/Symfony/Bundle/WebProfilerBundle/composer.json
@@ -33,7 +33,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Component/BrowserKit/composer.json b/src/Symfony/Component/BrowserKit/composer.json
index ed914dde4668..7ff2cab391ec 100644
--- a/src/Symfony/Component/BrowserKit/composer.json
+++ b/src/Symfony/Component/BrowserKit/composer.json
@@ -33,7 +33,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Component/ClassLoader/ClassMapGenerator.php b/src/Symfony/Component/ClassLoader/ClassMapGenerator.php
index 59c99d0f1b75..7f83dbc5592d 100644
--- a/src/Symfony/Component/ClassLoader/ClassMapGenerator.php
+++ b/src/Symfony/Component/ClassLoader/ClassMapGenerator.php
@@ -11,6 +11,10 @@

 namespace Symfony\Component\ClassLoader;

+if (!defined('T_TRAIT')) {
+    define('T_TRAIT', 0);
+}
+
 /**
  * ClassMapGenerator
  *
@@ -84,7 +88,6 @@ private static function findClasses($path)
     {
         $contents = file_get_contents($path);
         $tokens   = token_get_all($contents);
-        $T_TRAIT  = version_compare(PHP_VERSION, '5.4', '<') ? -1 : T_TRAIT;

         $classes = array();

@@ -111,7 +114,7 @@ private static function findClasses($path)
                     break;
                 case T_CLASS:
                 case T_INTERFACE:
-                case $T_TRAIT:
+                case T_TRAIT:
                     // Find the classname
                     while (($t = $tokens[++$i]) && is_array($t)) {
                         if (T_STRING === $t[0]) {
diff --git a/src/Symfony/Component/ClassLoader/composer.json b/src/Symfony/Component/ClassLoader/composer.json
index 84ce6a0a633a..f323a76c6f5a 100644
--- a/src/Symfony/Component/ClassLoader/composer.json
+++ b/src/Symfony/Component/ClassLoader/composer.json
@@ -28,7 +28,7 @@
     "target-dir": "Symfony/Component/ClassLoader",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Component/Config/Util/XmlUtils.php b/src/Symfony/Component/Config/Util/XmlUtils.php
index 6b3e5f737055..dd68634cc072 100644
--- a/src/Symfony/Component/Config/Util/XmlUtils.php
+++ b/src/Symfony/Component/Config/Util/XmlUtils.php
@@ -80,7 +80,8 @@ public static function loadFile($file, $schemaOrCallable = null)
                     $valid = false;
                 }
             } elseif (!is_array($schemaOrCallable) && is_file((string) $schemaOrCallable)) {
-                $valid = @$dom->schemaValidate($schemaOrCallable);
+                $schemaSource = file_get_contents((string) $schemaOrCallable);
+                $valid = @$dom->schemaValidateSource($schemaSource);
             } else {
                 libxml_use_internal_errors($internalErrors);

diff --git a/src/Symfony/Component/Config/composer.json b/src/Symfony/Component/Config/composer.json
index dce426b77c0e..c11d3a603d60 100644
--- a/src/Symfony/Component/Config/composer.json
+++ b/src/Symfony/Component/Config/composer.json
@@ -26,7 +26,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Component/Console/Application.php b/src/Symfony/Component/Console/Application.php
index 41d8f93bbb35..5b3a0dc28632 100644
--- a/src/Symfony/Component/Console/Application.php
+++ b/src/Symfony/Component/Console/Application.php
@@ -13,6 +13,8 @@

 use Symfony\Component\Console\Descriptor\TextDescriptor;
 use Symfony\Component\Console\Descriptor\XmlDescriptor;
+use Symfony\Component\Console\Helper\DebugFormatterHelper;
+use Symfony\Component\Console\Helper\ProcessHelper;
 use Symfony\Component\Console\Helper\QuestionHelper;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Input\ArgvInput;
@@ -962,6 +964,8 @@ protected function getDefaultHelperSet()
             new DialogHelper(),
             new ProgressHelper(),
             new TableHelper(),
+            new DebugFormatterHelper(),
+            new ProcessHelper(),
             new QuestionHelper(),
         ));
     }
diff --git a/src/Symfony/Component/Console/CHANGELOG.md b/src/Symfony/Component/Console/CHANGELOG.md
index 9c5741b5e727..55ded1f28033 100644
--- a/src/Symfony/Component/Console/CHANGELOG.md
+++ b/src/Symfony/Component/Console/CHANGELOG.md
@@ -1,6 +1,12 @@
 CHANGELOG
 =========

+2.6.0
+-----
+
+ * added a Process helper
+ * added a DebugFormatter helper
+
 2.5.0
 -----

diff --git a/src/Symfony/Component/Console/Helper/DebugFormatterHelper.php b/src/Symfony/Component/Console/Helper/DebugFormatterHelper.php
new file mode 100644
index 000000000000..cdb620d1684b
--- /dev/null
+++ b/src/Symfony/Component/Console/Helper/DebugFormatterHelper.php
@@ -0,0 +1,127 @@
+<?php
+
+/*
+ * This file is part of the Symfony package.
+ *
+ * (c) Fabien Potencier <fabien@symfony.com>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace Symfony\Component\Console\Helper;
+
+/**
+ * Helps outputting debug information when running an external program from a command.
+ *
+ * An external program can be a Process, an HTTP request, or anything else.
+ *
+ * @author Fabien Potencier <fabien@symfony.com>
+ */
+class DebugFormatterHelper extends Helper
+{
+    private $colors = array('black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white');
+    private $started = array();
+    private $count = -1;
+
+    /**
+     * Starts a debug formatting session
+     *
+     * @param string $id      The id of the formatting session
+     * @param string $message The message to display
+     * @param string $prefix  The prefix to use
+     *
+     * @return string
+     */
+    public function start($id, $message, $prefix = 'RUN')
+    {
+        $this->started[$id] = array('border' => ++$this->count % count($this->colors));
+
+        return sprintf("%s<bg=blue;fg=white> %s </> <fg=blue>%s</>\n", $this->getBorder($id), $prefix, $message);
+    }
+
+    /**
+     * Adds progress to a formatting session
+     *
+     * @param string $id          The id of the formatting session
+     * @param string $buffer      The message to display
+     * @param bool   $error       Whether to consider the buffer as error
+     * @param string $prefix      The prefix for output
+     * @param string $errorPrefix The prefix for error output
+     *
+     * @return string
+     */
+    public function progress($id, $buffer, $error = false, $prefix = 'OUT', $errorPrefix = 'ERR')
+    {
+        $message = '';
+
+        if ($error) {
+            if (isset($this->started[$id]['out'])) {
+                $message .= "\n";
+                unset($this->started[$id]['out']);
+            }
+            if (!isset($this->started[$id]['err'])) {
+                $message .= sprintf("%s<bg=red;fg=white> %s </> ", $this->getBorder($id), $errorPrefix);
+                $this->started[$id]['err'] = true;
+            }
+
+            $message .= str_replace("\n", sprintf("\n%s<bg=red;fg=white> %s </> ", $this->getBorder($id), $errorPrefix), $buffer);
+        } else {
+            if (isset($this->started[$id]['err'])) {
+                $message .= "\n";
+                unset($this->started[$id]['err']);
+            }
+            if (!isset($this->started[$id]['out'])) {
+                $message .= sprintf("%s<bg=green;fg=white> %s </> ", $this->getBorder($id), $prefix);
+                $this->started[$id]['out'] = true;
+            }
+
+            $message .= str_replace("\n", sprintf("\n%s<bg=green;fg=white> %s </> ", $this->getBorder($id), $prefix), $buffer);
+        }
+
+        return $message;
+    }
+
+    /**
+     * Stops a formatting session
+     *
+     * @param string $id         The id of the formatting session
+     * @param string $message    The message to display
+     * @param bool   $successful Whether to consider the result as success
+     * @param string $prefix     The prefix for the end output
+     *
+     * @return string
+     */
+    public function stop($id, $message, $successful, $prefix = 'RES')
+    {
+        $trailingEOL = isset($this->started[$id]['out']) || isset($this->started[$id]['err']) ? "\n" : '';
+
+        if ($successful) {
+            return sprintf("%s%s<bg=green;fg=white> %s </> <fg=green>%s</>\n", $trailingEOL, $this->getBorder($id), $prefix, $message);
+        }
+
+        $message = sprintf("%s%s<bg=red;fg=white> %s </> <fg=red>%s</>\n", $trailingEOL, $this->getBorder($id), $prefix, $message);
+
+        unset($this->started[$id]['out'], $this->started[$id]['err']);
+
+        return $message;
+    }
+
+    /**
+     * @param string $id The id of the formatting session
+     *
+     * @return string
+     */
+    private function getBorder($id)
+    {
+        return sprintf('<bg=%s> </>', $this->colors[$this->started[$id]['border']]);
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function getName()
+    {
+        return 'debug_formatter';
+    }
+}
diff --git a/src/Symfony/Component/Console/Helper/ProcessHelper.php b/src/Symfony/Component/Console/Helper/ProcessHelper.php
new file mode 100644
index 000000000000..2ae780b8012e
--- /dev/null
+++ b/src/Symfony/Component/Console/Helper/ProcessHelper.php
@@ -0,0 +1,129 @@
+<?php
+
+/*
+ * This file is part of the Symfony package.
+ *
+ * (c) Fabien Potencier <fabien@symfony.com>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace Symfony\Component\Console\Helper;
+
+use Symfony\Component\Console\Output\OutputInterface;
+use Symfony\Component\Process\Exception\ProcessFailedException;
+use Symfony\Component\Process\Process;
+use Symfony\Component\Process\ProcessBuilder;
+
+/**
+ * The ProcessHelper class provides helpers to run external processes.
+ *
+ * @author Fabien Potencier <fabien@symfony.com>
+ */
+class ProcessHelper extends Helper
+{
+    /**
+     * Runs an external process.
+     *
+     * @param OutputInterface      $output   An OutputInterface instance
+     * @param string|array|Process $cmd      An instance of Process or an array of arguments to escape and run or a command to run
+     * @param string|null          $error    An error message that must be displayed if something went wrong
+     * @param callable|null        $callback A PHP callback to run whenever there is some
+     *                                       output available on STDOUT or STDERR
+     *
+     * @return Process The process that ran
+     */
+    public function run(OutputInterface $output, $cmd, $error = null, $callback = null)
+    {
+        $formatter = $this->getHelperSet()->get('debug_formatter');
+
+        if (is_array($cmd)) {
+            $process = ProcessBuilder::create($cmd)->getProcess();
+        } elseif ($cmd instanceof Process) {
+            $process = $cmd;
+        } else {
+            $process = new Process($cmd);
+        }
+
+        if ($output->isVeryVerbose()) {
+            $output->write($formatter->start(spl_object_hash($process), $process->getCommandLine()));
+        }
+
+        if ($output->isDebug()) {
+            $callback = $this->wrapCallback($output, $process, $callback);
+        }
+
+        $process->run($callback);
+
+        if ($output->isVeryVerbose()) {
+            $message = $process->isSuccessful() ? 'Command ran successfully' : sprintf('%s Command did not run successfully', $process->getExitCode());
+            $output->write($formatter->stop(spl_object_hash($process), $message, $process->isSuccessful()));
+        }
+
+        if (!$process->isSuccessful() && null !== $error) {
+            $output->writeln(sprintf('<error>%s</error>', $error));
+        }
+
+        return $process;
+    }
+
+    /**
+     * Runs the process.
+     *
+     * This is identical to run() except that an exception is thrown if the process
+     * exits with a non-zero exit code.
+     *
+     * @param OutputInterface $output   An OutputInterface instance
+     * @param string|Process  $cmd      An instance of Process or a command to run
+     * @param string|null     $error    An error message that must be displayed if something went wrong
+     * @param callable|null   $callback A PHP callback to run whenever there is some
+     *                                  output available on STDOUT or STDERR
+     *
+     * @return Process The process that ran
+     *
+     * @throws ProcessFailedException
+     *
+     * @see run()
+     */
+    public function mustRun(OutputInterface $output, $cmd, $error = null, $callback = null)
+    {
+        $process = $this->run($output, $cmd, $error, $callback);
+
+        if (!$process->isSuccessful()) {
+            throw new ProcessFailedException($process);
+        }
+
+        return $process;
+    }
+
+    /**
+     * Wraps a Process callback to add debugging output.
+     *
+     * @param OutputInterface $output   An OutputInterface interface
+     * @param Process         $process  The Process
+     * @param callable|null   $callback A PHP callable
+     *
+     * @return callable
+     */
+    public function wrapCallback(OutputInterface $output, Process $process, $callback = null)
+    {
+        $formatter = $this->getHelperSet()->get('debug_formatter');
+
+        return function ($type, $buffer) use ($output, $process, $callback, $formatter) {
+            $output->write($formatter->progress(spl_object_hash($process), $buffer, Process::ERR === $type));
+
+            if (null !== $callback) {
+                call_user_func($callback, $type, $buffer);
+            }
+        };
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function getName()
+    {
+        return 'process';
+    }
+}
diff --git a/src/Symfony/Component/Console/Tests/Helper/ProcessHelperTest.php b/src/Symfony/Component/Console/Tests/Helper/ProcessHelperTest.php
new file mode 100644
index 000000000000..0ca247f1ebe2
--- /dev/null
+++ b/src/Symfony/Component/Console/Tests/Helper/ProcessHelperTest.php
@@ -0,0 +1,108 @@
+<?php
+
+/*
+ * This file is part of the Symfony package.
+ *
+ * (c) Fabien Potencier <fabien@symfony.com>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace Symfony\Component\Console\Tests\Helper;
+
+use Symfony\Component\Console\Helper\DebugFormatterHelper;
+use Symfony\Component\Console\Helper\HelperSet;
+use Symfony\Component\Console\Helper\Helper;
+use Symfony\Component\Console\Output\StreamOutput;
+use Symfony\Component\Console\Helper\ProcessHelper;
+use Symfony\Component\Process\Process;
+
+class ProcessHelperTest extends \PHPUnit_Framework_TestCase
+{
+    /**
+     * @dataProvider provideCommandsAndOutput
+     */
+    public function testVariousProcessRuns($expected, $cmd, $verbosity, $error)
+    {
+        $helper = new ProcessHelper();
+        $helper->setHelperSet(new HelperSet(array(new DebugFormatterHelper())));
+        $output = $this->getOutputStream($verbosity);
+        $helper->run($output, $cmd, $error);
+        $this->assertEquals($expected, $this->getOutput($output));
+    }
+
+    public function testPassedCallbackIsExecuted()
+    {
+        $helper = new ProcessHelper();
+        $helper->setHelperSet(new HelperSet(array(new DebugFormatterHelper())));
+        $output = $this->getOutputStream(StreamOutput::VERBOSITY_NORMAL);
+
+        $executed = false;
+        $callback = function () use (&$executed) { $executed = true; };
+
+        $helper->run($output, 'php -r "echo 42;"', null, $callback);
+        $this->assertTrue($executed);
+    }
+
+    public function provideCommandsAndOutput()
+    {
+        $successOutputVerbose = <<<EOT
+  RUN  php -r "echo 42;"
+  RES  Command ran successfully
+
+EOT;
+        $successOutputDebug = <<<EOT
+  RUN  php -r "echo 42;"
+  OUT  42
+  RES  Command ran successfully
+
+EOT;
+        $successOutputProcessDebug = <<<EOT
+  RUN  'php' '-r' 'echo 42;'
+  OUT  42
+  RES  Command ran successfully
+
+EOT;
+        $syntaxErrorOutputVerbose = <<<EOT
+  RUN  php -r "fwrite(STDERR, 'error message');usleep(50000);fwrite(STDOUT, 'out message');exit(252);"
+  RES  252 Command did not run successfully
+
+EOT;
+        $syntaxErrorOutputDebug = <<<EOT
+  RUN  php -r "fwrite(STDERR, 'error message');usleep(50000);fwrite(STDOUT, 'out message');exit(252);"
+  ERR  error message
+  OUT  out message
+  RES  252 Command did not run successfully
+
+EOT;
+
+        $errorMessage = 'An error occurred';
+
+        return array(
+            array('', 'php -r "echo 42;"', StreamOutput::VERBOSITY_VERBOSE, null),
+            array($successOutputVerbose, 'php -r "echo 42;"', StreamOutput::VERBOSITY_VERY_VERBOSE, null),
+            array($successOutputDebug, 'php -r "echo 42;"', StreamOutput::VERBOSITY_DEBUG, null),
+            array('', 'php -r "syntax error"', StreamOutput::VERBOSITY_VERBOSE, null),
+            array($syntaxErrorOutputVerbose, 'php -r "fwrite(STDERR, \'error message\');usleep(50000);fwrite(STDOUT, \'out message\');exit(252);"', StreamOutput::VERBOSITY_VERY_VERBOSE, null),
+            array($syntaxErrorOutputDebug, 'php -r "fwrite(STDERR, \'error message\');usleep(50000);fwrite(STDOUT, \'out message\');exit(252);"', StreamOutput::VERBOSITY_DEBUG, null),
+            array($errorMessage.PHP_EOL, 'php -r "fwrite(STDERR, \'error message\');usleep(50000);fwrite(STDOUT, \'out message\');exit(252);"', StreamOutput::VERBOSITY_VERBOSE, $errorMessage),
+            array($syntaxErrorOutputVerbose.$errorMessage.PHP_EOL, 'php -r "fwrite(STDERR, \'error message\');usleep(50000);fwrite(STDOUT, \'out message\');exit(252);"', StreamOutput::VERBOSITY_VERY_VERBOSE, $errorMessage),
+            array($syntaxErrorOutputDebug.$errorMessage.PHP_EOL, 'php -r "fwrite(STDERR, \'error message\');usleep(50000);fwrite(STDOUT, \'out message\');exit(252);"', StreamOutput::VERBOSITY_DEBUG, $errorMessage),
+            array($successOutputProcessDebug, array('php', '-r', 'echo 42;'), StreamOutput::VERBOSITY_DEBUG, null),
+            array($successOutputDebug, new Process('php -r "echo 42;"'), StreamOutput::VERBOSITY_DEBUG, null),
+        );
+    }
+
+    private function getOutputStream($verbosity)
+    {
+        return new StreamOutput(fopen('php://memory', 'r+', false), $verbosity, false);
+    }
+
+    private function getOutput(StreamOutput $output)
+    {
+        rewind($output->getStream());
+
+        return stream_get_contents($output->getStream());
+    }
+}
diff --git a/src/Symfony/Component/Console/composer.json b/src/Symfony/Component/Console/composer.json
index e7a8e2fc70ed..4a106d7db614 100644
--- a/src/Symfony/Component/Console/composer.json
+++ b/src/Symfony/Component/Console/composer.json
@@ -20,10 +20,12 @@
     },
     "require-dev": {
         "symfony/event-dispatcher": "~2.1",
+        "symfony/process": "~2.1",
         "psr/log": "~1.0"
     },
     "suggest": {
         "symfony/event-dispatcher": "",
+        "symfony/process": "",
         "psr/log": "For using the console logger"
     },
     "autoload": {
@@ -33,7 +35,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Component/CssSelector/XPath/Extension/ExtensionInterface.php b/src/Symfony/Component/CssSelector/XPath/Extension/ExtensionInterface.php
index 65ab287770f2..22312659429a 100644
--- a/src/Symfony/Component/CssSelector/XPath/Extension/ExtensionInterface.php
+++ b/src/Symfony/Component/CssSelector/XPath/Extension/ExtensionInterface.php
@@ -24,6 +24,8 @@ interface ExtensionInterface
     /**
      * Returns node translators.
      *
+     * These callables will receive the node as first argument and the translator as second argument.
+     *
      * @return callable[]
      */
     public function getNodeTranslators();
diff --git a/src/Symfony/Component/CssSelector/XPath/Extension/NodeExtension.php b/src/Symfony/Component/CssSelector/XPath/Extension/NodeExtension.php
index f86f2b967266..d71baaa96bcd 100644
--- a/src/Symfony/Component/CssSelector/XPath/Extension/NodeExtension.php
+++ b/src/Symfony/Component/CssSelector/XPath/Extension/NodeExtension.php
@@ -29,11 +29,6 @@ class NodeExtension extends AbstractExtension
     const ATTRIBUTE_NAME_IN_LOWER_CASE  = 2;
     const ATTRIBUTE_VALUE_IN_LOWER_CASE = 4;

-    /**
-     * @var Translator
-     */
-    private $translator;
-
     /**
      * @var int
      */
@@ -42,12 +37,10 @@ class NodeExtension extends AbstractExtension
     /**
      * Constructor.
      *
-     * @param Translator $translator
-     * @param int        $flags
+     * @param int $flags
      */
-    public function __construct(Translator $translator, $flags = 0)
+    public function __construct($flags = 0)
     {
-        $this->translator = $translator;
         $this->flags = $flags;
     }

@@ -100,33 +93,36 @@ public function getNodeTranslators()

     /**
      * @param Node\SelectorNode $node
+     * @param Translator        $translator
      *
      * @return XPathExpr
      */
-    public function translateSelector(Node\SelectorNode $node)
+    public function translateSelector(Node\SelectorNode $node, Translator $translator)
     {
-        return $this->translator->nodeToXPath($node->getTree());
+        return $translator->nodeToXPath($node->getTree());
     }

     /**
      * @param Node\CombinedSelectorNode $node
+     * @param Translator                $translator
      *
      * @return XPathExpr
      */
-    public function translateCombinedSelector(Node\CombinedSelectorNode $node)
+    public function translateCombinedSelector(Node\CombinedSelectorNode $node, Translator $translator)
     {
-        return $this->translator->addCombination($node->getCombinator(), $node->getSelector(), $node->getSubSelector());
+        return $translator->addCombination($node->getCombinator(), $node->getSelector(), $node->getSubSelector());
     }

     /**
      * @param Node\NegationNode $node
+     * @param Translator        $translator
      *
      * @return XPathExpr
      */
-    public function translateNegation(Node\NegationNode $node)
+    public function translateNegation(Node\NegationNode $node, Translator $translator)
     {
-        $xpath = $this->translator->nodeToXPath($node->getSelector());
-        $subXpath = $this->translator->nodeToXPath($node->getSubSelector());
+        $xpath = $translator->nodeToXPath($node->getSelector());
+        $subXpath = $translator->nodeToXPath($node->getSubSelector());
         $subXpath->addNameTest();

         if ($subXpath->getCondition()) {
@@ -138,34 +134,37 @@ public function translateNegation(Node\NegationNode $node)

     /**
      * @param Node\FunctionNode $node
+     * @param Translator        $translator
      *
      * @return XPathExpr
      */
-    public function translateFunction(Node\FunctionNode $node)
+    public function translateFunction(Node\FunctionNode $node, Translator $translator)
     {
-        $xpath = $this->translator->nodeToXPath($node->getSelector());
+        $xpath = $translator->nodeToXPath($node->getSelector());

-        return $this->translator->addFunction($xpath, $node);
+        return $translator->addFunction($xpath, $node);
     }

     /**
      * @param Node\PseudoNode $node
+     * @param Translator      $translator
      *
      * @return XPathExpr
      */
-    public function translatePseudo(Node\PseudoNode $node)
+    public function translatePseudo(Node\PseudoNode $node, Translator $translator)
     {
-        $xpath = $this->translator->nodeToXPath($node->getSelector());
+        $xpath = $translator->nodeToXPath($node->getSelector());

-        return $this->translator->addPseudoClass($xpath, $node->getIdentifier());
+        return $translator->addPseudoClass($xpath, $node->getIdentifier());
     }

     /**
      * @param Node\AttributeNode $node
+     * @param Translator         $translator
      *
      * @return XPathExpr
      */
-    public function translateAttribute(Node\AttributeNode $node)
+    public function translateAttribute(Node\AttributeNode $node, Translator $translator)
     {
         $name = $node->getAttribute();
         $safe = $this->isSafeName($name);
@@ -181,37 +180,39 @@ public function translateAttribute(Node\AttributeNode $node)

         $attribute = $safe ? '@'.$name : sprintf('attribute::*[name() = %s]', Translator::getXpathLiteral($name));
         $value = $node->getValue();
-        $xpath = $this->translator->nodeToXPath($node->getSelector());
+        $xpath = $translator->nodeToXPath($node->getSelector());

         if ($this->hasFlag(self::ATTRIBUTE_VALUE_IN_LOWER_CASE)) {
             $value = strtolower($value);
         }

-        return $this->translator->addAttributeMatching($xpath, $node->getOperator(), $attribute, $value);
+        return $translator->addAttributeMatching($xpath, $node->getOperator(), $attribute, $value);
     }

     /**
      * @param Node\ClassNode $node
+     * @param Translator     $translator
      *
      * @return XPathExpr
      */
-    public function translateClass(Node\ClassNode $node)
+    public function translateClass(Node\ClassNode $node, Translator $translator)
     {
-        $xpath = $this->translator->nodeToXPath($node->getSelector());
+        $xpath = $translator->nodeToXPath($node->getSelector());

-        return $this->translator->addAttributeMatching($xpath, '~=', '@class', $node->getName());
+        return $translator->addAttributeMatching($xpath, '~=', '@class', $node->getName());
     }

     /**
      * @param Node\HashNode $node
+     * @param Translator    $translator
      *
      * @return XPathExpr
      */
-    public function translateHash(Node\HashNode $node)
+    public function translateHash(Node\HashNode $node, Translator $translator)
     {
-        $xpath = $this->translator->nodeToXPath($node->getSelector());
+        $xpath = $translator->nodeToXPath($node->getSelector());

-        return $this->translator->addAttributeMatching($xpath, '=', '@id', $node->getId());
+        return $translator->addAttributeMatching($xpath, '=', '@id', $node->getId());
     }

     /**
diff --git a/src/Symfony/Component/CssSelector/XPath/Translator.php b/src/Symfony/Component/CssSelector/XPath/Translator.php
index 5a8eb99017a1..4676677ea488 100644
--- a/src/Symfony/Component/CssSelector/XPath/Translator.php
+++ b/src/Symfony/Component/CssSelector/XPath/Translator.php
@@ -76,7 +76,7 @@ public function __construct(ParserInterface $parser = null)
         $this->mainParser = $parser ?: new Parser();

         $this
-            ->registerExtension(new Extension\NodeExtension($this))
+            ->registerExtension(new Extension\NodeExtension())
             ->registerExtension(new Extension\CombinationExtension())
             ->registerExtension(new Extension\FunctionExtension())
             ->registerExtension(new Extension\PseudoClassExtension())
@@ -207,7 +207,7 @@ public function nodeToXPath(NodeInterface $node)
             throw new ExpressionErrorException(sprintf('Node "%s" not supported.', $node->getNodeName()));
         }

-        return call_user_func($this->nodeTranslators[$node->getNodeName()], $node);
+        return call_user_func($this->nodeTranslators[$node->getNodeName()], $node, $this);
     }

     /**
diff --git a/src/Symfony/Component/CssSelector/composer.json b/src/Symfony/Component/CssSelector/composer.json
index 5b4231d79475..d47c77fe6444 100644
--- a/src/Symfony/Component/CssSelector/composer.json
+++ b/src/Symfony/Component/CssSelector/composer.json
@@ -29,7 +29,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Component/Debug/CHANGELOG.md b/src/Symfony/Component/Debug/CHANGELOG.md
index 776468fb7a59..ff7c6af2b7d0 100644
--- a/src/Symfony/Component/Debug/CHANGELOG.md
+++ b/src/Symfony/Component/Debug/CHANGELOG.md
@@ -1,6 +1,13 @@
 CHANGELOG
 =========

+2.6.0
+-----
+
+* generalized ErrorHandler and ExceptionHandler,
+  with some new methods and others deprecated
+* enhanced error messages for uncaught exceptions
+
 2.5.0
 -----

diff --git a/src/Symfony/Component/Debug/Debug.php b/src/Symfony/Component/Debug/Debug.php
index e0710c59e677..fd308e80036b 100644
--- a/src/Symfony/Component/Debug/Debug.php
+++ b/src/Symfony/Component/Debug/Debug.php
@@ -39,15 +39,23 @@ public static function enable($errorReportingLevel = null, $displayErrors = true

         static::$enabled = true;

-        error_reporting(-1);
+        if (null !== $errorReportingLevel) {
+            error_reporting($errorReportingLevel);
+        } else {
+            error_reporting(-1);
+        }

-        ErrorHandler::register($errorReportingLevel, $displayErrors);
         if ('cli' !== php_sapi_name()) {
+            ini_set('display_errors', 0);
             ExceptionHandler::register();
-        // CLI - display errors only if they're not already logged to STDERR
         } elseif ($displayErrors && (!ini_get('log_errors') || ini_get('error_log'))) {
+            // CLI - display errors only if they're not already logged to STDERR
             ini_set('display_errors', 1);
         }
+        $handler = ErrorHandler::register();
+        if (!$displayErrors) {
+            $handler->throwAt(0, true);
+        }

         DebugClassLoader::enable();
     }
diff --git a/src/Symfony/Component/Debug/DebugClassLoader.php b/src/Symfony/Component/Debug/DebugClassLoader.php
index 4a02e616cce8..53003aa2f5bb 100644
--- a/src/Symfony/Component/Debug/DebugClassLoader.php
+++ b/src/Symfony/Component/Debug/DebugClassLoader.php
@@ -78,7 +78,7 @@ public function getClassLoader()
     public static function enable()
     {
         // Ensures we don't hit https://bugs.php.net/42098
-        class_exists(__NAMESPACE__.'\ErrorHandler', true);
+        class_exists('Symfony\Component\Debug\ErrorHandler');

         if (!is_array($functions = spl_autoload_functions())) {
             return;
diff --git a/src/Symfony/Component/Debug/ErrorHandler.php b/src/Symfony/Component/Debug/ErrorHandler.php
index b0699f34a870..5982b0c48246 100644
--- a/src/Symfony/Component/Debug/ErrorHandler.php
+++ b/src/Symfony/Component/Debug/ErrorHandler.php
@@ -22,188 +22,492 @@
 use Symfony\Component\Debug\FatalErrorHandler\FatalErrorHandlerInterface;

 /**
- * ErrorHandler.
+ * A generic ErrorHandler for the PHP engine.
+ *
+ * Provides five bit fields that control how errors are handled:
+ * - thrownErrors: errors thrown as \ErrorException
+ * - loggedErrors: logged errors, when not @-silenced
+ * - scopedErrors: errors thrown or logged with their local context
+ * - tracedErrors: errors logged with their stack trace, only once for repeated errors
+ * - screamedErrors: never @-silenced errors
+ *
+ * Each error level can be logged by a dedicated PSR-3 logger object.
+ * Screaming only applies to logging.
+ * Throwing takes precedence over logging.
+ * Uncaught exceptions are logged as E_ERROR.
+ * E_DEPRECATED and E_USER_DEPRECATED levels never throw.
+ * E_RECOVERABLE_ERROR and E_USER_ERROR levels always throw.
+ * Non catchable errors that can be detected at shutdown time are logged when the scream bit field allows so.
+ * As errors have a performance cost, repeated errors are all logged, so that the developer
+ * can see them and weight them as more important to fix than others of the same level.
  *
- * @author Fabien Potencier <fabien@symfony.com>
- * @author Konstantin Myakshin <koc-dp@yandex.ru>
  * @author Nicolas Grekas <p@tchwork.com>
  */
 class ErrorHandler
 {
+    /**
+     * @deprecated since 2.6, to be removed in 3.0.
+     */
     const TYPE_DEPRECATION = -100;

     private $levels = array(
-        E_WARNING           => 'Warning',
+        E_DEPRECATED        => 'Deprecated',
+        E_USER_DEPRECATED   => 'User Deprecated',
         E_NOTICE            => 'Notice',
-        E_USER_ERROR        => 'User Error',
-        E_USER_WARNING      => 'User Warning',
         E_USER_NOTICE       => 'User Notice',
         E_STRICT            => 'Runtime Notice',
+        E_WARNING           => 'Warning',
+        E_USER_WARNING      => 'User Warning',
+        E_COMPILE_WARNING   => 'Compile Warning',
+        E_CORE_WARNING      => 'Core Warning',
+        E_USER_ERROR        => 'User Error',
         E_RECOVERABLE_ERROR => 'Catchable Fatal Error',
-        E_DEPRECATED        => 'Deprecated',
-        E_USER_DEPRECATED   => 'User Deprecated',
-        E_ERROR             => 'Error',
-        E_CORE_ERROR        => 'Core Error',
         E_COMPILE_ERROR     => 'Compile Error',
         E_PARSE             => 'Parse Error',
+        E_ERROR             => 'Error',
+        E_CORE_ERROR        => 'Core Error',
     );

-    private $level;
-
-    private $reservedMemory;
+    private $loggers = array(
+        E_DEPRECATED        => array(null, LogLevel::INFO),
+        E_USER_DEPRECATED   => array(null, LogLevel::INFO),
+        E_NOTICE            => array(null, LogLevel::NOTICE),
+        E_USER_NOTICE       => array(null, LogLevel::NOTICE),
+        E_STRICT            => array(null, LogLevel::NOTICE),
+        E_WARNING           => array(null, LogLevel::WARNING),
+        E_USER_WARNING      => array(null, LogLevel::WARNING),
+        E_COMPILE_WARNING   => array(null, LogLevel::WARNING),
+        E_CORE_WARNING      => array(null, LogLevel::WARNING),
+        E_USER_ERROR        => array(null, LogLevel::ERROR),
+        E_RECOVERABLE_ERROR => array(null, LogLevel::ERROR),
+        E_COMPILE_ERROR     => array(null, LogLevel::EMERGENCY),
+        E_PARSE             => array(null, LogLevel::EMERGENCY),
+        E_ERROR             => array(null, LogLevel::EMERGENCY),
+        E_CORE_ERROR        => array(null, LogLevel::EMERGENCY),
+    );

-    private $displayErrors;
+    private $thrownErrors = 0x1FFF; // E_ALL - E_DEPRECATED - E_USER_DEPRECATED
+    private $scopedErrors = 0x1FFF; // E_ALL - E_DEPRECATED - E_USER_DEPRECATED
+    private $tracedErrors = 0x77FB; // E_ALL - E_STRICT - E_PARSE
+    private $screamedErrors = 0x55; // E_ERROR + E_CORE_ERROR + E_COMPILE_ERROR + E_PARSE
+    private $loggedErrors = 0;

-    /**
-     * @var LoggerInterface[] Loggers for channels
-     */
-    private static $loggers = array();
+    private $loggedTraces = array();
+    private $isRecursive = 0;
+    private $exceptionHandler;

+    private static $reservedMemory;
     private static $stackedErrors = array();
-
     private static $stackedErrorLevels = array();

+    /**
+     * Same init value as thrownErrors
+     *
+     * @deprecated since 2.6, to be removed in 3.0.
+     */
+    private $displayErrors = 0x1FFF;
+
     /**
      * Registers the error handler.
      *
-     * @param int  $level         The level at which the conversion to Exception is done (null to use the error_reporting() value and 0 to disable)
-     * @param bool $displayErrors Display errors (for dev environment) or just log them (production usage)
+     * @param int  $levels Levels to register to for throwing, 0 for none
+     * @param bool $throw  @deprecated argument, same as setting $levels to 0
      *
      * @return ErrorHandler The registered error handler
      */
-    public static function register($level = null, $displayErrors = true)
+    public static function register($levels = -1, $throw = true)
     {
-        $handler = new static();
-        $handler->setLevel($level);
-        $handler->setDisplayErrors($displayErrors);
+        if (null === self::$reservedMemory) {
+            self::$reservedMemory = str_repeat('x', 10240);
+            register_shutdown_function(__CLASS__.'::handleFatalError');
+        }

-        ini_set('display_errors', 0);
-        set_error_handler(array($handler, 'handle'));
-        register_shutdown_function(array($handler, 'handleFatal'));
-        $handler->reservedMemory = str_repeat('x', 10240);
+        $handler = new static();
+        $levels &= $handler->thrownErrors;
+        set_error_handler(array($handler, 'handleError'), $levels);
+        $handler->throwAt($throw ? $levels : 0, true);
+        $handler->setExceptionHandler(set_exception_handler(array($handler, 'handleException')));

         return $handler;
     }

     /**
-     * Sets the level at which the conversion to Exception is done.
+     * Sets a logger to non assigned errors levels.
      *
-     * @param int|null     $level The level (null to use the error_reporting() value and 0 to disable)
+     * @param LoggerInterface $logger  A PSR-3 logger to put as default for the given levels
+     * @param array|int       $levels  An array map of E_* to LogLevel::* or an integer bit field of E_* constants
+     * @param bool            $replace Whether to replace or not any existing logger
      */
-    public function setLevel($level)
+    public function setDefaultLogger(LoggerInterface $logger, $levels = null, $replace = false)
     {
-        $this->level = null === $level ? error_reporting() : $level;
+        $loggers = array();
+
+        if (is_array($levels)) {
+            foreach ($levels as $type => $logLevel) {
+                if (empty($this->loggers[$type][0]) || $replace) {
+                    $loggers[$type] = array($logger, $logLevel);
+                }
+            }
+        } else {
+            if (null === $levels) {
+                $levels = E_ALL | E_STRICT;
+            }
+            foreach ($this->loggers as $type => $log) {
+                if (($type & $levels) && (empty($log[0]) || $replace)) {
+                    $log[0] = $logger;
+                    $loggers[$type] = $log;
+                }
+            }
+        }
+
+        $this->setLoggers($loggers);
     }

     /**
-     * Sets the display_errors flag value.
+     * Sets a logger for each error level.
      *
-     * @param int     $displayErrors The display_errors flag value
+     * @param array $loggers Error levels to [LoggerInterface|null, LogLevel::*] map
+     *
+     * @return array The previous map
+     *
+     * @throws \InvalidArgumentException
      */
-    public function setDisplayErrors($displayErrors)
+    public function setLoggers(array $loggers)
     {
-        $this->displayErrors = $displayErrors;
+        $prevLogged = $this->loggedErrors;
+        $prev = $this->loggers;
+
+        foreach ($loggers as $type => $log) {
+            if (!isset($prev[$type])) {
+                throw new \InvalidArgumentException('Unknown error type: '.$type);
+            }
+            if (!is_array($log)) {
+                $log = array($log);
+            } elseif (!array_key_exists(0, $log)) {
+                throw new \InvalidArgumentException('No logger provided');
+            }
+            if (null === $log[0]) {
+                $this->loggedErrors &= ~$type;
+            } elseif ($log[0] instanceof LoggerInterface) {
+                $this->loggedErrors |= $type;
+            } else {
+                throw new \InvalidArgumentException('Invalid logger provided');
+            }
+            $this->loggers[$type] = $log + $prev[$type];
+        }
+        $this->reRegister($prevLogged | $this->thrownErrors);
+
+        return $prev;
     }

     /**
-     * Sets a logger for the given channel.
+     * Sets a user exception handler.
      *
-     * @param LoggerInterface $logger  A logger interface
-     * @param string          $channel The channel associated with the logger (deprecation, emergency or scream)
+     * @param callable $handler A handler that will be called on Exception
+     *
+     * @return callable|null The previous exception handler
+     *
+     * @throws \InvalidArgumentException
      */
-    public static function setLogger(LoggerInterface $logger, $channel = 'deprecation')
+    public function setExceptionHandler($handler)
     {
-        self::$loggers[$channel] = $logger;
+        if (null !== $handler && !is_callable($handler)) {
+            throw new \LogicException('The exception handler must be a valid PHP callable.');
+        }
+        $prev = $this->exceptionHandler;
+        $this->exceptionHandler = $handler;
+
+        return $prev;
     }

     /**
-     * @throws \ErrorException When error_reporting returns error
+     * Sets the error levels that are to be thrown.
+     *
+     * @param int  $levels  A bit field of E_* constants for thrown errors
+     * @param bool $replace Replace or amend the previous value
+     *
+     * @return int The previous value
      */
-    public function handle($level, $message, $file = 'unknown', $line = 0, $context = array())
+    public function throwAt($levels, $replace = false)
+    {
+        $prev = $this->thrownErrors;
+        $this->thrownErrors = ($levels | E_RECOVERABLE_ERROR | E_USER_ERROR) & ~E_USER_DEPRECATED & ~E_DEPRECATED;
+        if (!$replace) {
+            $this->thrownErrors |= $prev;
+        }
+        $this->reRegister($prev | $this->loggedErrors);
+
+        // $this->displayErrors is @deprecated since 2.6
+        $this->displayErrors = $this->thrownErrors;
+
+        return $prev;
+    }
+
+    /**
+     * Sets the error levels that are logged or thrown with their local scope.
+     *
+     * @param int  $levels  A bit field of E_* constants for scoped errors
+     * @param bool $replace Replace or amend the previous value
+     *
+     * @return int The previous value
+     */
+    public function scopeAt($levels, $replace = false)
+    {
+        $prev = $this->scopedErrors;
+        $this->scopedErrors = (int) $levels;
+        if (!$replace) {
+            $this->scopedErrors |= $prev;
+        }
+
+        return $prev;
+    }
+
+    /**
+     * Sets the error levels that are logged with their stack trace.
+     *
+     * @param int  $levels  A bit field of E_* constants for traced errors
+     * @param bool $replace Replace or amend the previous value
+     *
+     * @return int The previous value
+     */
+    public function traceAt($levels, $replace = false)
+    {
+        $prev = $this->tracedErrors;
+        $this->tracedErrors = (int) $levels;
+        if (!$replace) {
+            $this->tracedErrors |= $prev;
+        }
+
+        return $prev;
+    }
+
+    /**
+     * Sets the error levels where the @-operator is ignored.
+     *
+     * @param int  $levels  A bit field of E_* constants for screamed errors
+     * @param bool $replace Replace or amend the previous value
+     *
+     * @return int The previous value
+     */
+    public function screamAt($levels, $replace = false)
+    {
+        $prev = $this->screamedErrors;
+        $this->screamedErrors = (int) $levels;
+        if (!$replace) {
+            $this->screamedErrors |= $prev;
+        }
+
+        return $prev;
+    }
+
+    /**
+     * Re-registers as a PHP error handler if levels changed.
+     */
+    private function reRegister($prev)
+    {
+        if ($prev !== $this->thrownErrors | $this->loggedErrors) {
+            $handler = set_error_handler('var_dump', 0);
+            $handler = is_array($handler) ? $handler[0] : null;
+            restore_error_handler();
+            if ($handler === $this) {
+                restore_error_handler();
+                set_error_handler(array($this, 'handleError'), $this->thrownErrors | $this->loggedErrors);
+            }
+        }
+    }
+
+    /**
+     * Handles errors by filtering then logging them according to the configured bit fields.
+     *
+     * @param int    $type One of the E_* constants
+     * @param string $file
+     * @param int    $line
+     * @param array  $context
+     *
+     * @return bool Returns false when no handling happens so that the PHP engine can handle the error itself.
+     *
+     * @throws \ErrorException When $this->thrownErrors requests so
+     *
+     * @internal
+     */
+    public function handleError($type, $message, $file, $line, array $context)
     {
-        if ($level & (E_USER_DEPRECATED | E_DEPRECATED)) {
-            if (isset(self::$loggers['deprecation'])) {
-                if (self::$stackedErrorLevels) {
-                    self::$stackedErrors[] = func_get_args();
+        $level = error_reporting() | E_RECOVERABLE_ERROR | E_USER_ERROR;
+        $log = $this->loggedErrors & $type;
+        $throw = $this->thrownErrors & $type & $level;
+        $type &= $level | $this->screamedErrors;
+
+        if ($type && ($log || $throw)) {
+            if (PHP_VERSION_ID < 50400 && isset($context['GLOBALS']) && ($this->scopedErrors & $type)) {
+                $e = $context;                  // Whatever the signature of the method,
+                unset($e['GLOBALS'], $context); // $context is always a reference in 5.3
+                $context = $e;
+            }
+
+            if ($throw) {
+                if (($this->scopedErrors & $type) && class_exists('Symfony\Component\Debug\Exception\ContextErrorException')) {
+                    // Checking for class existence is a work around for https://bugs.php.net/42098
+                    $throw = new ContextErrorException($this->levels[$type].': '.$message, 0, $type, $file, $line, $context);
                 } else {
-                    if (version_compare(PHP_VERSION, '5.4', '<')) {
-                        $stack = array_map(
-                            function ($row) {
-                                unset($row['args']);
-
-                                return $row;
-                            },
-                            array_slice(debug_backtrace(false), 0, 10)
-                        );
-                    } else {
-                        $stack = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS, 10);
-                    }
+                    $throw = new \ErrorException($this->levels[$type].': '.$message, 0, $type, $file, $line);
+                }

-                    self::$loggers['deprecation']->warning($message, array('type' => self::TYPE_DEPRECATION, 'stack' => $stack));
+                if (PHP_VERSION_ID <= 50407 && (PHP_VERSION_ID >= 50400 || PHP_VERSION_ID <= 50317)) {
+                    // Exceptions thrown from error handlers are sometimes not caught by the exception
+                    // handler and shutdown handlers are bypassed before 5.4.8/5.3.18.
+                    // We temporarily re-enable display_errors to prevent any blank page related to this bug.
+
+                    $throw->errorHandlerCanary = new ErrorHandlerCanary();
                 }

-                return true;
-            }
-        } elseif ($this->displayErrors && error_reporting() & $level && $this->level & $level) {
-            if (PHP_VERSION_ID < 50400 && isset($context['GLOBALS']) && is_array($context)) {
-                $c = $context;                  // Whatever the signature of the method,
-                unset($c['GLOBALS'], $context); // $context is always a reference in 5.3
-                $context = $c;
+                throw $throw;
             }

-            $exception = sprintf('%s: %s in %s line %d', isset($this->levels[$level]) ? $this->levels[$level] : $level, $message, $file, $line);
-            if ($context && class_exists('Symfony\Component\Debug\Exception\ContextErrorException')) {
-                // Checking for class existence is a work around for https://bugs.php.net/42098
-                $exception = new ContextErrorException($exception, 0, $level, $file, $line, $context);
+            // For duplicated errors, log the trace only once
+            $e = md5("{$type}/{$line}/{$file}\x00{$message}", true);
+            $trace = true;
+
+            if (!($this->tracedErrors & $type) || isset($this->loggedTraces[$e])) {
+                $trace = false;
             } else {
-                $exception = new \ErrorException($exception, 0, $level, $file, $line);
+                $this->loggedTraces[$e] = 1;
             }

-            if (PHP_VERSION_ID <= 50407 && (PHP_VERSION_ID >= 50400 || PHP_VERSION_ID <= 50317)) {
-                // Exceptions thrown from error handlers are sometimes not caught by the exception
-                // handler and shutdown handlers are bypassed before 5.4.8/5.3.18.
-                // We temporarily re-enable display_errors to prevent any blank page related to this bug.
+            $e = compact('type', 'file', 'line', 'level');

-                $exception->errorHandlerCanary = new ErrorHandlerCanary();
+            if ($type & $level) {
+                if ($this->scopedErrors & $type) {
+                    $e['context'] = $context;
+                    if ($trace) {
+                        $e['stack'] = debug_backtrace(true); // Provide object
+                    }
+                } elseif ($trace) {
+                    $e['stack'] = debug_backtrace(PHP_VERSION_ID >= 50306 ? DEBUG_BACKTRACE_IGNORE_ARGS : false);
+                }
             }

-            throw $exception;
+            if ($this->isRecursive) {
+                $log = 0;
+            } elseif (self::$stackedErrorLevels) {
+                self::$stackedErrors[] = array($this->loggers[$type], $message, $e);
+            } else {
+                try {
+                    $this->isRecursive = true;
+                    $this->loggers[$type][0]->log($this->loggers[$type][1], $message, $e);
+                    $this->isRecursive = false;
+                } catch (\Exception $e) {
+                    $this->isRecursive = false;
+
+                    throw $e;
+                }
+            }
         }

-        if (isset(self::$loggers['scream']) && !(error_reporting() & $level)) {
-            if (self::$stackedErrorLevels) {
-                self::$stackedErrors[] = func_get_args();
+        return $type && $log;
+    }
+
+    /**
+     * Handles an exception by logging then forwarding it to an other handler.
+     *
+     * @param \Exception $exception An exception to handle
+     * @param array      $error     An array as returned by error_get_last()
+     *
+     * @internal
+     */
+    public function handleException(\Exception $exception, array $error = null)
+    {
+        $level = error_reporting();
+        if ($this->loggedErrors & E_ERROR & ($level | $this->screamedErrors)) {
+            $e = array(
+                'type' => E_ERROR,
+                'file' => $exception->getFile(),
+                'line' => $exception->getLine(),
+                'level' => $level,
+                'stack' => $exception->getTrace(),
+            );
+            if ($exception instanceof FatalErrorException) {
+                $message = 'Fatal '.$exception->getMessage();
+            } elseif ($exception instanceof \ErrorException) {
+                $message = 'Uncaught '.$exception->getMessage();
+                if ($exception instanceof ContextErrorException) {
+                    $e['context'] = $exception->getContext();
+                }
             } else {
-                switch ($level) {
-                    case E_USER_ERROR:
-                    case E_RECOVERABLE_ERROR:
-                        $logLevel = LogLevel::ERROR;
-                        break;
-
-                    case E_WARNING:
-                    case E_USER_WARNING:
-                        $logLevel = LogLevel::WARNING;
-                        break;
-
-                    default:
-                        $logLevel = LogLevel::NOTICE;
-                        break;
+                $message = 'Uncaught Exception: '.$exception->getMessage();
+            }
+            if ($this->loggedErrors & $e['type']) {
+                $this->loggers[$e['type']][0]->log($this->loggers[$e['type']][1], $message, $e);
+            }
+        }
+        if ($exception instanceof FatalErrorException && !$exception instanceof OutOfMemoryException && $error) {
+            foreach ($this->getFatalErrorHandlers() as $handler) {
+                if ($e = $handler->handleError($error, $exception)) {
+                    $exception = $e;
+                    break;
                 }
-
-                self::$loggers['scream']->log($logLevel, $message, array(
-                    'type' => $level,
-                    'file' => $file,
-                    'line' => $line,
-                    'scream' => error_reporting(),
-                ));
             }
         }
+        if (empty($this->exceptionHandler)) {
+            throw $exception; // Give back $exception to the native handler
+        }
+        try {
+            call_user_func($this->exceptionHandler, $exception);
+        } catch (\Exception $handlerException) {
+            $this->exceptionHandler = null;
+            $this->handleException($handlerException);
+        }
+    }

-        return false;
+    /**
+     * Shutdown registered function for handling PHP fatal errors.
+     *
+     * @param array $error An array as returned by error_get_last()
+     *
+     * @internal
+     */
+    public static function handleFatalError(array $error = null)
+    {
+        self::$reservedMemory = '';
+        gc_collect_cycles();
+        $handler = set_error_handler('var_dump', 0);
+        $handler = is_array($handler) ? $handler[0] : null;
+        restore_error_handler();
+        if ($handler instanceof self) {
+            if (null === $error) {
+                $error = error_get_last();
+            }
+
+            try {
+                while (self::$stackedErrorLevels) {
+                    static::unstackErrors();
+                }
+            } catch (\Exception $exception) {
+                // Handled below
+            }
+
+            if ($error && ($error['type'] & (E_PARSE | E_ERROR | E_CORE_ERROR | E_COMPILE_ERROR))) {
+                // Let's not throw anymore but keep logging
+                $handler->throwAt(0, true);
+
+                if (0 === strpos($error['message'], 'Allowed memory') || 0 === strpos($error['message'], 'Out of memory')) {
+                    $exception = new OutOfMemoryException($handler->levels[$error['type']].': '.$error['message'], 0, $error['type'], $error['file'], $error['line'], 2, false);
+                } else {
+                    $exception = new FatalErrorException($handler->levels[$error['type']].': '.$error['message'], 0, $error['type'], $error['file'], $error['line'], 2, true);
+                }
+            } elseif (!isset($exception)) {
+                return;
+            }
+
+            try {
+                $handler->handleException($exception, $error);
+            } catch (FatalErrorException $e) {
+                // Ignore this re-throw
+            }
+        }
     }

     /**
-     * Configure the error handler for delayed handling.
+     * Configures the error handler for delayed handling.
      * Ensures also that non-catchable fatal errors are never silenced.
      *
      * As shown by http://bugs.php.net/42098 and http://bugs.php.net/60724
@@ -219,7 +523,7 @@ public static function stackErrors()
     }

     /**
-     * Unstacks stacked errors and forwards to the regular handler
+     * Unstacks stacked errors and forwards to the logger
      */
     public static function unstackErrors()
     {
@@ -237,64 +541,12 @@ public static function unstackErrors()
             $errors = self::$stackedErrors;
             self::$stackedErrors = array();

-            $errorHandler = set_error_handler('var_dump');
-            restore_error_handler();
-
-            if ($errorHandler) {
-                foreach ($errors as $e) {
-                    call_user_func_array($errorHandler, $e);
-                }
+            foreach ($errors as $e) {
+                $e[0][0]->log($e[0][1], $e[1], $e[2]);
             }
         }
     }

-    public function handleFatal()
-    {
-        $this->reservedMemory = '';
-        gc_collect_cycles();
-        $error = error_get_last();
-
-        // get current exception handler
-        $exceptionHandler = set_exception_handler('var_dump');
-        restore_exception_handler();
-
-        try {
-            while (self::$stackedErrorLevels) {
-                static::unstackErrors();
-            }
-        } catch (\Exception $exception) {
-            if ($exceptionHandler) {
-                call_user_func($exceptionHandler, $exception);
-
-                return;
-            }
-
-            if ($this->displayErrors) {
-                ini_set('display_errors', 1);
-            }
-
-            throw $exception;
-        }
-
-        if (!$error || !$this->level || !($error['type'] & (E_ERROR | E_CORE_ERROR | E_COMPILE_ERROR | E_PARSE))) {
-            return;
-        }
-
-        if (isset(self::$loggers['emergency'])) {
-            $fatal = array(
-                'type' => $error['type'],
-                'file' => $error['file'],
-                'line' => $error['line'],
-            );
-
-            self::$loggers['emergency']->emergency($error['message'], $fatal);
-        }
-
-        if ($this->displayErrors && $exceptionHandler) {
-            $this->handleFatalError($exceptionHandler, $error);
-        }
-    }
-
     /**
      * Gets the fatal error handlers.
      *
@@ -311,34 +563,82 @@ protected function getFatalErrorHandlers()
         );
     }

-    private function handleFatalError($exceptionHandler, array $error)
+    /**
+     * Sets the level at which the conversion to Exception is done.
+     *
+     * @param int|null     $level The level (null to use the error_reporting() value and 0 to disable)
+     *
+     * @deprecated since 2.6, to be removed in 3.0. Use throwAt() instead.
+     */
+    public function setLevel($level)
     {
-        // Let PHP handle any further error
-        set_error_handler('var_dump', 0);
-        ini_set('display_errors', 1);
-
-        $level = isset($this->levels[$error['type']]) ? $this->levels[$error['type']] : $error['type'];
-        $message = sprintf('%s: %s in %s line %d', $level, $error['message'], $error['file'], $error['line']);
-        if (0 === strpos($error['message'], 'Allowed memory') || 0 === strpos($error['message'], 'Out of memory')) {
-            $exception = new OutOfMemoryException($message, 0, $error['type'], $error['file'], $error['line'], 3, false);
-        } else {
-            $exception = new FatalErrorException($message, 0, $error['type'], $error['file'], $error['line'], 3, true);
+        $level = null === $level ? error_reporting() : $level;
+        $this->throwAt($level, true);
+    }

-            foreach ($this->getFatalErrorHandlers() as $handler) {
-                if ($e = $handler->handleError($error, $exception)) {
-                    $exception = $e;
-                    break;
-                }
-            }
+    /**
+     * Sets the display_errors flag value.
+     *
+     * @param int     $displayErrors The display_errors flag value
+     *
+     * @deprecated since 2.6, to be removed in 3.0. Use throwAt() instead.
+     */
+    public function setDisplayErrors($displayErrors)
+    {
+        if ($displayErrors) {
+            $this->throwAt($this->displayErrors, true);
+        } else {
+            $displayErrors = $this->displayErrors;
+            $this->throwAt(0, true);
+            $this->displayErrors = $displayErrors;
         }
+    }

-        try {
-            call_user_func($exceptionHandler, $exception);
-        } catch (\Exception $e) {
-            // The handler failed. Let PHP handle that now.
-            throw $exception;
+    /**
+     * Sets a logger for the given channel.
+     *
+     * @param LoggerInterface $logger  A logger interface
+     * @param string          $channel The channel associated with the logger (deprecation, emergency or scream)
+     *
+     * @deprecated since 2.6, to be removed in 3.0. Use setLoggers() or setDefaultLogger() instead.
+     */
+    public static function setLogger(LoggerInterface $logger, $channel = 'deprecation')
+    {
+        $handler = set_error_handler('var_dump', 0);
+        $handler = is_array($handler) ? $handler[0] : null;
+        restore_error_handler();
+        if (!$handler instanceof self) {
+            return;
+        }
+        if ('deprecation' === $channel) {
+            $handler->setDefaultLogger($logger, E_DEPRECATED | E_USER_DEPRECATED, true);
+            $handler->screamAt(E_DEPRECATED | E_USER_DEPRECATED);
+        } elseif ('scream' === $channel) {
+            $handler->setDefaultLogger($logger, E_ALL | E_STRICT, false);
+            $handler->screamAt(E_ALL | E_STRICT);
+        } elseif ('emergency' === $channel) {
+            $handler->setDefaultLogger($logger, E_PARSE | E_ERROR | E_CORE_ERROR | E_COMPILE_ERROR, true);
+            $handler->screamAt(E_PARSE | E_ERROR | E_CORE_ERROR | E_COMPILE_ERROR);
         }
     }
+
+    /**
+     * @deprecated since 2.6, to be removed in 3.0. Use handleError() instead.
+     */
+    public function handle($level, $message, $file = 'unknown', $line = 0, $context = array())
+    {
+        return $this->handleError($level, $message, $file, $line, (array) $context);
+    }
+
+    /**
+     * Handles PHP fatal errors.
+     *
+     * @deprecated since 2.6, to be removed in 3.0. Use handleFatalError() instead.
+     */
+    public function handleFatal()
+    {
+        static::handleFatalError();
+    }
 }

 /**
diff --git a/src/Symfony/Component/Debug/ExceptionHandler.php b/src/Symfony/Component/Debug/ExceptionHandler.php
index 6c12979d6e0c..f6ec8ddfb3f9 100644
--- a/src/Symfony/Component/Debug/ExceptionHandler.php
+++ b/src/Symfony/Component/Debug/ExceptionHandler.php
@@ -34,15 +34,13 @@
 class ExceptionHandler
 {
     private $debug;
-    private $charset;
     private $handler;
     private $caughtBuffer;
     private $caughtLength;

-    public function __construct($debug = true, $charset = 'UTF-8')
+    public function __construct($debug = true)
     {
         $this->debug = $debug;
-        $this->charset = $charset;
     }

     /**
@@ -56,7 +54,11 @@ public static function register($debug = true)
     {
         $handler = new static($debug);

-        set_exception_handler(array($handler, 'handle'));
+        $prev = set_exception_handler(array($handler, 'handle'));
+        if (is_array($prev) && $prev[0] instanceof ErrorHandler) {
+            restore_exception_handler();
+            $prev[0]->setExceptionHandler(array($handler, 'handle'));
+        }

         return $handler;
     }
@@ -205,29 +207,24 @@ public function getContent(FlattenException $exception)
                 $total = $count + 1;
                 foreach ($exception->toArray() as $position => $e) {
                     $ind = $count - $position + 1;
-                    $class = $this->abbrClass($e['class']);
-                    $message = nl2br($e['message']);
+                    $class = $this->formatClass($e['class']);
+                    $message = nl2br(self::utf8Htmlize($e['message']));
                     $content .= sprintf(<<<EOF
                         <div class="block_exception clear_fix">
-                            <h2><span>%d/%d</span> %s: %s</h2>
+                            <h2><span>%d/%d</span> %s%s:<br />%s</h2>
                         </div>
                         <div class="block">
                             <ol class="traces list_exception">

 EOF
-                        , $ind, $total, $class, $message);
+                        , $ind, $total, $class, $this->formatPath($e['trace'][0]['file'], $e['trace'][0]['line']), $message);
                     foreach ($e['trace'] as $trace) {
                         $content .= '       <li>';
                         if ($trace['function']) {
-                            $content .= sprintf('at %s%s%s(%s)', $this->abbrClass($trace['class']), $trace['type'], $trace['function'], $this->formatArgs($trace['args']));
+                            $content .= sprintf('at %s%s%s(%s)', $this->formatClass($trace['class']), $trace['type'], $trace['function'], $this->formatArgs($trace['args']));
                         }
                         if (isset($trace['file']) && isset($trace['line'])) {
-                            if ($linkFormat = ini_get('xdebug.file_link_format')) {
-                                $link = str_replace(array('%f', '%l'), array($trace['file'], $trace['line']), $linkFormat);
-                                $content .= sprintf(' in <a href="%s" title="Go to source">%s line %s</a>', $link, $trace['file'], $trace['line']);
-                            } else {
-                                $content .= sprintf(' in %s line %s', $trace['file'], $trace['line']);
-                            }
+                            $content .= $this->formatPath($trace['file'], $trace['line']);
                         }
                         $content .= "</li>\n";
                     }
@@ -303,8 +300,8 @@ public function getStylesheet(FlattenException $exception)
                 overflow: hidden;
                 word-wrap: break-word;
             }
-            .sf-reset li a { background:none; color:#868686; text-decoration:none; }
-            .sf-reset li a:hover { background:none; color:#313131; text-decoration:underline; }
+            .sf-reset a { background:none; color:#868686; text-decoration:none; }
+            .sf-reset a:hover { background:none; color:#313131; text-decoration:underline; }
             .sf-reset ol { padding: 10px 0; }
             .sf-reset h1 { background-color:#FFFFFF; padding: 15px 28px; margin-bottom: 20px;
                 -webkit-border-radius: 10px;
@@ -340,13 +337,27 @@ private function decorate($content, $css)
 EOF;
     }

-    private function abbrClass($class)
+    private function formatClass($class)
     {
         $parts = explode('\\', $class);

         return sprintf("<abbr title=\"%s\">%s</abbr>", $class, array_pop($parts));
     }

+    private function formatPath($path, $line)
+    {
+        $path = self::utf8Htmlize($path);
+        $file = preg_match('#[^/\\\\]*$#', $path, $file) ? $file[0] : $path;
+
+        if ($linkFormat = ini_get('xdebug.file_link_format')) {
+            $link = str_replace(array('%f', '%l'), array($path, $line), $linkFormat);
+
+            return sprintf(' <a href="%s" title="Go to source">in %s line %d</a>', $link, $file, $line);
+        }
+
+        return sprintf(' <a title="in %s line %3$d" ondblclick="var f=this.innerHTML;this.innerHTML=this.title;this.title=f;">in %s line %d</a>', $path, $file, $line);
+    }
+
     /**
      * Formats an array as a string.
      *
@@ -359,11 +370,11 @@ private function formatArgs(array $args)
         $result = array();
         foreach ($args as $key => $item) {
             if ('object' === $item[0]) {
-                $formattedValue = sprintf("<em>object</em>(%s)", $this->abbrClass($item[1]));
+                $formattedValue = sprintf("<em>object</em>(%s)", $this->formatClass($item[1]));
             } elseif ('array' === $item[0]) {
                 $formattedValue = sprintf("<em>array</em>(%s)", is_array($item[1]) ? $this->formatArgs($item[1]) : $item[1]);
             } elseif ('string'  === $item[0]) {
-                $formattedValue = sprintf("'%s'", htmlspecialchars($item[1], ENT_QUOTES | ENT_SUBSTITUTE, $this->charset));
+                $formattedValue = sprintf("'%s'", self::utf8Htmlize($item[1]));
             } elseif ('null' === $item[0]) {
                 $formattedValue = '<em>null</em>';
             } elseif ('boolean' === $item[0]) {
@@ -371,7 +382,7 @@ private function formatArgs(array $args)
             } elseif ('resource' === $item[0]) {
                 $formattedValue = '<em>resource</em>';
             } else {
-                $formattedValue = str_replace("\n", '', var_export(htmlspecialchars((string) $item[1], ENT_QUOTES | ENT_SUBSTITUTE, $this->charset), true));
+                $formattedValue = str_replace("\n", '', var_export(self::utf8Htmlize((string) $item[1]), true));
             }

             $result[] = is_int($key) ? $formattedValue : sprintf("'%s' => %s", $key, $formattedValue);
@@ -380,6 +391,25 @@ private function formatArgs(array $args)
         return implode(', ', $result);
     }

+    /**
+     * Returns an UTF-8 and HTML encoded string
+     */
+    protected static function utf8Htmlize($str)
+    {
+        if (!preg_match('//u', $str) && function_exists('iconv')) {
+            set_error_handler('var_dump', 0);
+            $charset = ini_get('default_charset');
+            if ('UTF-8' === $charset || $str !== @iconv($charset, $charset, $str)) {
+                $charset = 'CP1252';
+            }
+            restore_error_handler();
+
+            $str = iconv($charset, 'UTF-8', $str);
+        }
+
+        return htmlspecialchars($str, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8');
+    }
+
     /**
      * @internal
      */
diff --git a/src/Symfony/Component/Debug/FatalErrorHandler/ClassNotFoundFatalErrorHandler.php b/src/Symfony/Component/Debug/FatalErrorHandler/ClassNotFoundFatalErrorHandler.php
index f25fd9025cb3..a19feb46721e 100644
--- a/src/Symfony/Component/Debug/FatalErrorHandler/ClassNotFoundFatalErrorHandler.php
+++ b/src/Symfony/Component/Debug/FatalErrorHandler/ClassNotFoundFatalErrorHandler.php
@@ -51,29 +51,23 @@ public function handleError(array $error, FatalErrorException $exception)
             if (false !== $namespaceSeparatorIndex = strrpos($fullyQualifiedClassName, '\\')) {
                 $className = substr($fullyQualifiedClassName, $namespaceSeparatorIndex + 1);
                 $namespacePrefix = substr($fullyQualifiedClassName, 0, $namespaceSeparatorIndex);
-                $message = sprintf(
-                    'Attempted to load %s "%s" from namespace "%s" in %s line %d. Do you need to "use" it from another namespace?',
-                    $typeName,
-                    $className,
-                    $namespacePrefix,
-                    $error['file'],
-                    $error['line']
-                );
+                $message = sprintf('Attempted to load %s "%s" from namespace "%s".', $typeName, $className, $namespacePrefix);
+                $tail = ' for another namespace?';
             } else {
                 $className = $fullyQualifiedClassName;
-                $message = sprintf(
-                    'Attempted to load %s "%s" from the global namespace in %s line %d. Did you forget a use statement for this %s?',
-                    $typeName,
-                    $className,
-                    $error['file'],
-                    $error['line'],
-                    $typeName
-                );
+                $message = sprintf('Attempted to load %s "%s" from the global namespace.', $typeName, $className);
+                $tail = '?';
             }

-            if ($classes = $this->getClassCandidates($className)) {
-                $message .= sprintf(' Perhaps you need to add a use statement for one of the following: %s.', implode(', ', $classes));
+            if ($candidates = $this->getClassCandidates($className)) {
+                $tail = array_pop($candidates).'"?';
+                if ($candidates) {
+                    $tail = ' for e.g. "'.implode('", "', $candidates).'" or "'.$tail;
+                } else {
+                    $tail = ' for "'.$tail;
+                }
             }
+            $message .= ' Did you forget a "use" statement'.$tail;

             return new ClassNotFoundException($message, $exception);
         }
diff --git a/src/Symfony/Component/Debug/FatalErrorHandler/UndefinedFunctionFatalErrorHandler.php b/src/Symfony/Component/Debug/FatalErrorHandler/UndefinedFunctionFatalErrorHandler.php
index f460c66f8e20..551d160ce2f3 100644
--- a/src/Symfony/Component/Debug/FatalErrorHandler/UndefinedFunctionFatalErrorHandler.php
+++ b/src/Symfony/Component/Debug/FatalErrorHandler/UndefinedFunctionFatalErrorHandler.php
@@ -47,21 +47,10 @@ public function handleError(array $error, FatalErrorException $exception)
         if (false !== $namespaceSeparatorIndex = strrpos($fullyQualifiedFunctionName, '\\')) {
             $functionName = substr($fullyQualifiedFunctionName, $namespaceSeparatorIndex + 1);
             $namespacePrefix = substr($fullyQualifiedFunctionName, 0, $namespaceSeparatorIndex);
-            $message = sprintf(
-                'Attempted to call function "%s" from namespace "%s" in %s line %d.',
-                $functionName,
-                $namespacePrefix,
-                $error['file'],
-                $error['line']
-            );
+            $message = sprintf('Attempted to call function "%s" from namespace "%s".', $functionName, $namespacePrefix);
         } else {
             $functionName = $fullyQualifiedFunctionName;
-            $message = sprintf(
-                'Attempted to call function "%s" from the global namespace in %s line %d.',
-                $functionName,
-                $error['file'],
-                $error['line']
-            );
+            $message = sprintf('Attempted to call function "%s" from the global namespace.', $functionName);
         }

         $candidates = array();
@@ -81,9 +70,13 @@ public function handleError(array $error, FatalErrorException $exception)

         if ($candidates) {
             sort($candidates);
-            $message .= ' Did you mean to call: '.implode(', ', array_map(function ($val) {
-                return '"'.$val.'"';
-            }, $candidates)).'?';
+            $last = array_pop($candidates).'"?';
+            if ($candidates) {
+                $candidates = 'e.g. "'.implode('", "', $candidates).'" or "'.$last;
+            } else {
+                $candidates = '"'.$last;
+            }
+            $message .= ' Did you mean to call '.$candidates;
         }

         return new UndefinedFunctionException($message, $exception);
diff --git a/src/Symfony/Component/Debug/FatalErrorHandler/UndefinedMethodFatalErrorHandler.php b/src/Symfony/Component/Debug/FatalErrorHandler/UndefinedMethodFatalErrorHandler.php
index 7cc55c6b06f5..bdd9fec2dc70 100644
--- a/src/Symfony/Component/Debug/FatalErrorHandler/UndefinedMethodFatalErrorHandler.php
+++ b/src/Symfony/Component/Debug/FatalErrorHandler/UndefinedMethodFatalErrorHandler.php
@@ -34,7 +34,7 @@ public function handleError(array $error, FatalErrorException $exception)
         $className = $matches[1];
         $methodName = $matches[2];

-        $message = sprintf('Attempted to call method "%s" on class "%s" in %s line %d.', $methodName, $className, $error['file'], $error['line']);
+        $message = sprintf('Attempted to call method "%s" on class "%s".', $methodName, $className);

         $candidates = array();
         foreach (get_class_methods($className) as $definedMethodName) {
@@ -46,7 +46,13 @@ public function handleError(array $error, FatalErrorException $exception)

         if ($candidates) {
             sort($candidates);
-            $message .= sprintf(' Did you mean to call: "%s"?', implode('", "', $candidates));
+            $last = array_pop($candidates).'"?';
+            if ($candidates) {
+                $candidates = 'e.g. "'.implode('", "', $candidates).'" or "'.$last;
+            } else {
+                $candidates = '"'.$last;
+            }
+            $message .= ' Did you mean to call '.$candidates;
         }

         return new UndefinedMethodException($message, $exception);
diff --git a/src/Symfony/Component/Debug/README.md b/src/Symfony/Component/Debug/README.md
index dd5bdca6bff6..e0ff2c1b2a90 100644
--- a/src/Symfony/Component/Debug/README.md
+++ b/src/Symfony/Component/Debug/README.md
@@ -15,14 +15,13 @@ You can also use the tools individually:
     use Symfony\Component\Debug\ErrorHandler;
     use Symfony\Component\Debug\ExceptionHandler;

-    error_reporting(-1);
-
-    ErrorHandler::register($errorReportingLevel);
     if ('cli' !== php_sapi_name()) {
+        ini_set('display_errors', 0);
         ExceptionHandler::register();
     } elseif (!ini_get('log_errors') || ini_get('error_log')) {
         ini_set('display_errors', 1);
     }
+    ErrorHandler::register($errorReportingLevel);

 Note that the `Debug::enable()` call also registers the debug class loader
 from the Symfony ClassLoader component when available.
diff --git a/src/Symfony/Component/Debug/Tests/DebugClassLoaderTest.php b/src/Symfony/Component/Debug/Tests/DebugClassLoaderTest.php
index 396cc98ee9b7..dd962d3c7900 100644
--- a/src/Symfony/Component/Debug/Tests/DebugClassLoaderTest.php
+++ b/src/Symfony/Component/Debug/Tests/DebugClassLoaderTest.php
@@ -106,11 +106,11 @@ class ChildTestingStacking extends TestingStacking { function foo($bar) {} }
             $this->assertEquals(E_STRICT, $exception->getSeverity());
             $this->assertStringStartsWith(__FILE__, $exception->getFile());
             $this->assertRegexp('/^Runtime Notice: Declaration/', $exception->getMessage());
-        } catch (\Exception $e) {
+        } catch (\Exception $exception) {
             restore_error_handler();
             restore_exception_handler();

-            throw $e;
+            throw $exception;
         }
     }

diff --git a/src/Symfony/Component/Debug/Tests/ErrorHandlerTest.php b/src/Symfony/Component/Debug/Tests/ErrorHandlerTest.php
index 47652854042a..aaaefd54dd1c 100644
--- a/src/Symfony/Component/Debug/Tests/ErrorHandlerTest.php
+++ b/src/Symfony/Component/Debug/Tests/ErrorHandlerTest.php
@@ -11,6 +11,7 @@

 namespace Symfony\Component\Debug\Tests;

+use Psr\Log\LogLevel;
 use Symfony\Component\Debug\ErrorHandler;
 use Symfony\Component\Debug\Exception\ContextErrorException;

@@ -18,6 +19,7 @@
  * ErrorHandlerTest
  *
  * @author Robert Schönthal <seroscho@googlemail.com>
+ * @author Nicolas Grekas <p@tchwork.com>
  */
 class ErrorHandlerTest extends \PHPUnit_Framework_TestCase
 {
@@ -54,6 +56,8 @@ public function testNotice()
         } catch (ContextErrorException $exception) {
             // if an exception is thrown, the test passed
             restore_error_handler();
+            restore_exception_handler();
+
             $this->assertEquals(E_NOTICE, $exception->getSeverity());
             $this->assertEquals(__FILE__, $exception->getFile());
             $this->assertRegexp('/^Notice: Undefined variable: (foo|bar)/', $exception->getMessage());
@@ -62,7 +66,7 @@ public function testNotice()
             $trace = $exception->getTrace();
             $this->assertEquals(__FILE__, $trace[0]['file']);
             $this->assertEquals('Symfony\Component\Debug\ErrorHandler', $trace[0]['class']);
-            $this->assertEquals('handle', $trace[0]['function']);
+            $this->assertEquals('handleError', $trace[0]['function']);
             $this->assertEquals('->', $trace[0]['type']);

             $this->assertEquals(__FILE__, $trace[1]['file']);
@@ -70,16 +74,16 @@ public function testNotice()
             $this->assertEquals('triggerNotice', $trace[1]['function']);
             $this->assertEquals('::', $trace[1]['type']);

+            $this->assertEquals(__FILE__, $trace[1]['file']);
             $this->assertEquals(__CLASS__, $trace[2]['class']);
-            $this->assertEquals('testNotice', $trace[2]['function']);
+            $this->assertEquals(__FUNCTION__, $trace[2]['function']);
             $this->assertEquals('->', $trace[2]['type']);
         } catch (\Exception $e) {
             restore_error_handler();
+            restore_exception_handler();

             throw $e;
         }
-
-        restore_error_handler();
     }

     // dummy function to test trace in error handler.
@@ -93,78 +97,121 @@ private static function triggerNotice($that)
     public function testConstruct()
     {
         try {
-            $handler = ErrorHandler::register(3);
+            $this->assertEquals(3 | E_RECOVERABLE_ERROR | E_USER_ERROR, ErrorHandler::register(3)->throwAt(0));
+
+            restore_error_handler();
+            restore_exception_handler();
+        } catch (\Exception $e) {
+            restore_error_handler();
+            restore_exception_handler();
+
+            throw $e;
+        }
+    }
+
+    public function testDefaultLogger()
+    {
+        try {
+            $handler = ErrorHandler::register();

-            $level = new \ReflectionProperty($handler, 'level');
-            $level->setAccessible(true);
+            $logger = $this->getMock('Psr\Log\LoggerInterface');

-            $this->assertEquals(3, $level->getValue($handler));
+            $handler->setDefaultLogger($logger, E_NOTICE);
+            $handler->setDefaultLogger($logger, array(E_USER_NOTICE => LogLevel::CRITICAL));
+
+            $loggers = array(
+                E_DEPRECATED        => array(null, LogLevel::INFO),
+                E_USER_DEPRECATED   => array(null, LogLevel::INFO),
+                E_NOTICE            => array($logger, LogLevel::NOTICE),
+                E_USER_NOTICE       => array($logger, LogLevel::CRITICAL),
+                E_STRICT            => array(null, LogLevel::NOTICE),
+                E_WARNING           => array(null, LogLevel::WARNING),
+                E_USER_WARNING      => array(null, LogLevel::WARNING),
+                E_COMPILE_WARNING   => array(null, LogLevel::WARNING),
+                E_CORE_WARNING      => array(null, LogLevel::WARNING),
+                E_USER_ERROR        => array(null, LogLevel::ERROR),
+                E_RECOVERABLE_ERROR => array(null, LogLevel::ERROR),
+                E_COMPILE_ERROR     => array(null, LogLevel::EMERGENCY),
+                E_PARSE             => array(null, LogLevel::EMERGENCY),
+                E_ERROR             => array(null, LogLevel::EMERGENCY),
+                E_CORE_ERROR        => array(null, LogLevel::EMERGENCY),
+            );
+            $this->assertSame($loggers, $handler->setLoggers(array()));

             restore_error_handler();
+            restore_exception_handler();
         } catch (\Exception $e) {
             restore_error_handler();
+            restore_exception_handler();

             throw $e;
         }
     }

-    public function testHandle()
+    public function testHandleError()
     {
         try {
             $handler = ErrorHandler::register(0);
-            $this->assertFalse($handler->handle(0, 'foo', 'foo.php', 12, array()));
+            $this->assertFalse($handler->handleError(0, 'foo', 'foo.php', 12, array()));

             restore_error_handler();
+            restore_exception_handler();

             $handler = ErrorHandler::register(3);
-            $this->assertFalse($handler->handle(4, 'foo', 'foo.php', 12, array()));
+            $this->assertFalse($handler->handleError(4, 'foo', 'foo.php', 12, array()));

             restore_error_handler();
+            restore_exception_handler();

             $handler = ErrorHandler::register(3);
             try {
-                $handler->handle(111, 'foo', 'foo.php', 12, array());
+                $handler->handleError(4, 'foo', 'foo.php', 12, array());
             } catch (\ErrorException $e) {
-                $this->assertSame('111: foo in foo.php line 12', $e->getMessage());
-                $this->assertSame(111, $e->getSeverity());
+                $this->assertSame('Parse Error: foo', $e->getMessage());
+                $this->assertSame(4, $e->getSeverity());
                 $this->assertSame('foo.php', $e->getFile());
                 $this->assertSame(12, $e->getLine());
             }

             restore_error_handler();
+            restore_exception_handler();

             $handler = ErrorHandler::register(E_USER_DEPRECATED);
-            $this->assertFalse($handler->handle(E_USER_DEPRECATED, 'foo', 'foo.php', 12, array()));
+            $this->assertFalse($handler->handleError(E_USER_DEPRECATED, 'foo', 'foo.php', 12, array()));

             restore_error_handler();
+            restore_exception_handler();

             $handler = ErrorHandler::register(E_DEPRECATED);
-            $this->assertFalse($handler->handle(E_DEPRECATED, 'foo', 'foo.php', 12, array()));
+            $this->assertFalse($handler->handleError(E_DEPRECATED, 'foo', 'foo.php', 12, array()));

             restore_error_handler();
+            restore_exception_handler();

             $logger = $this->getMock('Psr\Log\LoggerInterface');

             $that = $this;
-            $warnArgCheck = function ($message, $context) use ($that) {
+            $warnArgCheck = function ($logLevel, $message, $context) use ($that) {
+                $that->assertEquals('info', $logLevel);
                 $that->assertEquals('foo', $message);
                 $that->assertArrayHasKey('type', $context);
-                $that->assertEquals($context['type'], ErrorHandler::TYPE_DEPRECATION);
+                $that->assertEquals($context['type'], E_USER_DEPRECATED);
                 $that->assertArrayHasKey('stack', $context);
                 $that->assertInternalType('array', $context['stack']);
             };

             $logger
                 ->expects($this->once())
-                ->method('warning')
+                ->method('log')
                 ->will($this->returnCallback($warnArgCheck))
             ;

             $handler = ErrorHandler::register(E_USER_DEPRECATED);
-            $handler->setLogger($logger);
-            $this->assertTrue($handler->handle(E_USER_DEPRECATED, 'foo', 'foo.php', 12, array()));
+            $handler->setDefaultLogger($logger, E_USER_DEPRECATED);
+            $this->assertTrue($handler->handleError(E_USER_DEPRECATED, 'foo', 'foo.php', 12, array()));

             restore_error_handler();
+            restore_exception_handler();

             $logger = $this->getMock('Psr\Log\LoggerInterface');

@@ -182,67 +229,146 @@ public function testHandle()
             ;

             $handler = ErrorHandler::register(E_NOTICE);
-            $handler->setLogger($logger, 'scream');
+            $handler->setDefaultLogger($logger, E_NOTICE);
+            $handler->screamAt(E_NOTICE);
             unset($undefVar);
             @$undefVar++;

             restore_error_handler();
+            restore_exception_handler();
         } catch (\Exception $e) {
             restore_error_handler();
+            restore_exception_handler();

             throw $e;
         }
     }

-    /**
-     * @dataProvider provideFatalErrorHandlersData
-     */
-    public function testFatalErrorHandlers($error, $class, $translatedMessage)
+    public function testHandleException()
     {
-        $handler = new ErrorHandler();
-        $exceptionHandler = new MockExceptionHandler();
-
-        $m = new \ReflectionMethod($handler, 'handleFatalError');
-        $m->setAccessible(true);
-        $m->invoke($handler, array($exceptionHandler, 'handle'), $error);
-
-        $this->assertInstanceof($class, $exceptionHandler->e);
-        // class names are case insensitive and PHP/HHVM do not return the same
-        $this->assertSame(strtolower($translatedMessage), strtolower($exceptionHandler->e->getMessage()));
-        $this->assertSame($error['type'], $exceptionHandler->e->getSeverity());
-        $this->assertSame($error['file'], $exceptionHandler->e->getFile());
-        $this->assertSame($error['line'], $exceptionHandler->e->getLine());
+        try {
+            $handler = ErrorHandler::register();
+
+            $exception = new \Exception('foo');
+
+            $logger = $this->getMock('Psr\Log\LoggerInterface');
+
+            $that = $this;
+            $logArgCheck = function ($level, $message, $context) use ($that) {
+                $that->assertEquals('Uncaught Exception: foo', $message);
+                $that->assertArrayHasKey('type', $context);
+                $that->assertEquals($context['type'], E_ERROR);
+            };
+
+            $logger
+                ->expects($this->exactly(2))
+                ->method('log')
+                ->will($this->returnCallback($logArgCheck))
+            ;
+
+            $handler->setDefaultLogger($logger, E_ERROR);
+
+            try {
+                $handler->handleException($exception);
+                $this->fail('Exception expected');
+            } catch (\Exception $e) {
+                $this->assertSame($exception, $e);
+            }
+
+            $that = $this;
+            $handler->setExceptionHandler(function ($e) use ($exception, $that) {
+                $that->assertSame($exception, $e);
+            });
+
+            $handler->handleException($exception);
+
+            restore_error_handler();
+            restore_exception_handler();
+        } catch (\Exception $e) {
+            restore_error_handler();
+            restore_exception_handler();
+
+            throw $e;
+        }
     }

-    public function provideFatalErrorHandlersData()
+    public function testHandleFatalError()
     {
-        return array(
-            // undefined function
-            array(
-                array(
-                    'type' => 1,
-                    'line' => 12,
-                    'file' => 'foo.php',
-                    'message' => 'Call to undefined function test_namespaced_function_again()',
-                ),
-                'Symfony\Component\Debug\Exception\UndefinedFunctionException',
-                'Attempted to call function "test_namespaced_function_again" from the global namespace in foo.php line 12. Did you mean to call: "\\symfony\\component\\debug\\tests\\test_namespaced_function_again"?',
-            ),
-            // class not found
-            array(
-                array(
-                    'type' => 1,
-                    'line' => 12,
-                    'file' => 'foo.php',
-                    'message' => 'Class \'WhizBangFactory\' not found',
-                ),
-                'Symfony\Component\Debug\Exception\ClassNotFoundException',
-                'Attempted to load class "WhizBangFactory" from the global namespace in foo.php line 12. Did you forget a use statement for this class?',
-            ),
-        );
+        try {
+            $handler = ErrorHandler::register();
+
+            $error = array(
+                'type' => E_PARSE,
+                'message' => 'foo',
+                'file' => 'bar',
+                'line' => 123,
+            );
+
+            $logger = $this->getMock('Psr\Log\LoggerInterface');
+
+            $that = $this;
+            $logArgCheck = function ($level, $message, $context) use ($that) {
+                $that->assertEquals('Fatal Parse Error: foo', $message);
+                $that->assertArrayHasKey('type', $context);
+                $that->assertEquals($context['type'], E_ERROR);
+            };
+
+            $logger
+                ->expects($this->once())
+                ->method('log')
+                ->will($this->returnCallback($logArgCheck))
+            ;
+
+            $handler->setDefaultLogger($logger, E_ERROR);
+
+            $handler->handleFatalError($error);
+
+            restore_error_handler();
+            restore_exception_handler();
+        } catch (\Exception $e) {
+            restore_error_handler();
+            restore_exception_handler();
+
+            throw $e;
+        }
     }
-}

-function test_namespaced_function_again()
-{
+    public function testDeprecated()
+    {
+        try {
+            $handler = ErrorHandler::register(0);
+            $this->assertFalse($handler->handle(0, 'foo', 'foo.php', 12, array()));
+
+            restore_error_handler();
+            restore_exception_handler();
+
+            $logger = $this->getMock('Psr\Log\LoggerInterface');
+
+            $that = $this;
+            $logArgCheck = function ($level, $message, $context) use ($that) {
+                $that->assertEquals('Undefined variable: undefVar', $message);
+                $that->assertArrayHasKey('type', $context);
+                $that->assertEquals($context['type'], E_NOTICE);
+            };
+
+            $logger
+                ->expects($this->once())
+                ->method('log')
+                ->will($this->returnCallback($logArgCheck))
+            ;
+
+            $handler = ErrorHandler::register(E_NOTICE);
+            $handler->setLogger($logger, 'scream');
+            unset($undefVar);
+            @$undefVar++;
+
+            restore_error_handler();
+            restore_exception_handler();
+        } catch (\Exception $e) {
+            restore_error_handler();
+            restore_exception_handler();
+
+            throw $e;
+        }
+    }
 }
diff --git a/src/Symfony/Component/Debug/Tests/Exception/FlattenExceptionTest.php b/src/Symfony/Component/Debug/Tests/Exception/FlattenExceptionTest.php
index 4caa9ed3451f..270e90e40546 100644
--- a/src/Symfony/Component/Debug/Tests/Exception/FlattenExceptionTest.php
+++ b/src/Symfony/Component/Debug/Tests/Exception/FlattenExceptionTest.php
@@ -160,8 +160,8 @@ public function testToArray(\Exception $exception, $statusCode)

         $this->assertEquals(array(
             array(
-                'message'=> 'test',
-                'class'=>'Exception',
+                'message' => 'test',
+                'class' => 'Exception',
                 'trace'=>array(array(
                     'namespace'   => '', 'short_class' => '', 'class' => '','type' => '','function' => '', 'file' => 'foo.php', 'line' => 123,
                     'args'        => array()
diff --git a/src/Symfony/Component/Debug/Tests/ExceptionHandlerTest.php b/src/Symfony/Component/Debug/Tests/ExceptionHandlerTest.php
index b202b8f1dec2..1e0859ebd84e 100644
--- a/src/Symfony/Component/Debug/Tests/ExceptionHandlerTest.php
+++ b/src/Symfony/Component/Debug/Tests/ExceptionHandlerTest.php
@@ -12,6 +12,8 @@
 namespace Symfony\Component\Debug\Tests;

 use Symfony\Component\Debug\ExceptionHandler;
+use Symfony\Component\Debug\Exception\OutOfMemoryException;
+use Symfony\Component\HttpFoundation\Response;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException;

@@ -59,4 +61,56 @@ public function testNestedExceptions()
         $handler = new ExceptionHandler(true);
         $response = $handler->createResponse(new \RuntimeException('Foo', 0, new \RuntimeException('Bar')));
     }
+
+    public function testHandle()
+    {
+        $exception = new \Exception('foo');
+
+        if (class_exists('Symfony\Component\HttpFoundation\Response')) {
+            $handler = $this->getMock('Symfony\Component\Debug\ExceptionHandler', array('createResponse'));
+            $handler
+                ->expects($this->exactly(2))
+                ->method('createResponse')
+                ->will($this->returnValue(new Response()));
+        } else {
+            $handler = $this->getMock('Symfony\Component\Debug\ExceptionHandler', array('sendPhpResponse'));
+            $handler
+                ->expects($this->exactly(2))
+                ->method('sendPhpResponse');
+        }
+
+        $handler->handle($exception);
+
+        $that = $this;
+        $handler->setHandler(function ($e) use ($exception, $that) {
+            $that->assertSame($exception, $e);
+        });
+
+        $handler->handle($exception);
+    }
+
+    public function testHandleOutOfMemoryException()
+    {
+        $exception = new OutOfMemoryException('foo', 0, E_ERROR, __FILE__, __LINE__);
+
+        if (class_exists('Symfony\Component\HttpFoundation\Response')) {
+            $handler = $this->getMock('Symfony\Component\Debug\ExceptionHandler', array('createResponse'));
+            $handler
+                ->expects($this->once())
+                ->method('createResponse')
+                ->will($this->returnValue(new Response()));
+        } else {
+            $handler = $this->getMock('Symfony\Component\Debug\ExceptionHandler', array('sendPhpResponse'));
+            $handler
+                ->expects($this->once())
+                ->method('sendPhpResponse');
+        }
+
+        $that = $this;
+        $handler->setHandler(function ($e) use ($that) {
+            $that->fail('OutOfMemoryException should bypass the handler');
+        });
+
+        $handler->handle($exception);
+    }
 }
diff --git a/src/Symfony/Component/Debug/Tests/FatalErrorHandler/ClassNotFoundFatalErrorHandlerTest.php b/src/Symfony/Component/Debug/Tests/FatalErrorHandler/ClassNotFoundFatalErrorHandlerTest.php
index be6c74af9c1d..6d256e3d2279 100644
--- a/src/Symfony/Component/Debug/Tests/FatalErrorHandler/ClassNotFoundFatalErrorHandlerTest.php
+++ b/src/Symfony/Component/Debug/Tests/FatalErrorHandler/ClassNotFoundFatalErrorHandlerTest.php
@@ -41,7 +41,7 @@ public function provideClassNotFoundData()
                     'file' => 'foo.php',
                     'message' => 'Class \'WhizBangFactory\' not found',
                 ),
-                'Attempted to load class "WhizBangFactory" from the global namespace in foo.php line 12. Did you forget a use statement for this class?',
+                'Attempted to load class "WhizBangFactory" from the global namespace. Did you forget a "use" statement?',
             ),
             array(
                 array(
@@ -50,7 +50,7 @@ public function provideClassNotFoundData()
                     'file' => 'foo.php',
                     'message' => 'Class \'Foo\\Bar\\WhizBangFactory\' not found',
                 ),
-                'Attempted to load class "WhizBangFactory" from namespace "Foo\\Bar" in foo.php line 12. Do you need to "use" it from another namespace?',
+                'Attempted to load class "WhizBangFactory" from namespace "Foo\\Bar". Did you forget a "use" statement for another namespace?',
             ),
             array(
                 array(
@@ -59,7 +59,7 @@ public function provideClassNotFoundData()
                     'file' => 'foo.php',
                     'message' => 'Class \'UndefinedFunctionException\' not found',
                 ),
-                'Attempted to load class "UndefinedFunctionException" from the global namespace in foo.php line 12. Did you forget a use statement for this class? Perhaps you need to add a use statement for one of the following: Symfony\Component\Debug\Exception\UndefinedFunctionException.',
+                'Attempted to load class "UndefinedFunctionException" from the global namespace. Did you forget a "use" statement for "Symfony\Component\Debug\Exception\UndefinedFunctionException"?',
             ),
             array(
                 array(
@@ -68,7 +68,7 @@ public function provideClassNotFoundData()
                     'file' => 'foo.php',
                     'message' => 'Class \'PEARClass\' not found',
                 ),
-                'Attempted to load class "PEARClass" from the global namespace in foo.php line 12. Did you forget a use statement for this class? Perhaps you need to add a use statement for one of the following: Symfony_Component_Debug_Tests_Fixtures_PEARClass.',
+                'Attempted to load class "PEARClass" from the global namespace. Did you forget a "use" statement for "Symfony_Component_Debug_Tests_Fixtures_PEARClass"?',
             ),
             array(
                 array(
@@ -77,7 +77,7 @@ public function provideClassNotFoundData()
                     'file' => 'foo.php',
                     'message' => 'Class \'Foo\\Bar\\UndefinedFunctionException\' not found',
                 ),
-                'Attempted to load class "UndefinedFunctionException" from namespace "Foo\Bar" in foo.php line 12. Do you need to "use" it from another namespace? Perhaps you need to add a use statement for one of the following: Symfony\Component\Debug\Exception\UndefinedFunctionException.',
+                'Attempted to load class "UndefinedFunctionException" from namespace "Foo\Bar". Did you forget a "use" statement for "Symfony\Component\Debug\Exception\UndefinedFunctionException"?',
             ),
         );
     }
diff --git a/src/Symfony/Component/Debug/Tests/FatalErrorHandler/UndefinedFunctionFatalErrorHandlerTest.php b/src/Symfony/Component/Debug/Tests/FatalErrorHandler/UndefinedFunctionFatalErrorHandlerTest.php
index 27d50ff86f58..563fd7b530de 100644
--- a/src/Symfony/Component/Debug/Tests/FatalErrorHandler/UndefinedFunctionFatalErrorHandlerTest.php
+++ b/src/Symfony/Component/Debug/Tests/FatalErrorHandler/UndefinedFunctionFatalErrorHandlerTest.php
@@ -42,7 +42,7 @@ public function provideUndefinedFunctionData()
                     'file' => 'foo.php',
                     'message' => 'Call to undefined function test_namespaced_function()',
                 ),
-                'Attempted to call function "test_namespaced_function" from the global namespace in foo.php line 12. Did you mean to call: "\\symfony\\component\\debug\\tests\\fatalerrorhandler\\test_namespaced_function"?',
+                'Attempted to call function "test_namespaced_function" from the global namespace. Did you mean to call "\\symfony\\component\\debug\\tests\\fatalerrorhandler\\test_namespaced_function"?',
             ),
             array(
                 array(
@@ -51,7 +51,7 @@ public function provideUndefinedFunctionData()
                     'file' => 'foo.php',
                     'message' => 'Call to undefined function Foo\\Bar\\Baz\\test_namespaced_function()',
                 ),
-                'Attempted to call function "test_namespaced_function" from namespace "Foo\\Bar\\Baz" in foo.php line 12. Did you mean to call: "\\symfony\\component\\debug\\tests\\fatalerrorhandler\\test_namespaced_function"?',
+                'Attempted to call function "test_namespaced_function" from namespace "Foo\\Bar\\Baz". Did you mean to call "\\symfony\\component\\debug\\tests\\fatalerrorhandler\\test_namespaced_function"?',
             ),
             array(
                 array(
@@ -60,7 +60,7 @@ public function provideUndefinedFunctionData()
                     'file' => 'foo.php',
                     'message' => 'Call to undefined function foo()',
                 ),
-                'Attempted to call function "foo" from the global namespace in foo.php line 12.',
+                'Attempted to call function "foo" from the global namespace.',
             ),
             array(
                 array(
@@ -69,7 +69,7 @@ public function provideUndefinedFunctionData()
                     'file' => 'foo.php',
                     'message' => 'Call to undefined function Foo\\Bar\\Baz\\foo()',
                 ),
-                'Attempted to call function "foo" from namespace "Foo\Bar\Baz" in foo.php line 12.',
+                'Attempted to call function "foo" from namespace "Foo\Bar\Baz".',
             ),
         );
     }
diff --git a/src/Symfony/Component/Debug/Tests/FatalErrorHandler/UndefinedMethodFatalErrorHandlerTest.php b/src/Symfony/Component/Debug/Tests/FatalErrorHandler/UndefinedMethodFatalErrorHandlerTest.php
index 8e1893c15f07..c6ca87748043 100644
--- a/src/Symfony/Component/Debug/Tests/FatalErrorHandler/UndefinedMethodFatalErrorHandlerTest.php
+++ b/src/Symfony/Component/Debug/Tests/FatalErrorHandler/UndefinedMethodFatalErrorHandlerTest.php
@@ -41,7 +41,7 @@ public function provideUndefinedMethodData()
                     'file' => 'foo.php',
                     'message' => 'Call to undefined method SplObjectStorage::what()',
                 ),
-                'Attempted to call method "what" on class "SplObjectStorage" in foo.php line 12.',
+                'Attempted to call method "what" on class "SplObjectStorage".',
             ),
             array(
                 array(
@@ -50,7 +50,7 @@ public function provideUndefinedMethodData()
                     'file' => 'foo.php',
                     'message' => 'Call to undefined method SplObjectStorage::walid()',
                 ),
-                'Attempted to call method "walid" on class "SplObjectStorage" in foo.php line 12. Did you mean to call: "valid"?',
+                'Attempted to call method "walid" on class "SplObjectStorage". Did you mean to call "valid"?',
             ),
             array(
                 array(
@@ -59,7 +59,7 @@ public function provideUndefinedMethodData()
                     'file' => 'foo.php',
                     'message' => 'Call to undefined method SplObjectStorage::offsetFet()',
                 ),
-                'Attempted to call method "offsetFet" on class "SplObjectStorage" in foo.php line 12. Did you mean to call: "offsetGet", "offsetSet", "offsetUnset"?',
+                'Attempted to call method "offsetFet" on class "SplObjectStorage". Did you mean to call e.g. "offsetGet", "offsetSet" or "offsetUnset"?',
             ),
         );
     }
diff --git a/src/Symfony/Component/Debug/composer.json b/src/Symfony/Component/Debug/composer.json
index b9cd2d340a36..b919aa4fd6ce 100644
--- a/src/Symfony/Component/Debug/composer.json
+++ b/src/Symfony/Component/Debug/composer.json
@@ -16,7 +16,8 @@
         }
     ],
     "require": {
-        "php": ">=5.3.3"
+        "php": ">=5.3.3",
+        "psr/log": "~1.0"
     },
     "require-dev": {
         "symfony/http-kernel": "~2.1",
@@ -33,7 +34,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Component/DependencyInjection/composer.json b/src/Symfony/Component/DependencyInjection/composer.json
index 2190101fa2c9..c0090495a1bf 100644
--- a/src/Symfony/Component/DependencyInjection/composer.json
+++ b/src/Symfony/Component/DependencyInjection/composer.json
@@ -35,7 +35,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Component/DomCrawler/Crawler.php b/src/Symfony/Component/DomCrawler/Crawler.php
old mode 100644
new mode 100755
index 54b5216ffb66..6870ee9e25c8
--- a/src/Symfony/Component/DomCrawler/Crawler.php
+++ b/src/Symfony/Component/DomCrawler/Crawler.php
@@ -341,6 +341,19 @@ public function each(\Closure $closure)
         return $data;
     }

+    /**
+     * Slices the list of nodes by $offset and $length.
+     *
+     * @param int $offset
+     * @param int $length
+     *
+     * @return Crawler A Crawler instance with the sliced nodes
+     */
+    public function slice($offset = 0, $length = -1)
+    {
+        return new static(iterator_to_array(new \LimitIterator($this, $offset, $length)), $this->uri);
+    }
+
     /**
      * Reduces the list of nodes by calling an anonymous function.
      *
@@ -674,8 +687,8 @@ public function selectButton($value)
     {
         $translate = 'translate(@type, "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "abcdefghijklmnopqrstuvwxyz")';
         $xpath = sprintf('descendant-or-self::input[((contains(%s, "submit") or contains(%s, "button")) and contains(concat(\' \', normalize-space(string(@value)), \' \'), %s)) ', $translate, $translate, static::xpathLiteral(' '.$value.' ')).
-                         sprintf('or (contains(%s, "image") and contains(concat(\' \', normalize-space(string(@alt)), \' \'), %s)) or @id="%s" or @name="%s"] ', $translate, static::xpathLiteral(' '.$value.' '), $value, $value).
-                         sprintf('| descendant-or-self::button[contains(concat(\' \', normalize-space(string(.)), \' \'), %s) or @id="%s" or @name="%s"]', static::xpathLiteral(' '.$value.' '), $value, $value);
+                         sprintf('or (contains(%s, "image") and contains(concat(\' \', normalize-space(string(@alt)), \' \'), %s)) or @id=%s or @name=%s] ', $translate, static::xpathLiteral(' '.$value.' '), static::xpathLiteral($value), static::xpathLiteral($value)).
+                         sprintf('| descendant-or-self::button[contains(concat(\' \', normalize-space(string(.)), \' \'), %s) or @id=%s or @name=%s]', static::xpathLiteral(' '.$value.' '), static::xpathLiteral($value), static::xpathLiteral($value));

         return $this->filterRelativeXPath($xpath);
     }
diff --git a/src/Symfony/Component/DomCrawler/Tests/CrawlerTest.php b/src/Symfony/Component/DomCrawler/Tests/CrawlerTest.php
old mode 100644
new mode 100755
index 15bcb7dde790..b5f7c894a38a
--- a/src/Symfony/Component/DomCrawler/Tests/CrawlerTest.php
+++ b/src/Symfony/Component/DomCrawler/Tests/CrawlerTest.php
@@ -313,6 +313,16 @@ public function testEach()
         $this->assertEquals(array('0-One', '1-Two', '2-Three'), $data, '->each() executes an anonymous function on each node of the list');
     }

+    public function testSlice()
+    {
+        $crawler = $this->createTestCrawler()->filterXPath('//ul[1]/li');
+        $this->assertNotSame($crawler->slice(), $crawler, '->slice() returns a new instance of a crawler');
+        $this->assertInstanceOf('Symfony\\Component\\DomCrawler\\Crawler', $crawler->slice(), '->slice() returns a new instance of a crawler');
+
+        $this->assertCount(3, $crawler->slice(), '->slice() does not slice the nodes in the list if any param is entered');
+        $this->assertCount(1, $crawler->slice(1, 1), '->slice() slices the nodes in the list');
+    }
+
     public function testReduce()
     {
         $crawler = $this->createTestCrawler()->filterXPath('//ul[1]/li');
@@ -569,6 +579,48 @@ public function testSelectButton()
         $this->assertEquals(1, $crawler->selectButton('FooBarName')->count(), '->selectButton() selects buttons with form attribute too');
     }

+    public function testSelectButtonWithSingleQuotesInNameAttribute()
+    {
+        $html = <<<HTML
+<!DOCTYPE html>
+<html lang="en">
+<body>
+    <div id="action">
+        <a href="/index.php?r=site/login">Login</a>
+    </div>
+    <form id="login-form" action="/index.php?r=site/login" method="post">
+        <button type="submit" name="Click 'Here'">Submit</button>
+    </form>
+</body>
+</html>
+HTML;
+
+        $crawler = new Crawler($html);
+
+        $this->assertCount(1, $crawler->selectButton('Click \'Here\''));
+    }
+
+    public function testSelectButtonWithDoubleQuotesInNameAttribute()
+    {
+        $html = <<<HTML
+<!DOCTYPE html>
+<html lang="en">
+<body>
+    <div id="action">
+        <a href="/index.php?r=site/login">Login</a>
+    </div>
+    <form id="login-form" action="/index.php?r=site/login" method="post">
+        <button type="submit" name='Click "Here"'>Submit</button>
+    </form>
+</body>
+</html>
+HTML;
+
+        $crawler = new Crawler($html);
+
+        $this->assertCount(1, $crawler->selectButton('Click "Here"'));
+    }
+
     public function testLink()
     {
         $crawler = $this->createTestCrawler('http://example.com/bar/')->selectLink('Foo');
diff --git a/src/Symfony/Component/DomCrawler/composer.json b/src/Symfony/Component/DomCrawler/composer.json
index 0246346238c0..dd305f7d1f11 100644
--- a/src/Symfony/Component/DomCrawler/composer.json
+++ b/src/Symfony/Component/DomCrawler/composer.json
@@ -31,7 +31,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Component/EventDispatcher/composer.json b/src/Symfony/Component/EventDispatcher/composer.json
index 3715ece302fb..f07e3be4f22b 100644
--- a/src/Symfony/Component/EventDispatcher/composer.json
+++ b/src/Symfony/Component/EventDispatcher/composer.json
@@ -35,7 +35,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Component/ExpressionLanguage/composer.json b/src/Symfony/Component/ExpressionLanguage/composer.json
index 3828f0435aa7..ebd1ba1b2e79 100644
--- a/src/Symfony/Component/ExpressionLanguage/composer.json
+++ b/src/Symfony/Component/ExpressionLanguage/composer.json
@@ -25,7 +25,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Component/Filesystem/composer.json b/src/Symfony/Component/Filesystem/composer.json
index dfa633c1d06c..981423e6ea1c 100644
--- a/src/Symfony/Component/Filesystem/composer.json
+++ b/src/Symfony/Component/Filesystem/composer.json
@@ -25,7 +25,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Component/Finder/composer.json b/src/Symfony/Component/Finder/composer.json
index b6e6997884e0..a91b4707f7c0 100644
--- a/src/Symfony/Component/Finder/composer.json
+++ b/src/Symfony/Component/Finder/composer.json
@@ -25,7 +25,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Component/Form/Extension/Validator/Constraints/FormValidator.php b/src/Symfony/Component/Form/Extension/Validator/Constraints/FormValidator.php
index ab049bf66d7d..a9a0e5944047 100644
--- a/src/Symfony/Component/Form/Extension/Validator/Constraints/FormValidator.php
+++ b/src/Symfony/Component/Form/Extension/Validator/Constraints/FormValidator.php
@@ -111,7 +111,7 @@ public function validate($form, Constraint $constraint)
         }

         // Mark the form with an error if it contains extra fields
-        if (count($form->getExtraData()) > 0) {
+        if (!$config->getOption('allow_extra_fields') && count($form->getExtraData()) > 0) {
             $this->context->addViolation(
                 $config->getOption('extra_fields_message'),
                 array('{{ extra_fields }}' => implode('", "', array_keys($form->getExtraData()))),
diff --git a/src/Symfony/Component/Form/Extension/Validator/Type/FormTypeValidatorExtension.php b/src/Symfony/Component/Form/Extension/Validator/Type/FormTypeValidatorExtension.php
index 344bddadc197..8d4e3d5642f2 100644
--- a/src/Symfony/Component/Form/Extension/Validator/Type/FormTypeValidatorExtension.php
+++ b/src/Symfony/Component/Form/Extension/Validator/Type/FormTypeValidatorExtension.php
@@ -65,6 +65,7 @@ public function setDefaultOptions(OptionsResolverInterface $resolver)
             'cascade_validation'         => false,
             'invalid_message'            => 'This value is not valid.',
             'invalid_message_parameters' => array(),
+            'allow_extra_fields'         => false,
             'extra_fields_message'       => 'This form should not contain extra fields.',
             'post_max_size_message'      => 'The uploaded file was too large. Please try to upload a smaller file.',
         ));
diff --git a/src/Symfony/Component/Form/README.md b/src/Symfony/Component/Form/README.md
index 340bc6e63137..ff353701f22f 100644
--- a/src/Symfony/Component/Form/README.md
+++ b/src/Symfony/Component/Form/README.md
@@ -14,7 +14,7 @@ https://github.com/fabpot/Silex/blob/master/src/Silex/Provider/FormServiceProvid

 Documentation:

-http://symfony.com/doc/2.5/book/forms.html
+http://symfony.com/doc/2.6/book/forms.html

 Resources
 ---------
diff --git a/src/Symfony/Component/Form/Tests/Extension/HttpFoundation/HttpFoundationRequestHandlerTest.php b/src/Symfony/Component/Form/Tests/Extension/HttpFoundation/HttpFoundationRequestHandlerTest.php
index b25380aea7c4..cf5d63d90e09 100644
--- a/src/Symfony/Component/Form/Tests/Extension/HttpFoundation/HttpFoundationRequestHandlerTest.php
+++ b/src/Symfony/Component/Form/Tests/Extension/HttpFoundation/HttpFoundationRequestHandlerTest.php
@@ -14,6 +14,7 @@
 use Symfony\Component\Form\Extension\HttpFoundation\HttpFoundationRequestHandler;
 use Symfony\Component\Form\Tests\AbstractRequestHandlerTest;
 use Symfony\Component\HttpFoundation\Request;
+use Symfony\Component\HttpFoundation\File\UploadedFile;

 /**
  * @author Bernhard Schussek <bschussek@gmail.com>
@@ -47,8 +48,6 @@ protected function getRequestHandler()

     protected function getMockFile()
     {
-        return $this->getMockBuilder('Symfony\Component\HttpFoundation\File\UploadedFile')
-            ->setConstructorArgs(array(__DIR__.'/../../Fixtures/foo', 'foo'))
-            ->getMock();
+        return new UploadedFile(__DIR__.'/../../Fixtures/foo', 'foo');
     }
 }
diff --git a/src/Symfony/Component/Form/Tests/Extension/Validator/Constraints/FormValidatorTest.php b/src/Symfony/Component/Form/Tests/Extension/Validator/Constraints/FormValidatorTest.php
index 4d9c26b81ce9..7616db25a810 100644
--- a/src/Symfony/Component/Form/Tests/Extension/Validator/Constraints/FormValidatorTest.php
+++ b/src/Symfony/Component/Form/Tests/Extension/Validator/Constraints/FormValidatorTest.php
@@ -611,6 +611,28 @@ public function testViolationIfExtraData()
         $this->validator->validate($form, new Form());
     }

+    public function testNoViolationIfAllowExtraData()
+    {
+        $context = $this->getMockExecutionContext();
+
+        $form = $this
+            ->getBuilder('parent', null, array('allow_extra_fields' => true))
+            ->setCompound(true)
+            ->setDataMapper($this->getDataMapper())
+            ->add($this->getBuilder('child'))
+            ->getForm();
+
+        $form->bind(array('foo' => 'bar'));
+
+        $context->expects($this->never())
+            ->method('addViolation');
+        $context->expects($this->never())
+            ->method('addViolationAt');
+
+        $this->validator->initialize($context);
+        $this->validator->validate($form, new Form());
+    }
+
     /**
      * @dataProvider getPostMaxSizeFixtures
      */
diff --git a/src/Symfony/Component/Form/composer.json b/src/Symfony/Component/Form/composer.json
index 56176c234ffd..14412e1f61e0 100644
--- a/src/Symfony/Component/Form/composer.json
+++ b/src/Symfony/Component/Form/composer.json
@@ -42,7 +42,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Component/HttpFoundation/ParameterBag.php b/src/Symfony/Component/HttpFoundation/ParameterBag.php
index 8791275bafda..18ca3ea54700 100644
--- a/src/Symfony/Component/HttpFoundation/ParameterBag.php
+++ b/src/Symfony/Component/HttpFoundation/ParameterBag.php
@@ -253,6 +253,20 @@ public function getInt($key, $default = 0, $deep = false)
         return (int) $this->get($key, $default, $deep);
     }

+    /**
+     * Returns the parameter value converted to boolean.
+     *
+     * @param string  $key     The parameter key
+     * @param mixed   $default The default value if the parameter key does not exist
+     * @param bool    $deep    If true, a path like foo[bar] will find deeper items
+     *
+     * @return bool    The filtered value
+     */
+    public function getBoolean($key, $default = false, $deep = false)
+    {
+        return $this->filter($key, $default, $deep, FILTER_VALIDATE_BOOLEAN);
+    }
+
     /**
      * Filter key.
      *
diff --git a/src/Symfony/Component/HttpFoundation/RequestMatcher.php b/src/Symfony/Component/HttpFoundation/RequestMatcher.php
index da95c3acc14d..c571c604b4f1 100644
--- a/src/Symfony/Component/HttpFoundation/RequestMatcher.php
+++ b/src/Symfony/Component/HttpFoundation/RequestMatcher.php
@@ -45,24 +45,42 @@ class RequestMatcher implements RequestMatcherInterface
      */
     private $attributes = array();

+    /**
+     * @var string[]
+     */
+    private $schemes = array();
+
     /**
      * @param string|null          $path
      * @param string|null          $host
      * @param string|string[]|null $methods
      * @param string|string[]|null $ips
      * @param array                $attributes
+     * @param string|string[]|null $schemes
      */
-    public function __construct($path = null, $host = null, $methods = null, $ips = null, array $attributes = array())
+    public function __construct($path = null, $host = null, $methods = null, $ips = null, array $attributes = array(), $schemes = null)
     {
         $this->matchPath($path);
         $this->matchHost($host);
         $this->matchMethod($methods);
         $this->matchIps($ips);
+        $this->matchScheme($schemes);
+
         foreach ($attributes as $k => $v) {
             $this->matchAttribute($k, $v);
         }
     }

+    /**
+     * Adds a check for the HTTP scheme.
+     *
+     * @param string|string[]|null $scheme An HTTP scheme or an array of HTTP schemes
+     */
+    public function matchScheme($scheme)
+    {
+        $this->schemes = array_map('strtolower', (array) $scheme);
+    }
+
     /**
      * Adds a check for the URL host name.
      *
@@ -106,7 +124,7 @@ public function matchIps($ips)
     /**
      * Adds a check for the HTTP method.
      *
-     * @param string|string[]|null $method An HTTP method or an array of HTTP methods
+     * @param string|string[] $method An HTTP method or an array of HTTP methods
      */
     public function matchMethod($method)
     {
@@ -131,6 +149,10 @@ public function matchAttribute($key, $regexp)
      */
     public function matches(Request $request)
     {
+        if ($this->schemes && !in_array($request->getScheme(), $this->schemes)) {
+            return false;
+        }
+
         if ($this->methods && !in_array($request->getMethod(), $this->methods)) {
             return false;
         }
diff --git a/src/Symfony/Component/HttpFoundation/Resources/stubs/FakeFile.php b/src/Symfony/Component/HttpFoundation/Resources/stubs/FakeFile.php
new file mode 100644
index 000000000000..0aecc20b08f0
--- /dev/null
+++ b/src/Symfony/Component/HttpFoundation/Resources/stubs/FakeFile.php
@@ -0,0 +1,45 @@
+<?php
+
+/*
+ * This file is part of the Symfony package.
+ *
+ * (c) Fabien Potencier <fabien@symfony.com>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace Symfony\Component\HttpFoundation\Resources\stubs;
+
+use Symfony\Component\HttpFoundation\File\File as OrigFile;
+
+class FakeFile extends OrigFile
+{
+    private $realpath;
+
+    public function __construct($realpath, $path)
+    {
+        $this->realpath = $realpath;
+        parent::__construct($path, false);
+    }
+
+    public function isReadable()
+    {
+        return true;
+    }
+
+    public function getRealpath()
+    {
+        return $this->realpath;
+    }
+
+    public function getSize()
+    {
+        return 42;
+    }
+
+    public function getMTime()
+    {
+        return time();
+    }
+}
diff --git a/src/Symfony/Component/HttpFoundation/Resources/stubs/SessionHandlerInterface.php b/src/Symfony/Component/HttpFoundation/Resources/stubs/SessionHandlerInterface.php
index 24280e38fca4..9557135bcfbd 100644
--- a/src/Symfony/Component/HttpFoundation/Resources/stubs/SessionHandlerInterface.php
+++ b/src/Symfony/Component/HttpFoundation/Resources/stubs/SessionHandlerInterface.php
@@ -12,6 +12,14 @@
 /**
  * SessionHandlerInterface for PHP < 5.4
  *
+ * The order in which these methods are invoked by PHP are:
+ * 1. open [session_start]
+ * 2. read
+ * 3. gc [optional depending on probability settings: gc_probability / gc_divisor]
+ * 4. destroy [optional when session_regenerate_id(true) is used]
+ * 5. write [session_write_close] or destroy [session_destroy]
+ * 6. close
+ *
  * Extensive documentation can be found at php.net, see links:
  *
  * @see http://php.net/sessionhandlerinterface
@@ -19,6 +27,7 @@
  * @see http://php.net/session-set-save-handler
  *
  * @author Drak <drak@zikula.org>
+ * @author Tobias Schultze <http://tobion.de>
  */
 interface SessionHandlerInterface
 {
@@ -57,6 +66,9 @@ public function read($sessionId);
     /**
      * Writes the session data to the storage.
      *
+     * Care, the session ID passed to write() can be different from the one previously
+     * received in read() when the session ID changed due to session_regenerate_id().
+     *
      * @see http://php.net/sessionhandlerinterface.write
      *
      * @param string $sessionId Session ID , see http://php.net/function.session-id
diff --git a/src/Symfony/Component/HttpFoundation/Session/Storage/Handler/PdoSessionHandler.php b/src/Symfony/Component/HttpFoundation/Session/Storage/Handler/PdoSessionHandler.php
index c791fae1c275..694f99b8dd62 100644
--- a/src/Symfony/Component/HttpFoundation/Session/Storage/Handler/PdoSessionHandler.php
+++ b/src/Symfony/Component/HttpFoundation/Session/Storage/Handler/PdoSessionHandler.php
@@ -14,11 +14,20 @@
 /**
  * Session handler using a PDO connection to read and write data.
  *
+ * It works with MySQL, PostgreSQL, Oracle, SQL Server and SQLite and implements
+ * locking of sessions to prevent loss of data by concurrent access to the same session.
+ * This means requests for the same session will wait until the other one finished.
+ * PHPs internal files session handler also works this way.
+ *
  * Session data is a binary string that can contain non-printable characters like the null byte.
  * For this reason this handler base64 encodes the data to be able to save it in a character column.
  *
- * This version of the PdoSessionHandler does NOT implement locking. So concurrent requests to the
- * same session can result in data loss due to race conditions.
+ * Attention: Since SQLite does not support row level locks but locks the whole database,
+ * it means only one session can be accessed at a time. Even different sessions would wait
+ * for another to finish. So saving session in SQLite should only be considered for
+ * development or prototypes.
+ *
+ * @see http://php.net/sessionhandlerinterface
  *
  * @author Fabien Potencier <fabien@symfony.com>
  * @author Michael Williams <michael.williams@funsational.com>
@@ -31,6 +40,11 @@ class PdoSessionHandler implements \SessionHandlerInterface
      */
     private $pdo;

+    /**
+     * @var string Database driver
+     */
+    private $driver;
+
     /**
      * @var string Table name
      */
@@ -51,39 +65,50 @@ class PdoSessionHandler implements \SessionHandlerInterface
      */
     private $timeCol;

+    /**
+     * @var bool Whether a transaction is active
+     */
+    private $inTransaction = false;
+
+    /**
+     * @var bool Whether gc() has been called
+     */
+    private $gcCalled = false;
+
     /**
      * Constructor.
      *
      * List of available options:
-     *  * db_table: The name of the table [required]
+     *  * db_table: The name of the table [default: sessions]
      *  * db_id_col: The column where to store the session id [default: sess_id]
      *  * db_data_col: The column where to store the session data [default: sess_data]
      *  * db_time_col: The column where to store the timestamp [default: sess_time]
      *
-     * @param \PDO  $pdo       A \PDO instance
-     * @param array $dbOptions An associative array of DB options
+     * @param \PDO  $pdo     A \PDO instance
+     * @param array $options An associative array of DB options
      *
-     * @throws \InvalidArgumentException When "db_table" option is not provided
+     * @throws \InvalidArgumentException When PDO error mode is not PDO::ERRMODE_EXCEPTION
      */
-    public function __construct(\PDO $pdo, array $dbOptions = array())
+    public function __construct(\PDO $pdo, array $options = array())
     {
-        if (!array_key_exists('db_table', $dbOptions)) {
-            throw new \InvalidArgumentException('You must provide the "db_table" option for a PdoSessionStorage.');
-        }
         if (\PDO::ERRMODE_EXCEPTION !== $pdo->getAttribute(\PDO::ATTR_ERRMODE)) {
             throw new \InvalidArgumentException(sprintf('"%s" requires PDO error mode attribute be set to throw Exceptions (i.e. $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION))', __CLASS__));
         }
+
         $this->pdo = $pdo;
-        $dbOptions = array_merge(array(
+        $this->driver = $this->pdo->getAttribute(\PDO::ATTR_DRIVER_NAME);
+
+        $options = array_replace(array(
+            'db_table'    => 'sessions',
             'db_id_col'   => 'sess_id',
             'db_data_col' => 'sess_data',
             'db_time_col' => 'sess_time',
-        ), $dbOptions);
+        ), $options);

-        $this->table = $dbOptions['db_table'];
-        $this->idCol = $dbOptions['db_id_col'];
-        $this->dataCol = $dbOptions['db_data_col'];
-        $this->timeCol = $dbOptions['db_time_col'];
+        $this->table = $options['db_table'];
+        $this->idCol = $options['db_id_col'];
+        $this->dataCol = $options['db_data_col'];
+        $this->timeCol = $options['db_time_col'];
     }

     /**
@@ -91,34 +116,45 @@ public function __construct(\PDO $pdo, array $dbOptions = array())
      */
     public function open($savePath, $sessionName)
     {
-        return true;
-    }
+        $this->gcCalled = false;

-    /**
-     * {@inheritdoc}
-     */
-    public function close()
-    {
         return true;
     }

     /**
      * {@inheritdoc}
      */
-    public function destroy($sessionId)
+    public function read($sessionId)
     {
-        // delete the record associated with this id
-        $sql = "DELETE FROM $this->table WHERE $this->idCol = :id";
+        $this->beginTransaction();

         try {
+            $this->lockSession($sessionId);
+
+            // We need to make sure we do not return session data that is already considered garbage according
+            // to the session.gc_maxlifetime setting because gc() is called after read() and only sometimes.
+            $maxlifetime = (int) ini_get('session.gc_maxlifetime');
+
+            $sql = "SELECT $this->dataCol FROM $this->table WHERE $this->idCol = :id AND $this->timeCol > :time";
+
             $stmt = $this->pdo->prepare($sql);
             $stmt->bindParam(':id', $sessionId, \PDO::PARAM_STR);
+            $stmt->bindValue(':time', time() - $maxlifetime, \PDO::PARAM_INT);
             $stmt->execute();
+
+            // We use fetchAll instead of fetchColumn to make sure the DB cursor gets closed
+            $sessionRows = $stmt->fetchAll(\PDO::FETCH_NUM);
+
+            if ($sessionRows) {
+                return base64_decode($sessionRows[0][0]);
+            }
+
+            return '';
         } catch (\PDOException $e) {
-            throw new \RuntimeException(sprintf('PDOException was thrown when trying to delete a session: %s', $e->getMessage()), 0, $e);
-        }
+            $this->rollback();

-        return true;
+            throw $e;
+        }
     }

     /**
@@ -126,16 +162,9 @@ public function destroy($sessionId)
      */
     public function gc($maxlifetime)
     {
-        // delete the session records that have expired
-        $sql = "DELETE FROM $this->table WHERE $this->timeCol < :time";
-
-        try {
-            $stmt = $this->pdo->prepare($sql);
-            $stmt->bindValue(':time', time() - $maxlifetime, \PDO::PARAM_INT);
-            $stmt->execute();
-        } catch (\PDOException $e) {
-            throw new \RuntimeException(sprintf('PDOException was thrown when trying to delete expired sessions: %s', $e->getMessage()), 0, $e);
-        }
+        // We delay gc() to close() so that it is executed outside the transactional and blocking read-write process.
+        // This way, pruning expired sessions does not block them from being started while the current session is used.
+        $this->gcCalled = true;

         return true;
     }
@@ -143,26 +172,22 @@ public function gc($maxlifetime)
     /**
      * {@inheritdoc}
      */
-    public function read($sessionId)
+    public function destroy($sessionId)
     {
-        $sql = "SELECT $this->dataCol FROM $this->table WHERE $this->idCol = :id";
+        // delete the record associated with this id
+        $sql = "DELETE FROM $this->table WHERE $this->idCol = :id";

         try {
             $stmt = $this->pdo->prepare($sql);
             $stmt->bindParam(':id', $sessionId, \PDO::PARAM_STR);
             $stmt->execute();
-
-            // We use fetchAll instead of fetchColumn to make sure the DB cursor gets closed
-            $sessionRows = $stmt->fetchAll(\PDO::FETCH_NUM);
-
-            if ($sessionRows) {
-                return base64_decode($sessionRows[0][0]);
-            }
-
-            return '';
         } catch (\PDOException $e) {
-            throw new \RuntimeException(sprintf('PDOException was thrown when trying to read the session data: %s', $e->getMessage()), 0, $e);
+            $this->rollback();
+
+            throw $e;
         }
+
+        return true;
     }

     /**
@@ -172,8 +197,12 @@ public function write($sessionId, $data)
     {
         $encoded = base64_encode($data);

+        // The session ID can be different from the one previously received in read()
+        // when the session ID changed due to session_regenerate_id(). So we have to
+        // do an insert or update even if we created a row in read() for locking.
+        // We use a single MERGE SQL query when supported by the database.
+
         try {
-            // We use a single MERGE SQL query when supported by the database.
             $mergeSql = $this->getMergeSql();

             if (null !== $mergeSql) {
@@ -199,6 +228,8 @@ public function write($sessionId, $data)
             // error and re-execute the update. This is similar to a serializable transaction with retry logic
             // on serialization failures but without the overhead and without possible false positives due to
             // longer gap locking.
+            // Since we have a lock on the session, the above case should not happen. And if it's a regenerated
+            // session ID it should be unique anyway.
             if (!$updateStmt->rowCount()) {
                 try {
                     $insertStmt = $this->pdo->prepare(
@@ -218,12 +249,154 @@ public function write($sessionId, $data)
                 }
             }
         } catch (\PDOException $e) {
-            throw new \RuntimeException(sprintf('PDOException was thrown when trying to write the session data: %s', $e->getMessage()), 0, $e);
+            $this->rollback();
+
+            throw $e;
         }

         return true;
     }

+    /**
+     * {@inheritdoc}
+     */
+    public function close()
+    {
+        $this->commit();
+
+        if ($this->gcCalled) {
+            $maxlifetime = (int) ini_get('session.gc_maxlifetime');
+
+            // delete the session records that have expired
+            $sql = "DELETE FROM $this->table WHERE $this->timeCol <= :time";
+
+            $stmt = $this->pdo->prepare($sql);
+            $stmt->bindValue(':time', time() - $maxlifetime, \PDO::PARAM_INT);
+            $stmt->execute();
+        }
+
+        return true;
+    }
+
+    /**
+     * Helper method to begin a transaction.
+     *
+     * Since SQLite does not support row level locks, we have to acquire a reserved lock
+     * on the database immediately. Because of https://bugs.php.net/42766 we have to create
+     * such a transaction manually which also means we cannot use PDO::commit or
+     * PDO::rollback or PDO::inTransaction for SQLite.
+     */
+    private function beginTransaction()
+    {
+        if ($this->inTransaction) {
+            $this->rollback();
+
+            throw new \BadMethodCallException(
+                'Session handler methods have been invoked in wrong sequence. ' .
+                'Expected sequence: open() -> read() -> destroy() / write() -> close()');
+        }
+
+        if ('sqlite' === $this->driver) {
+            $this->pdo->exec('BEGIN IMMEDIATE TRANSACTION');
+        } else {
+            $this->pdo->beginTransaction();
+        }
+        $this->inTransaction = true;
+    }
+
+    /**
+     * Helper method to commit a transaction.
+     */
+    private function commit()
+    {
+        if ($this->inTransaction) {
+            try {
+                // commit read-write transaction which also releases the lock
+                if ('sqlite' === $this->driver) {
+                    $this->pdo->exec('COMMIT');
+                } else {
+                    $this->pdo->commit();
+                }
+                $this->inTransaction = false;
+            } catch (\PDOException $e) {
+                $this->rollback();
+
+                throw $e;
+            }
+        }
+    }
+
+    /**
+     * Helper method to rollback a transaction.
+     */
+    private function rollback()
+    {
+        // We only need to rollback if we are in a transaction. Otherwise the resulting
+        // error would hide the real problem why rollback was called. We might not be
+        // in a transaction when two callbacks (e.g. destroy and write) are invoked that
+        // both fail.
+        if ($this->inTransaction) {
+            if ('sqlite' === $this->driver) {
+                $this->pdo->exec('ROLLBACK');
+            } else {
+                $this->pdo->rollback();
+            }
+            $this->inTransaction = false;
+        }
+    }
+
+    /**
+     * Exclusively locks the row so other concurrent requests on the same session will block.
+     *
+     * This prevents loss of data by keeping the data consistent between read() and write().
+     * We do not use SELECT FOR UPDATE because it does not lock non-existent rows. And a following
+     * INSERT when not found can result in a deadlock for one connection.
+     *
+     * @param string $sessionId Session ID
+     */
+    private function lockSession($sessionId)
+    {
+        switch ($this->driver) {
+            case 'mysql':
+                // will also lock the row when actually nothing got updated (id = id)
+                $sql = "INSERT INTO $this->table ($this->idCol, $this->dataCol, $this->timeCol) VALUES (:id, :data, :time) " .
+                    "ON DUPLICATE KEY UPDATE $this->idCol = $this->idCol";
+                break;
+            case 'oci':
+                // DUAL is Oracle specific dummy table
+                $sql = "MERGE INTO $this->table USING DUAL ON ($this->idCol = :id) " .
+                    "WHEN NOT MATCHED THEN INSERT ($this->idCol, $this->dataCol, $this->timeCol) VALUES (:id, :data, :time) " .
+                    "WHEN MATCHED THEN UPDATE SET $this->idCol = $this->idCol";
+                break;
+            // todo: implement locking for SQL Server < 2008
+            case 'sqlsrv' === $this->driver && version_compare($this->pdo->getAttribute(\PDO::ATTR_SERVER_VERSION), '10', '>='):
+                // MS SQL Server requires MERGE be terminated by semicolon
+                $sql = "MERGE INTO $this->table WITH (HOLDLOCK) USING (SELECT 1 AS dummy) AS src ON ($this->idCol = :id) " .
+                    "WHEN NOT MATCHED THEN INSERT ($this->idCol, $this->dataCol, $this->timeCol) VALUES (:id, :data, :time) " .
+                    "WHEN MATCHED THEN UPDATE SET $this->idCol = $this->idCol;";
+                break;
+            case 'pgsql':
+                // obtain an exclusive transaction level advisory lock
+                $sql = 'SELECT pg_advisory_xact_lock(:lock_id)';
+                $stmt = $this->pdo->prepare($sql);
+                $stmt->bindValue(':lock_id', hexdec(substr($sessionId, 0, 15)), \PDO::PARAM_INT);
+                $stmt->execute();
+
+                return;
+            default:
+                return;
+        }
+
+        // We create a DML lock for the session by inserting empty data or updating the row.
+        // This is safer than an application level advisory lock because it also prevents concurrent modification
+        // of the session from other parts of the application.
+        $stmt = $this->pdo->prepare($sql);
+        $stmt->bindParam(':id', $sessionId, \PDO::PARAM_STR);
+        $stmt->bindValue(':data', '', \PDO::PARAM_STR);
+        $stmt->bindValue(':time', time(), \PDO::PARAM_INT);
+        $stmt->execute();
+    }
+
     /**
      * Returns a merge/upsert (i.e. insert or update) SQL query when supported by the database.
      *
@@ -231,9 +404,7 @@ public function write($sessionId, $data)
      */
     private function getMergeSql()
     {
-        $driver = $this->pdo->getAttribute(\PDO::ATTR_DRIVER_NAME);
-
-        switch ($driver) {
+        switch ($this->driver) {
             case 'mysql':
                 return "INSERT INTO $this->table ($this->idCol, $this->dataCol, $this->timeCol) VALUES (:id, :data, :time) " .
                     "ON DUPLICATE KEY UPDATE $this->dataCol = VALUES($this->dataCol), $this->timeCol = VALUES($this->timeCol)";
@@ -242,7 +413,7 @@ private function getMergeSql()
                 return "MERGE INTO $this->table USING DUAL ON ($this->idCol = :id) " .
                     "WHEN NOT MATCHED THEN INSERT ($this->idCol, $this->dataCol, $this->timeCol) VALUES (:id, :data, :time) " .
                     "WHEN MATCHED THEN UPDATE SET $this->dataCol = :data, $this->timeCol = :time";
-            case 'sqlsrv' === $driver && version_compare($this->pdo->getAttribute(\PDO::ATTR_SERVER_VERSION), '10', '>='):
+            case 'sqlsrv' === $this->driver && version_compare($this->pdo->getAttribute(\PDO::ATTR_SERVER_VERSION), '10', '>='):
                 // MERGE is only available since SQL Server 2008 and must be terminated by semicolon
                 // It also requires HOLDLOCK according to http://weblogs.sqlteam.com/dang/archive/2009/01/31/UPSERT-Race-Condition-With-MERGE.aspx
                 return "MERGE INTO $this->table WITH (HOLDLOCK) USING (SELECT 1 AS dummy) AS src ON ($this->idCol = :id) " .
diff --git a/src/Symfony/Component/HttpFoundation/Tests/BinaryFileResponseTest.php b/src/Symfony/Component/HttpFoundation/Tests/BinaryFileResponseTest.php
index d7d1b03c3c76..397192b8853a 100644
--- a/src/Symfony/Component/HttpFoundation/Tests/BinaryFileResponseTest.php
+++ b/src/Symfony/Component/HttpFoundation/Tests/BinaryFileResponseTest.php
@@ -14,6 +14,7 @@
 use Symfony\Component\HttpFoundation\BinaryFileResponse;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\ResponseHeaderBag;
+use Symfony\Component\HttpFoundation\Resources\stubs\FakeFile;

 class BinaryFileResponseTest extends ResponseTestCase
 {
@@ -179,18 +180,7 @@ public function testXAccelMapping($realpath, $mapping, $virtual)
         $request->headers->set('X-Sendfile-Type', 'X-Accel-Redirect');
         $request->headers->set('X-Accel-Mapping', $mapping);

-        $file = $this->getMockBuilder('Symfony\Component\HttpFoundation\File\File')
-            ->setConstructorArgs(array(__DIR__.'/File/Fixtures/test'))
-            ->getMock();
-        $file->expects($this->any())
-             ->method('getRealPath')
-             ->will($this->returnValue($realpath));
-        $file->expects($this->any())
-             ->method('isReadable')
-             ->will($this->returnValue(true));
-        $file->expects($this->any())
-             ->method('getMTime')
-             ->will($this->returnValue(time()));
+        $file = new FakeFile($realpath, __DIR__.'/File/Fixtures/test');

         BinaryFileResponse::trustXSendFileTypeHeader();
         $response = new BinaryFileResponse($file);
diff --git a/src/Symfony/Component/HttpFoundation/Tests/ParameterBagTest.php b/src/Symfony/Component/HttpFoundation/Tests/ParameterBagTest.php
index 7f4f243b481b..0492e2de3168 100644
--- a/src/Symfony/Component/HttpFoundation/Tests/ParameterBagTest.php
+++ b/src/Symfony/Component/HttpFoundation/Tests/ParameterBagTest.php
@@ -251,4 +251,17 @@ public function testCount()

         $this->assertEquals(count($parameters), count($bag));
     }
+
+    /**
+     * @covers Symfony\Component\HttpFoundation\ParameterBag::getBoolean
+     */
+    public function testGetBoolean()
+    {
+        $parameters = array('string_true' => 'true', 'string_false' => 'false');
+        $bag = new ParameterBag($parameters);
+
+        $this->assertTrue($bag->getBoolean('string_true'), '->getBoolean() gets the string true as boolean true');
+        $this->assertFalse($bag->getBoolean('string_false'), '->getBoolean() gets the string false as boolean false');
+        $this->assertFalse($bag->getBoolean('unknown'), '->getBoolean() returns false if a parameter is not defined');
+    }
 }
diff --git a/src/Symfony/Component/HttpFoundation/Tests/RequestMatcherTest.php b/src/Symfony/Component/HttpFoundation/Tests/RequestMatcherTest.php
index 0e1a0f5caf36..d4b1dbc20b81 100644
--- a/src/Symfony/Component/HttpFoundation/Tests/RequestMatcherTest.php
+++ b/src/Symfony/Component/HttpFoundation/Tests/RequestMatcherTest.php
@@ -43,6 +43,25 @@ public function testMethodFixtures()
         );
     }

+    public function testScheme()
+    {
+        $httpRequest = $request = $request = Request::create('');
+        $httpsRequest = $request = $request = Request::create('', 'get', array(), array(), array(), array('HTTPS' => 'on'));
+
+        $matcher = new RequestMatcher();
+        $matcher->matchScheme('https');
+        $this->assertFalse($matcher->matches($httpRequest));
+        $this->assertTrue($matcher->matches($httpsRequest));
+
+        $matcher->matchScheme('http');
+        $this->assertFalse($matcher->matches($httpsRequest));
+        $this->assertTrue($matcher->matches($httpRequest));
+
+        $matcher = new RequestMatcher();
+        $this->assertTrue($matcher->matches($httpsRequest));
+        $this->assertTrue($matcher->matches($httpRequest));
+    }
+
     /**
      * @dataProvider testHostFixture
      */
@@ -68,7 +87,8 @@ public function testHostFixture()
             array('.*\.example\.COM', true),
             array('\.example\.COM$', true),
             array('^.*\.example\.COM$', true),
-            array('.*\.sensio\.COM', false),        );
+            array('.*\.sensio\.COM', false),
+        );
     }

     public function testPath()
diff --git a/src/Symfony/Component/HttpFoundation/Tests/Session/Storage/Handler/PdoSessionHandlerTest.php b/src/Symfony/Component/HttpFoundation/Tests/Session/Storage/Handler/PdoSessionHandlerTest.php
index 1438102f84c2..41b2e753c510 100644
--- a/src/Symfony/Component/HttpFoundation/Tests/Session/Storage/Handler/PdoSessionHandlerTest.php
+++ b/src/Symfony/Component/HttpFoundation/Tests/Session/Storage/Handler/PdoSessionHandlerTest.php
@@ -29,74 +29,108 @@ protected function setUp()
         $this->pdo->exec($sql);
     }

-    public function testIncompleteOptions()
-    {
-        $this->setExpectedException('InvalidArgumentException');
-        $storage = new PdoSessionHandler($this->pdo, array());
-    }
-
+    /**
+     * @expectedException \InvalidArgumentException
+     */
     public function testWrongPdoErrMode()
     {
-        $pdo = new \PDO('sqlite::memory:');
-        $pdo->setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_SILENT);
-        $pdo->exec('CREATE TABLE sessions (sess_id VARCHAR(128) PRIMARY KEY, sess_data TEXT, sess_time INTEGER)');
+        $this->pdo->setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_SILENT);

-        $this->setExpectedException('InvalidArgumentException');
-        $storage = new PdoSessionHandler($pdo, array('db_table' => 'sessions'));
+        $storage = new PdoSessionHandler($this->pdo);
     }

-    public function testWrongTableOptionsWrite()
+    /**
+     * @expectedException \RuntimeException
+     */
+    public function testInexistentTable()
     {
-        $storage = new PdoSessionHandler($this->pdo, array('db_table' => 'bad_name'));
-        $this->setExpectedException('RuntimeException');
-        $storage->write('foo', 'bar');
+        $storage = new PdoSessionHandler($this->pdo, array('db_table' => 'inexistent_table'));
+        $storage->open('', 'sid');
+        $storage->read('id');
+        $storage->write('id', 'data');
+        $storage->close();
     }

-    public function testWrongTableOptionsRead()
+    public function testReadWriteRead()
     {
-        $storage = new PdoSessionHandler($this->pdo, array('db_table' => 'bad_name'));
-        $this->setExpectedException('RuntimeException');
-        $storage->read('foo', 'bar');
+        $storage = new PdoSessionHandler($this->pdo);
+        $storage->open('', 'sid');
+        $this->assertSame('', $storage->read('id'), 'New session returns empty string data');
+        $storage->write('id', 'data');
+        $storage->close();
+
+        $storage->open('', 'sid');
+        $this->assertSame('data', $storage->read('id'), 'Written value can be read back correctly');
+        $storage->close();
     }

-    public function testWriteRead()
+    /**
+     * Simulates session_regenerate_id(true) which will require an INSERT or UPDATE (replace)
+     */
+    public function testWriteDifferentSessionIdThanRead()
     {
-        $storage = new PdoSessionHandler($this->pdo, array('db_table' => 'sessions'));
-        $storage->write('foo', 'bar');
-        $this->assertEquals('bar', $storage->read('foo'), 'written value can be read back correctly');
+        $storage = new PdoSessionHandler($this->pdo);
+        $storage->open('', 'sid');
+        $storage->read('id');
+        $storage->destroy('id');
+        $storage->write('new_id', 'data_of_new_session_id');
+        $storage->close();
+
+        $storage->open('', 'sid');
+        $this->assertSame('data_of_new_session_id', $storage->read('new_id'), 'Data of regenerated session id is available');
+        $storage->close();
     }

-    public function testMultipleInstances()
+    /**
+     * @expectedException \BadMethodCallException
+     */
+    public function testWrongUsage()
     {
-        $storage1 = new PdoSessionHandler($this->pdo, array('db_table' => 'sessions'));
-        $storage1->write('foo', 'bar');
-
-        $storage2 = new PdoSessionHandler($this->pdo, array('db_table' => 'sessions'));
-        $this->assertEquals('bar', $storage2->read('foo'), 'values persist between instances');
+        $storage = new PdoSessionHandler($this->pdo);
+        $storage->open('', 'sid');
+        $storage->read('id');
+        $storage->read('id');
     }

     public function testSessionDestroy()
     {
-        $storage = new PdoSessionHandler($this->pdo, array('db_table' => 'sessions'));
-        $storage->write('foo', 'bar');
-        $this->assertCount(1, $this->pdo->query('SELECT * FROM sessions')->fetchAll());
-
-        $storage->destroy('foo');
-
-        $this->assertCount(0, $this->pdo->query('SELECT * FROM sessions')->fetchAll());
+        $storage = new PdoSessionHandler($this->pdo);
+
+        $storage->open('', 'sid');
+        $storage->read('id');
+        $storage->write('id', 'data');
+        $storage->close();
+        $this->assertEquals(1, $this->pdo->query('SELECT COUNT(*) FROM sessions')->fetchColumn());
+
+        $storage->open('', 'sid');
+        $storage->read('id');
+        $storage->destroy('id');
+        $storage->close();
+        $this->assertEquals(0, $this->pdo->query('SELECT COUNT(*) FROM sessions')->fetchColumn());
+
+        $storage->open('', 'sid');
+        $this->assertSame('', $storage->read('id'), 'Destroyed session returns empty string');
+        $storage->close();
     }

     public function testSessionGC()
     {
-        $storage = new PdoSessionHandler($this->pdo, array('db_table' => 'sessions'));
-
-        $storage->write('foo', 'bar');
-        $storage->write('baz', 'bar');
-
-        $this->assertCount(2, $this->pdo->query('SELECT * FROM sessions')->fetchAll());
-
-        $storage->gc(-1);
-        $this->assertCount(0, $this->pdo->query('SELECT * FROM sessions')->fetchAll());
+        $previousLifeTime = ini_set('session.gc_maxlifetime', 0);
+        $storage = new PdoSessionHandler($this->pdo);
+
+        $storage->open('', 'sid');
+        $storage->read('id');
+        $storage->write('id', 'data');
+        $storage->close();
+        $this->assertEquals(1, $this->pdo->query('SELECT COUNT(*) FROM sessions')->fetchColumn());
+
+        $storage->open('', 'sid');
+        $this->assertSame('', $storage->read('id'), 'Session already considered garbage, so not returning data even if it is not pruned yet');
+        $storage->gc(0);
+        $storage->close();
+        $this->assertEquals(0, $this->pdo->query('SELECT COUNT(*) FROM sessions')->fetchColumn());
+
+        ini_set('session.gc_maxlifetime', $previousLifeTime);
     }

     public function testGetConnection()
diff --git a/src/Symfony/Component/HttpFoundation/composer.json b/src/Symfony/Component/HttpFoundation/composer.json
index db57eb563ebf..25294adb7944 100644
--- a/src/Symfony/Component/HttpFoundation/composer.json
+++ b/src/Symfony/Component/HttpFoundation/composer.json
@@ -29,7 +29,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Component/HttpKernel/CHANGELOG.md b/src/Symfony/Component/HttpKernel/CHANGELOG.md
index 2b2e827d979e..4d0b6149fd8f 100644
--- a/src/Symfony/Component/HttpKernel/CHANGELOG.md
+++ b/src/Symfony/Component/HttpKernel/CHANGELOG.md
@@ -1,6 +1,11 @@
 CHANGELOG
 =========

+2.6.0
+-----
+
+ * deprecated `Symfony\Component\HttpKernel\EventListener\ErrorsLoggerListener`, use `Symfony\Component\HttpKernel\EventListener\DebugHandlersListener` instead
+
 2.5.0
 -----

diff --git a/src/Symfony/Component/HttpKernel/DataCollector/LoggerDataCollector.php b/src/Symfony/Component/HttpKernel/DataCollector/LoggerDataCollector.php
index 48cde6695b2d..0d1decda3a01 100644
--- a/src/Symfony/Component/HttpKernel/DataCollector/LoggerDataCollector.php
+++ b/src/Symfony/Component/HttpKernel/DataCollector/LoggerDataCollector.php
@@ -11,7 +11,6 @@

 namespace Symfony\Component\HttpKernel\DataCollector;

-use Symfony\Component\Debug\ErrorHandler;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
 use Symfony\Component\HttpKernel\Log\DebugLoggerInterface;
@@ -99,7 +98,11 @@ public function getName()
     private function sanitizeLogs($logs)
     {
         foreach ($logs as $i => $log) {
-            $logs[$i]['context'] = $this->sanitizeContext($log['context']);
+            $context = $this->sanitizeContext($log['context']);
+            if (isset($context['type'], $context['level']) && !($context['type'] & $context['level'])) {
+                $context['scream'] = true;
+            }
+            $logs[$i]['context'] = $context;
         }

         return $logs;
@@ -145,10 +148,10 @@ private function computeErrorsCount()
                 );
             }

-            if (isset($log['context']['type'])) {
-                if (ErrorHandler::TYPE_DEPRECATION === $log['context']['type']) {
+            if (isset($log['context']['type'], $log['context']['level'])) {
+                if (E_DEPRECATED === $log['context']['type'] || E_USER_DEPRECATED === $log['context']['type']) {
                     ++$count['deprecation_count'];
-                } elseif (isset($log['context']['scream'])) {
+                } elseif (!($log['context']['type'] & $log['context']['level'])) {
                     ++$count['scream_count'];
                 }
             }
diff --git a/src/Symfony/Component/HttpKernel/DataCollector/Util/ValueExporter.php b/src/Symfony/Component/HttpKernel/DataCollector/Util/ValueExporter.php
index 31b60e6e40c9..1d78fb5c0e6a 100644
--- a/src/Symfony/Component/HttpKernel/DataCollector/Util/ValueExporter.php
+++ b/src/Symfony/Component/HttpKernel/DataCollector/Util/ValueExporter.php
@@ -28,6 +28,10 @@ class ValueExporter
     public function exportValue($value, $depth = 1, $deep = false)
     {
         if (is_object($value)) {
+            if ($value instanceof \DateTime || $value instanceof \DateTimeInterface) {
+                return sprintf('Object(%s) - %s', get_class($value), $value->format(\DateTime::ISO8601));
+            }
+
             return sprintf('Object(%s)', get_class($value));
         }

diff --git a/src/Symfony/Component/HttpKernel/EventListener/DebugHandlersListener.php b/src/Symfony/Component/HttpKernel/EventListener/DebugHandlersListener.php
index 4b7baf4ee5fb..3625c08c818d 100644
--- a/src/Symfony/Component/HttpKernel/EventListener/DebugHandlersListener.php
+++ b/src/Symfony/Component/HttpKernel/EventListener/DebugHandlersListener.php
@@ -11,33 +11,72 @@

 namespace Symfony\Component\HttpKernel\EventListener;

-use Symfony\Component\Debug\ExceptionHandler;
+use Psr\Log\LoggerInterface;
+use Symfony\Component\Debug\ErrorHandler;
+use Symfony\Component\Debug\AbstractExceptionHandler;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
- * Configures the ExceptionHandler.
+ * Configures errors and exceptions handlers.
  *
  * @author Nicolas Grekas <p@tchwork.com>
  */
 class DebugHandlersListener implements EventSubscriberInterface
 {
     private $exceptionHandler;
+    private $logger;
+    private $levels;
+    private $debug;

-    public function __construct($exceptionHandler)
+    /**
+     * @param callable             $exceptionHandler A handler that will be called on Exception
+     * @param LoggerInterface|null $logger           A PSR-3 logger
+     * @param array|int            $levels           An array map of E_* to LogLevel::* or an integer bit field of E_* constants
+     * @param bool                 $debug            Enables/disables debug mode
+     */
+    public function __construct($exceptionHandler, LoggerInterface $logger = null, $levels = null, $debug = true)
     {
         if (is_callable($exceptionHandler)) {
             $this->exceptionHandler = $exceptionHandler;
         }
+        $this->logger = $logger;
+        $this->levels = $levels;
+        $this->debug = $debug;
     }

     public function configure()
     {
+        if ($this->logger) {
+            $handler = set_error_handler('var_dump', 0);
+            $handler = is_array($handler) ? $handler[0] : null;
+            restore_error_handler();
+            if ($handler instanceof ErrorHandler) {
+                if ($this->debug) {
+                    $handler->throwAt(-1);
+                }
+                $handler->setDefaultLogger($this->logger, $this->levels);
+                if (is_array($this->levels)) {
+                    $scream = 0;
+                    foreach ($this->levels as $type => $log) {
+                        $scream |= $type;
+                    }
+                    $this->levels = $scream;
+                }
+                $handler->screamAt($this->levels);
+            }
+            $this->logger = $this->levels = null;
+        }
         if ($this->exceptionHandler) {
             $handler = set_exception_handler('var_dump');
             $handler = is_array($handler) ? $handler[0] : null;
             restore_exception_handler();
-            if ($handler instanceof ExceptionHandler) {
+            if ($handler instanceof ErrorHandler) {
+                $h = $handler->setExceptionHandler('var_dump') ?: $this->exceptionHandler;
+                $handler->setExceptionHandler($h);
+                $handler = is_array($h) ? $h[0] : null;
+            }
+            if ($handler instanceof AbstractExceptionHandler) {
                 $handler->setHandler($this->exceptionHandler);
             }
             $this->exceptionHandler = null;
diff --git a/src/Symfony/Component/HttpKernel/EventListener/ErrorsLoggerListener.php b/src/Symfony/Component/HttpKernel/EventListener/ErrorsLoggerListener.php
index 025b6475a463..d5400b7d6ee0 100644
--- a/src/Symfony/Component/HttpKernel/EventListener/ErrorsLoggerListener.php
+++ b/src/Symfony/Component/HttpKernel/EventListener/ErrorsLoggerListener.php
@@ -21,6 +21,8 @@
  *
  * @author Colin Frei <colin@colinfrei.com>
  * @author Konstantin Myakshin <koc-dp@yandex.ru>
+ *
+ * @deprecated since 2.6, to be removed in 3.0. Use DebugHandlersListener instead.
  */
 class ErrorsLoggerListener implements EventSubscriberInterface
 {
diff --git a/src/Symfony/Component/HttpKernel/EventListener/ExceptionListener.php b/src/Symfony/Component/HttpKernel/EventListener/ExceptionListener.php
index 3450b6210ce0..b51a15cd7abb 100644
--- a/src/Symfony/Component/HttpKernel/EventListener/ExceptionListener.php
+++ b/src/Symfony/Component/HttpKernel/EventListener/ExceptionListener.php
@@ -114,6 +114,7 @@ protected function duplicateRequest(\Exception $exception, Request $request)
             '_controller' => $this->controller,
             'exception' => FlattenException::create($exception),
             'logger' => $this->logger instanceof DebugLoggerInterface ? $this->logger : null,
+            'original_request' => $request,
             // keep for BC -- as $format can be an argument of the controller callable
             // see src/Symfony/Bundle/TwigBundle/Controller/ExceptionController.php
             // @deprecated in 2.4, to be removed in 3.0
diff --git a/src/Symfony/Component/HttpKernel/Kernel.php b/src/Symfony/Component/HttpKernel/Kernel.php
index 694135bfe938..b5e3744de6f0 100644
--- a/src/Symfony/Component/HttpKernel/Kernel.php
+++ b/src/Symfony/Component/HttpKernel/Kernel.php
@@ -59,11 +59,11 @@ abstract class Kernel implements KernelInterface, TerminableInterface
     protected $startTime;
     protected $loadClassCache;

-    const VERSION         = '2.5.1-DEV';
-    const VERSION_ID      = '20501';
+    const VERSION         = '2.6.0-DEV';
+    const VERSION_ID      = '20600';
     const MAJOR_VERSION   = '2';
-    const MINOR_VERSION   = '5';
-    const RELEASE_VERSION = '1';
+    const MINOR_VERSION   = '6';
+    const RELEASE_VERSION = '0';
     const EXTRA_VERSION   = 'DEV';

     /**
diff --git a/src/Symfony/Component/HttpKernel/Tests/Controller/ControllerResolverTest.php b/src/Symfony/Component/HttpKernel/Tests/Controller/ControllerResolverTest.php
index 0631ab660eb5..ed769d24219e 100644
--- a/src/Symfony/Component/HttpKernel/Tests/Controller/ControllerResolverTest.php
+++ b/src/Symfony/Component/HttpKernel/Tests/Controller/ControllerResolverTest.php
@@ -11,8 +11,8 @@

 namespace Symfony\Component\HttpKernel\Tests\Controller;

+use Psr\Log\LoggerInterface;
 use Symfony\Component\HttpKernel\Controller\ControllerResolver;
-use Symfony\Component\HttpKernel\Tests\Logger;
 use Symfony\Component\HttpFoundation\Request;

 class ControllerResolverTest extends \PHPUnit_Framework_TestCase
@@ -21,7 +21,7 @@ public function testGetControllerWithoutControllerParameter()
     {
         $logger = $this->getMock('Psr\Log\LoggerInterface');
         $logger->expects($this->once())->method('warning')->with('Unable to look for the controller as the "_controller" parameter is missing');
-        $resolver = new ControllerResolver($logger);
+        $resolver = $this->createControllerResolver($logger);

         $request = Request::create('/');
         $this->assertFalse($resolver->getController($request), '->getController() returns false when the request has no _controller attribute');
@@ -29,7 +29,7 @@ public function testGetControllerWithoutControllerParameter()

     public function testGetControllerWithLambda()
     {
-        $resolver = new ControllerResolver();
+        $resolver = $this->createControllerResolver();

         $request = Request::create('/');
         $request->attributes->set('_controller', $lambda = function () {});
@@ -39,7 +39,7 @@ public function testGetControllerWithLambda()

     public function testGetControllerWithObjectAndInvokeMethod()
     {
-        $resolver = new ControllerResolver();
+        $resolver = $this->createControllerResolver();

         $request = Request::create('/');
         $request->attributes->set('_controller', $this);
@@ -49,7 +49,7 @@ public function testGetControllerWithObjectAndInvokeMethod()

     public function testGetControllerWithObjectAndMethod()
     {
-        $resolver = new ControllerResolver();
+        $resolver = $this->createControllerResolver();

         $request = Request::create('/');
         $request->attributes->set('_controller', array($this, 'controllerMethod1'));
@@ -59,7 +59,7 @@ public function testGetControllerWithObjectAndMethod()

     public function testGetControllerWithClassAndMethod()
     {
-        $resolver = new ControllerResolver();
+        $resolver = $this->createControllerResolver();

         $request = Request::create('/');
         $request->attributes->set('_controller', array('Symfony\Component\HttpKernel\Tests\Controller\ControllerResolverTest', 'controllerMethod4'));
@@ -69,7 +69,7 @@ public function testGetControllerWithClassAndMethod()

     public function testGetControllerWithObjectAndMethodAsString()
     {
-        $resolver = new ControllerResolver();
+        $resolver = $this->createControllerResolver();

         $request = Request::create('/');
         $request->attributes->set('_controller', 'Symfony\Component\HttpKernel\Tests\Controller\ControllerResolverTest::controllerMethod1');
@@ -79,7 +79,7 @@ public function testGetControllerWithObjectAndMethodAsString()

     public function testGetControllerWithClassAndInvokeMethod()
     {
-        $resolver = new ControllerResolver();
+        $resolver = $this->createControllerResolver();

         $request = Request::create('/');
         $request->attributes->set('_controller', 'Symfony\Component\HttpKernel\Tests\Controller\ControllerResolverTest');
@@ -92,7 +92,7 @@ public function testGetControllerWithClassAndInvokeMethod()
      */
     public function testGetControllerOnObjectWithoutInvokeMethod()
     {
-        $resolver = new ControllerResolver();
+        $resolver = $this->createControllerResolver();

         $request = Request::create('/');
         $request->attributes->set('_controller', new \stdClass());
@@ -101,7 +101,7 @@ public function testGetControllerOnObjectWithoutInvokeMethod()

     public function testGetControllerWithFunction()
     {
-        $resolver = new ControllerResolver();
+        $resolver = $this->createControllerResolver();

         $request = Request::create('/');
         $request->attributes->set('_controller', 'Symfony\Component\HttpKernel\Tests\Controller\some_controller_function');
@@ -115,7 +115,7 @@ public function testGetControllerWithFunction()
      */
     public function testGetControllerOnNonUndefinedFunction($controller)
     {
-        $resolver = new ControllerResolver();
+        $resolver = $this->createControllerResolver();

         $request = Request::create('/');
         $request->attributes->set('_controller', $controller);
@@ -134,7 +134,7 @@ public function getUndefinedControllers()

     public function testGetArguments()
     {
-        $resolver = new ControllerResolver();
+        $resolver = $this->createControllerResolver();

         $request = Request::create('/');
         $controller = array(new self(), 'testGetArguments');
@@ -207,6 +207,11 @@ public function testCreateControllerCanReturnAnyCallable()
         $mock->getController($request);
     }

+    protected function createControllerResolver(LoggerInterface $logger = null)
+    {
+        return new ControllerResolver($logger);
+    }
+
     public function __invoke($foo, $bar = null)
     {
     }
diff --git a/src/Symfony/Component/HttpKernel/Tests/DataCollector/LoggerDataCollectorTest.php b/src/Symfony/Component/HttpKernel/Tests/DataCollector/LoggerDataCollectorTest.php
index cdb06af9ffbb..86d88125305a 100644
--- a/src/Symfony/Component/HttpKernel/Tests/DataCollector/LoggerDataCollectorTest.php
+++ b/src/Symfony/Component/HttpKernel/Tests/DataCollector/LoggerDataCollectorTest.php
@@ -12,7 +12,6 @@
 namespace Symfony\Component\HttpKernel\Tests\DataCollector;

 use Symfony\Component\HttpKernel\DataCollector\LoggerDataCollector;
-use Symfony\Component\HttpKernel\Debug\ErrorHandler;

 class LoggerDataCollectorTest extends \PHPUnit_Framework_TestCase
 {
@@ -66,14 +65,20 @@ public function getCollectTestData()
             array(
                 1,
                 array(
-                    array('message' => 'foo', 'context' => array('type' => ErrorHandler::TYPE_DEPRECATION), 'priority' => 100, 'priorityName' => 'DEBUG'),
-                    array('message' => 'foo2', 'context' => array('type' => ErrorHandler::TYPE_DEPRECATION), 'priority' => 100, 'priorityName' => 'DEBUG'),
-                    array('message' => 'foo3', 'context' => array('type' => E_USER_WARNING, 'scream' => 0), 'priority' => 100, 'priorityName' => 'DEBUG'),
+                    array('message' => 'foo', 'context' => array('type' => E_DEPRECATED, 'level' => E_ALL), 'priority' => 100, 'priorityName' => 'DEBUG'),
+                    array('message' => 'foo2', 'context' => array('type' => E_USER_DEPRECATED, 'level' => E_ALL), 'priority' => 100, 'priorityName' => 'DEBUG'),
                 ),
                 null,
                 2,
+                0,
+                array(100 => array('count' => 2, 'name' => 'DEBUG')),
+            ),
+            array(
+                1,
+                array(array('message' => 'foo3', 'context' => array('type' => E_USER_WARNING, 'level' => 0), 'priority' => 100, 'priorityName' => 'DEBUG')),
+                array(array('message' => 'foo3', 'context' => array('type' => E_USER_WARNING, 'level' => 0, 'scream' => true), 'priority' => 100, 'priorityName' => 'DEBUG')),
+                0,
                 1,
-                array(100 => array('count' => 3, 'name' => 'DEBUG')),
             ),
         );
     }
diff --git a/src/Symfony/Component/HttpKernel/Tests/DataCollector/Util/ValueExporterTest.php b/src/Symfony/Component/HttpKernel/Tests/DataCollector/Util/ValueExporterTest.php
new file mode 100644
index 000000000000..a1c4c1324bda
--- /dev/null
+++ b/src/Symfony/Component/HttpKernel/Tests/DataCollector/Util/ValueExporterTest.php
@@ -0,0 +1,43 @@
+<?php
+
+/*
+ * This file is part of the Symfony package.
+ *
+ * (c) Fabien Potencier <fabien@symfony.com>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace Symfony\Component\HttpKernel\Tests\Util\DataCollector;
+
+use Symfony\Component\HttpKernel\DataCollector\Util\ValueExporter;
+
+class ValueExporterTest extends \PHPUnit_Framework_TestCase
+{
+    /**
+     * @var ValueExporter
+     */
+    private $valueExporter;
+
+    protected function setUp()
+    {
+        $this->valueExporter = new ValueExporter();
+    }
+
+    public function testDateTime()
+    {
+        $dateTime = new \DateTime('2014-06-10 07:35:40', new \DateTimeZone('UTC'));
+        $this->assertSame('Object(DateTime) - 2014-06-10T07:35:40+0000', $this->valueExporter->exportValue($dateTime));
+    }
+
+    public function testDateTimeImmutable()
+    {
+        if (!class_exists('DateTimeImmutable', false)) {
+            $this->markTestSkipped('Test skipped, class DateTimeImmutable does not exist.');
+        }
+
+        $dateTime = new \DateTimeImmutable('2014-06-10 07:35:40', new \DateTimeZone('UTC'));
+        $this->assertSame('Object(DateTimeImmutable) - 2014-06-10T07:35:40+0000', $this->valueExporter->exportValue($dateTime));
+    }
+}
diff --git a/src/Symfony/Component/HttpKernel/composer.json b/src/Symfony/Component/HttpKernel/composer.json
index 638a48b51606..e0e9ac1c20e3 100644
--- a/src/Symfony/Component/HttpKernel/composer.json
+++ b/src/Symfony/Component/HttpKernel/composer.json
@@ -19,7 +19,7 @@
         "php": ">=5.3.3",
         "symfony/event-dispatcher": "~2.5",
         "symfony/http-foundation": "~2.4",
-        "symfony/debug": "~2.5",
+        "symfony/debug": "~2.6",
         "psr/log": "~1.0"
     },
     "require-dev": {
@@ -49,7 +49,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Component/Intl/README.md b/src/Symfony/Component/Intl/README.md
index f5a4ca043244..60b2e3e42b29 100644
--- a/src/Symfony/Component/Intl/README.md
+++ b/src/Symfony/Component/Intl/README.md
@@ -22,4 +22,4 @@ You can run the unit tests with the following command:
     $ phpunit

 [0]: http://www.php.net/manual/en/intl.setup.php
-[1]: http://symfony.com/doc/2.5/components/intl.html
+[1]: http://symfony.com/doc/2.6/components/intl.html
diff --git a/src/Symfony/Component/Intl/composer.json b/src/Symfony/Component/Intl/composer.json
index 9be866e05fcb..9b7148166e5b 100644
--- a/src/Symfony/Component/Intl/composer.json
+++ b/src/Symfony/Component/Intl/composer.json
@@ -42,7 +42,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Component/Locale/composer.json b/src/Symfony/Component/Locale/composer.json
index 26015cea6ef8..a1dcfc0523f1 100644
--- a/src/Symfony/Component/Locale/composer.json
+++ b/src/Symfony/Component/Locale/composer.json
@@ -26,7 +26,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Component/OptionsResolver/composer.json b/src/Symfony/Component/OptionsResolver/composer.json
index b0e71ea2997a..f467e09b7fb5 100644
--- a/src/Symfony/Component/OptionsResolver/composer.json
+++ b/src/Symfony/Component/OptionsResolver/composer.json
@@ -25,7 +25,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Component/Process/ExecutableFinder.php b/src/Symfony/Component/Process/ExecutableFinder.php
index 5cc99c769205..44f1605fa956 100644
--- a/src/Symfony/Component/Process/ExecutableFinder.php
+++ b/src/Symfony/Component/Process/ExecutableFinder.php
@@ -53,7 +53,7 @@ public function addSuffix($suffix)
     public function find($name, $default = null, array $extraDirs = array())
     {
         if (ini_get('open_basedir')) {
-            $searchPath = explode(PATH_SEPARATOR, getenv('open_basedir'));
+            $searchPath = explode(PATH_SEPARATOR, ini_get('open_basedir'));
             $dirs = array();
             foreach ($searchPath as $path) {
                 if (is_dir($path)) {
diff --git a/src/Symfony/Component/Process/Pipes/AbstractPipes.php b/src/Symfony/Component/Process/Pipes/AbstractPipes.php
new file mode 100644
index 000000000000..d8b57d07a778
--- /dev/null
+++ b/src/Symfony/Component/Process/Pipes/AbstractPipes.php
@@ -0,0 +1,74 @@
+<?php
+
+/*
+ * This file is part of the Symfony package.
+ *
+ * (c) Fabien Potencier <fabien@symfony.com>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace Symfony\Component\Process\Pipes;
+
+/**
+ * @author Romain Neutron <imprec@gmail.com>
+ *
+ * @internal
+ */
+abstract class AbstractPipes implements PipesInterface
+{
+    /** @var array */
+    public $pipes = array();
+
+    /** @var string */
+    protected $inputBuffer = '';
+    /** @var resource|null */
+    protected $input;
+
+    /** @var bool */
+    private $blocked = true;
+
+    /**
+     * {@inheritdoc}
+     */
+    public function close()
+    {
+        foreach ($this->pipes as $pipe) {
+            fclose($pipe);
+        }
+        $this->pipes = array();
+    }
+
+    /**
+     * Returns true if a system call has been interrupted.
+     *
+     * @return bool
+     */
+    protected function hasSystemCallBeenInterrupted()
+    {
+        $lastError = error_get_last();
+
+        // stream_select returns false when the `select` system call is interrupted by an incoming signal
+        return isset($lastError['message']) && false !== stripos($lastError['message'], 'interrupted system call');
+    }
+
+    /**
+     * Unblocks streams
+     */
+    protected function unblock()
+    {
+        if (!$this->blocked) {
+            return;
+        }
+
+        foreach ($this->pipes as $pipe) {
+            stream_set_blocking($pipe, 0);
+        }
+        if (null !== $this->input) {
+            stream_set_blocking($this->input, 0);
+        }
+
+        $this->blocked = false;
+    }
+}
diff --git a/src/Symfony/Component/Process/Pipes/PipesInterface.php b/src/Symfony/Component/Process/Pipes/PipesInterface.php
new file mode 100644
index 000000000000..09d3f61d6ec9
--- /dev/null
+++ b/src/Symfony/Component/Process/Pipes/PipesInterface.php
@@ -0,0 +1,60 @@
+<?php
+
+/*
+ * This file is part of the Symfony package.
+ *
+ * (c) Fabien Potencier <fabien@symfony.com>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace Symfony\Component\Process\Pipes;
+
+/**
+ * PipesInterface manages descriptors and pipes for the use of proc_open.
+ *
+ * @author Romain Neutron <imprec@gmail.com>
+ *
+ * @internal
+ */
+interface PipesInterface
+{
+    const CHUNK_SIZE = 16384;
+
+    /**
+     * Returns an array of descriptors for the use of proc_open.
+     *
+     * @return array
+     */
+    public function getDescriptors();
+
+    /**
+     * Returns an array of filenames indexed by their related stream in case these pipes use temporary files.
+     *
+     * @return string[]
+     */
+    public function getFiles();
+
+    /**
+     * Reads data in file handles and pipes.
+     *
+     * @param bool $blocking Whether to use blocking calls or not.
+     * @param bool $close    Whether to close pipes if they've reached EOF.
+     *
+     * @return string[] An array of read data indexed by their fd.
+     */
+    public function readAndWrite($blocking, $close = false);
+
+    /**
+     * Returns if the current state has open file handles or pipes.
+     *
+     * @return bool
+     */
+    public function areOpen();
+
+    /**
+     * Closes file handles and pipes.
+     */
+    public function close();
+}
diff --git a/src/Symfony/Component/Process/Pipes/UnixPipes.php b/src/Symfony/Component/Process/Pipes/UnixPipes.php
new file mode 100644
index 000000000000..f6666fc9dffb
--- /dev/null
+++ b/src/Symfony/Component/Process/Pipes/UnixPipes.php
@@ -0,0 +1,214 @@
+<?php
+
+/*
+ * This file is part of the Symfony package.
+ *
+ * (c) Fabien Potencier <fabien@symfony.com>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace Symfony\Component\Process\Pipes;
+
+use Symfony\Component\Process\Process;
+
+/**
+ * UnixPipes implementation uses unix pipes as handles.
+ *
+ * @author Romain Neutron <imprec@gmail.com>
+ *
+ * @internal
+ */
+class UnixPipes extends AbstractPipes
+{
+    /** @var bool */
+    private $ttyMode;
+    /** @var bool */
+    private $ptyMode;
+    /** @var bool */
+    private $disableOutput;
+
+    public function __construct($ttyMode, $ptyMode, $input, $disableOutput)
+    {
+        $this->ttyMode = (bool) $ttyMode;
+        $this->ptyMode = (bool) $ptyMode;
+        $this->disableOutput = (bool) $disableOutput;
+
+        if (is_resource($input)) {
+            $this->input = $input;
+        } else {
+            $this->inputBuffer = (string) $input;
+        }
+    }
+
+    public function __destruct()
+    {
+        $this->close();
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function getDescriptors()
+    {
+        if ($this->disableOutput) {
+            $nullstream = fopen('/dev/null', 'c');
+
+            return array(
+                array('pipe', 'r'),
+                $nullstream,
+                $nullstream,
+            );
+        }
+
+        if ($this->ttyMode) {
+            return array(
+                array('file', '/dev/tty', 'r'),
+                array('file', '/dev/tty', 'w'),
+                array('file', '/dev/tty', 'w'),
+            );
+        }
+
+        if ($this->ptyMode && Process::isPtySupported()) {
+            return array(
+                array('pty'),
+                array('pty'),
+                array('pty'),
+            );
+        }
+
+        return array(
+            array('pipe', 'r'),
+            array('pipe', 'w'), // stdout
+            array('pipe', 'w'), // stderr
+        );
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function getFiles()
+    {
+        return array();
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function readAndWrite($blocking, $close = false)
+    {
+        // only stdin is left open, job has been done !
+        // we can now close it
+        if (1 === count($this->pipes) && array(0) === array_keys($this->pipes)) {
+            fclose($this->pipes[0]);
+            unset($this->pipes[0]);
+        }
+
+        if (empty($this->pipes)) {
+            return array();
+        }
+
+        $this->unblock();
+
+        $read = array();
+
+        if (null !== $this->input) {
+            // if input is a resource, let's add it to stream_select argument to
+            // fill a buffer
+            $r = array_merge($this->pipes, array('input' => $this->input));
+        } else {
+            $r = $this->pipes;
+        }
+        // discard read on stdin
+        unset ($r[0]);
+
+        $w = isset($this->pipes[0]) ? array($this->pipes[0]) : null;
+        $e = null;
+
+        // let's have a look if something changed in streams
+        if (false === $n = @stream_select($r, $w, $e, 0, $blocking ? Process::TIMEOUT_PRECISION * 1E6 : 0)) {
+            // if a system call has been interrupted, forget about it, let's try again
+            // otherwise, an error occurred, let's reset pipes
+            if (!$this->hasSystemCallBeenInterrupted()) {
+                $this->pipes = array();
+            }
+
+            return $read;
+        }
+
+        // nothing has changed
+        if (0 === $n) {
+            return $read;
+        }
+
+        foreach ($r as $pipe) {
+            // prior PHP 5.4 the array passed to stream_select is modified and
+            // lose key association, we have to find back the key
+            $type = (false !== $found = array_search($pipe, $this->pipes)) ? $found : 'input';
+            $data = '';
+            while ($dataread = fread($pipe, self::CHUNK_SIZE)) {
+                $data .= $dataread;
+            }
+
+            if ($data) {
+                if ($type === 'input') {
+                    $this->inputBuffer .= $data;
+                } else {
+                    $read[$type] = $data;
+                }
+            }
+
+            if (false === $data || (true === $close && feof($pipe) && '' === $data)) {
+                if ($type === 'input') {
+                    // no more data to read on input resource
+                    // use an empty buffer in the next reads
+                    $this->input = null;
+                } else {
+                    fclose($this->pipes[$type]);
+                    unset($this->pipes[$type]);
+                }
+            }
+        }
+
+        if (null !== $w && 0 < count($w)) {
+            while ($len = strlen($this->inputBuffer)) {
+                $written = fwrite($w[0], $this->inputBuffer, 2<<18); // write 512k
+                if ($written > 0) {
+                    $this->inputBuffer = (string) substr($this->inputBuffer, $written);
+                } else {
+                    break;
+                }
+            }
+        }
+
+        // no input to read on resource, buffer is empty and stdin still open
+        if ('' === $this->inputBuffer && null === $this->input && isset($this->pipes[0])) {
+            fclose($this->pipes[0]);
+            unset($this->pipes[0]);
+        }
+
+        return $read;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function areOpen()
+    {
+        return (bool) $this->pipes;
+    }
+
+    /**
+     * Creates a new UnixPipes instance
+     *
+     * @param Process         $process
+     * @param string|resource $input
+     *
+     * @return UnixPipes
+     */
+    public static function create(Process $process, $input)
+    {
+        return new static($process->isTty(), $process->isPty(), $input, $process->isOutputDisabled());
+    }
+}
diff --git a/src/Symfony/Component/Process/Pipes/WindowsPipes.php b/src/Symfony/Component/Process/Pipes/WindowsPipes.php
new file mode 100644
index 000000000000..257c265da91b
--- /dev/null
+++ b/src/Symfony/Component/Process/Pipes/WindowsPipes.php
@@ -0,0 +1,254 @@
+<?php
+
+/*
+ * This file is part of the Symfony package.
+ *
+ * (c) Fabien Potencier <fabien@symfony.com>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace Symfony\Component\Process\Pipes;
+
+use Symfony\Component\Process\Process;
+use Symfony\Component\Process\Exception\RuntimeException;
+
+/**
+ * WindowsPipes implementation uses temporary files as handles.
+ *
+ * @see https://bugs.php.net/bug.php?id=51800
+ * @see https://bugs.php.net/bug.php?id=65650
+ *
+ * @author Romain Neutron <imprec@gmail.com>
+ *
+ * @internal
+ */
+class WindowsPipes extends AbstractPipes
+{
+    /** @var array */
+    private $files = array();
+    /** @var array */
+    private $fileHandles = array();
+    /** @var array */
+    private $readBytes = array(
+        Process::STDOUT => 0,
+        Process::STDERR => 0,
+    );
+    /** @var bool */
+    private $disableOutput;
+
+    public function __construct($disableOutput, $input)
+    {
+        $this->disableOutput = (bool) $disableOutput;
+
+        if (!$this->disableOutput) {
+            // Fix for PHP bug #51800: reading from STDOUT pipe hangs forever on Windows if the output is too big.
+            // Workaround for this problem is to use temporary files instead of pipes on Windows platform.
+            //
+            // @see https://bugs.php.net/bug.php?id=51800
+            $this->files = array(
+                Process::STDOUT => tempnam(sys_get_temp_dir(), 'sf_proc_stdout'),
+                Process::STDERR => tempnam(sys_get_temp_dir(), 'sf_proc_stderr'),
+            );
+            foreach ($this->files as $offset => $file) {
+                $this->fileHandles[$offset] = fopen($this->files[$offset], 'rb');
+                if (false === $this->fileHandles[$offset]) {
+                    throw new RuntimeException('A temporary file could not be opened to write the process output to, verify that your TEMP environment variable is writable');
+                }
+            }
+        }
+
+        if (is_resource($input)) {
+            $this->input   = $input;
+        } else {
+            $this->inputBuffer = $input;
+        }
+    }
+
+    public function __destruct()
+    {
+        $this->close();
+        $this->removeFiles();
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function getDescriptors()
+    {
+        if ($this->disableOutput) {
+            $nullstream = fopen('NUL', 'c');
+
+            return array(
+                array('pipe', 'r'),
+                $nullstream,
+                $nullstream,
+            );
+        }
+
+        // We're not using pipe on Windows platform as it hangs (https://bugs.php.net/bug.php?id=51800)
+        // We're not using file handles as it can produce corrupted output https://bugs.php.net/bug.php?id=65650
+        // So we redirect output within the commandline and pass the nul device to the process
+        return array(
+            array('pipe', 'r'),
+            array('file', 'NUL', 'w'),
+            array('file', 'NUL', 'w'),
+        );
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function getFiles()
+    {
+        return $this->files;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function readAndWrite($blocking, $close = false)
+    {
+        $this->write($blocking, $close);
+
+        $read = array();
+        $fh = $this->fileHandles;
+        foreach ($fh as $type => $fileHandle) {
+            if (0 !== fseek($fileHandle, $this->readBytes[$type])) {
+                continue;
+            }
+            $data = '';
+            $dataread = null;
+            while (!feof($fileHandle)) {
+                if (false !== $dataread = fread($fileHandle, self::CHUNK_SIZE)) {
+                    $data .= $dataread;
+                }
+            }
+            if (0 < $length = strlen($data)) {
+                $this->readBytes[$type] += $length;
+                $read[$type] = $data;
+            }
+
+            if (false === $dataread || (true === $close && feof($fileHandle) && '' === $data)) {
+                fclose($this->fileHandles[$type]);
+                unset($this->fileHandles[$type]);
+            }
+        }
+
+        return $read;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function areOpen()
+    {
+        return (bool) $this->pipes && (bool) $this->fileHandles;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function close()
+    {
+        parent::close();
+        foreach ($this->fileHandles as $handle) {
+            fclose($handle);
+        }
+        $this->fileHandles = array();
+    }
+
+    /**
+     * Creates a new WindowsPipes instance.
+     *
+     * @param Process $process The process
+     * @param $input
+     *
+     * @return WindowsPipes
+     */
+    public static function create(Process $process, $input)
+    {
+        return new static($process->isOutputDisabled(), $input);
+    }
+
+    /**
+     * Removes temporary files
+     */
+    private function removeFiles()
+    {
+        foreach ($this->files as $filename) {
+            if (file_exists($filename)) {
+                @unlink($filename);
+            }
+        }
+        $this->files = array();
+    }
+
+    /**
+     * Writes input to stdin
+     *
+     * @param bool $blocking
+     * @param bool $close
+     */
+    private function write($blocking, $close)
+    {
+        if (empty($this->pipes)) {
+            return;
+        }
+
+        $this->unblock();
+
+        $r = null !== $this->input ? array('input' => $this->input) : null;
+        $w = isset($this->pipes[0]) ? array($this->pipes[0]) : null;
+        $e = null;
+
+        // let's have a look if something changed in streams
+        if (false === $n = @stream_select($r, $w, $e, 0, $blocking ? Process::TIMEOUT_PRECISION * 1E6 : 0)) {
+            // if a system call has been interrupted, forget about it, let's try again
+            // otherwise, an error occurred, let's reset pipes
+            if (!$this->hasSystemCallBeenInterrupted()) {
+                $this->pipes = array();
+            }
+
+            return;
+        }
+
+        // nothing has changed
+        if (0 === $n) {
+            return;
+        }
+
+        if (null !== $w && 0 < count($r)) {
+            $data = '';
+            while ($dataread = fread($r['input'], self::CHUNK_SIZE)) {
+                $data .= $dataread;
+            }
+
+            $this->inputBuffer .= $data;
+
+            if (false === $data || (true === $close && feof($r['input']) && '' === $data)) {
+                // no more data to read on input resource
+                // use an empty buffer in the next reads
+                unset($this->input);
+            }
+        }
+
+        if (null !== $w && 0 < count($w)) {
+            while ($len = strlen($this->inputBuffer)) {
+                $written = fwrite($w[0], $this->inputBuffer, 2<<18);
+                if ($written > 0) {
+                    $this->inputBuffer = (string) substr($this->inputBuffer, $written);
+                } else {
+                    break;
+                }
+            }
+        }
+
+        // no input to read on resource, buffer is empty and stdin still open
+        if ('' === $this->inputBuffer && null === $this->input && isset($this->pipes[0])) {
+            fclose($this->pipes[0]);
+            unset($this->pipes[0]);
+        }
+    }
+}
diff --git a/src/Symfony/Component/Process/Process.php b/src/Symfony/Component/Process/Process.php
index c0d8863ca1d6..75b2bdd584fa 100644
--- a/src/Symfony/Component/Process/Process.php
+++ b/src/Symfony/Component/Process/Process.php
@@ -16,12 +16,16 @@
 use Symfony\Component\Process\Exception\ProcessFailedException;
 use Symfony\Component\Process\Exception\ProcessTimedOutException;
 use Symfony\Component\Process\Exception\RuntimeException;
+use Symfony\Component\Process\Pipes\PipesInterface;
+use Symfony\Component\Process\Pipes\UnixPipes;
+use Symfony\Component\Process\Pipes\WindowsPipes;

 /**
  * Process is a thin wrapper around proc_* functions to easily
  * start independent PHP processes.
  *
  * @author Fabien Potencier <fabien@symfony.com>
+ * @author Romain Neutron <imprec@gmail.com>
  *
  * @api
  */
@@ -67,7 +71,7 @@ class Process
     private $pty;

     private $useFileHandles = false;
-    /** @var ProcessPipes */
+    /** @var PipesInterface */
     private $processPipes;

     private static $sigchild;
@@ -282,13 +286,10 @@ public function start($callback = null)
         }
         $this->status = self::STATUS_STARTED;

-        $this->processPipes->unblock();
-
         if ($this->tty) {
             return;
         }

-        $this->processPipes->write(false, $this->input);
         $this->updateStatus(false);
         $this->checkTimeout();
     }
@@ -346,7 +347,7 @@ public function wait($callback = null)

         do {
             $this->checkTimeout();
-            $running = defined('PHP_WINDOWS_VERSION_BUILD') ? $this->isRunning() : $this->processPipes->hasOpenHandles();
+            $running = defined('PHP_WINDOWS_VERSION_BUILD') ? $this->isRunning() : $this->processPipes->areOpen();
             $close = !defined('PHP_WINDOWS_VERSION_BUILD') || !$running;;
             $this->readPipes(true, $close);
         } while ($running);
@@ -1060,8 +1061,6 @@ public function getInput()
     /**
      * Sets the contents of STDIN.
      *
-     * Deprecation: As of Symfony 2.5, this method only accepts scalar values.
-     *
      * @param string|null $stdin The new contents
      *
      * @return self The current Process instance
@@ -1238,8 +1237,12 @@ public static function isPtySupported()
      */
     private function getDescriptors()
     {
-        $this->processPipes = new ProcessPipes($this->useFileHandles, $this->tty, $this->pty, $this->outputDisabled);
-        $descriptors = $this->processPipes->getDescriptors();
+        if (defined('PHP_WINDOWS_VERSION_BUILD')) {
+            $this->processPipes = WindowsPipes::create($this, $this->input);
+        } else {
+            $this->processPipes = UnixPipes::create($this, $this->input);
+        }
+        $descriptors = $this->processPipes->getDescriptors($this->outputDisabled);

         if (!$this->useFileHandles && $this->enhanceSigchildCompatibility && $this->isSigchildEnabled()) {
             // last exit code is output on the fourth pipe and caught to work around --enable-sigchild
@@ -1351,11 +1354,7 @@ private function validateTimeout($timeout)
      */
     private function readPipes($blocking, $close)
     {
-        if ($close) {
-            $result = $this->processPipes->readAndCloseHandles($blocking);
-        } else {
-            $result = $this->processPipes->read($blocking);
-        }
+        $result = $this->processPipes->readAndWrite($blocking, $close);

         foreach ($result as $type => $data) {
             if (3 == $type) {
diff --git a/src/Symfony/Component/Process/ProcessPipes.php b/src/Symfony/Component/Process/ProcessPipes.php
deleted file mode 100644
index 3cc61155803d..000000000000
--- a/src/Symfony/Component/Process/ProcessPipes.php
+++ /dev/null
@@ -1,380 +0,0 @@
-<?php
-
-/*
- * This file is part of the Symfony package.
- *
- * (c) Fabien Potencier <fabien@symfony.com>
- *
- * For the full copyright and license information, please view the LICENSE
- * file that was distributed with this source code.
- */
-
-namespace Symfony\Component\Process;
-
-use Symfony\Component\Process\Exception\RuntimeException;
-
-/**
- * ProcessPipes manages descriptors and pipes for the use of proc_open.
- */
-class ProcessPipes
-{
-    /** @var array */
-    public $pipes = array();
-    /** @var array */
-    private $files = array();
-    /** @var array */
-    private $fileHandles = array();
-    /** @var array */
-    private $readBytes = array();
-    /** @var bool    */
-    private $useFiles;
-    /** @var bool    */
-    private $ttyMode;
-    /** @var bool    */
-    private $ptyMode;
-    /** @var bool    */
-    private $disableOutput;
-
-    const CHUNK_SIZE = 16384;
-
-    public function __construct($useFiles, $ttyMode, $ptyMode = false, $disableOutput = false)
-    {
-        $this->useFiles = (bool) $useFiles;
-        $this->ttyMode = (bool) $ttyMode;
-        $this->ptyMode = (bool) $ptyMode;
-        $this->disableOutput = (bool) $disableOutput;
-
-        // Fix for PHP bug #51800: reading from STDOUT pipe hangs forever on Windows if the output is too big.
-        // Workaround for this problem is to use temporary files instead of pipes on Windows platform.
-        //
-        // @see https://bugs.php.net/bug.php?id=51800
-        if ($this->useFiles && !$this->disableOutput) {
-            $this->files = array(
-                Process::STDOUT => tempnam(sys_get_temp_dir(), 'sf_proc_stdout'),
-                Process::STDERR => tempnam(sys_get_temp_dir(), 'sf_proc_stderr'),
-            );
-            foreach ($this->files as $offset => $file) {
-                $this->fileHandles[$offset] = fopen($this->files[$offset], 'rb');
-                if (false === $this->fileHandles[$offset]) {
-                    throw new RuntimeException('A temporary file could not be opened to write the process output to, verify that your TEMP environment variable is writable');
-                }
-            }
-            $this->readBytes = array(
-                Process::STDOUT => 0,
-                Process::STDERR => 0,
-            );
-        }
-    }
-
-    public function __destruct()
-    {
-        $this->close();
-        $this->removeFiles();
-    }
-
-    /**
-     * Sets non-blocking mode on pipes.
-     */
-    public function unblock()
-    {
-        foreach ($this->pipes as $pipe) {
-            stream_set_blocking($pipe, 0);
-        }
-    }
-
-    /**
-     * Closes file handles and pipes.
-     */
-    public function close()
-    {
-        $this->closeUnixPipes();
-        foreach ($this->fileHandles as $handle) {
-            fclose($handle);
-        }
-        $this->fileHandles = array();
-    }
-
-    /**
-     * Closes Unix pipes.
-     *
-     * Nothing happens in case file handles are used.
-     */
-    public function closeUnixPipes()
-    {
-        foreach ($this->pipes as $pipe) {
-            fclose($pipe);
-        }
-        $this->pipes = array();
-    }
-
-    /**
-     * Returns an array of descriptors for the use of proc_open.
-     *
-     * @return array
-     */
-    public function getDescriptors()
-    {
-        if ($this->disableOutput) {
-            $nullstream = fopen(defined('PHP_WINDOWS_VERSION_BUILD') ? 'NUL' : '/dev/null', 'c');
-
-            return array(
-                array('pipe', 'r'),
-                $nullstream,
-                $nullstream,
-            );
-        }
-
-        if ($this->useFiles) {
-            // We're not using pipe on Windows platform as it hangs (https://bugs.php.net/bug.php?id=51800)
-            // We're not using file handles as it can produce corrupted output https://bugs.php.net/bug.php?id=65650
-            // So we redirect output within the commandline and pass the nul device to the process
-            return array(
-                array('pipe', 'r'),
-                array('file', 'NUL', 'w'),
-                array('file', 'NUL', 'w'),
-            );
-        }
-
-        if ($this->ttyMode) {
-            return array(
-                array('file', '/dev/tty', 'r'),
-                array('file', '/dev/tty', 'w'),
-                array('file', '/dev/tty', 'w'),
-            );
-        } elseif ($this->ptyMode && Process::isPtySupported()) {
-            return array(
-                array('pty'),
-                array('pty'),
-                array('pty'),
-            );
-        }
-
-        return array(
-            array('pipe', 'r'), // stdin
-            array('pipe', 'w'), // stdout
-            array('pipe', 'w'), // stderr
-        );
-    }
-
-    /**
-     * Returns an array of filenames indexed by their related stream in case these pipes use temporary files.
-     *
-     * @return array
-     */
-    public function getFiles()
-    {
-        if ($this->useFiles) {
-            return $this->files;
-        }
-
-        return array();
-    }
-
-    /**
-     * Reads data in file handles and pipes.
-     *
-     * @param bool    $blocking Whether to use blocking calls or not.
-     *
-     * @return array An array of read data indexed by their fd.
-     */
-    public function read($blocking)
-    {
-        return array_replace($this->readStreams($blocking), $this->readFileHandles());
-    }
-
-    /**
-     * Reads data in file handles and pipes, closes them if EOF is reached.
-     *
-     * @param bool    $blocking Whether to use blocking calls or not.
-     *
-     * @return array An array of read data indexed by their fd.
-     */
-    public function readAndCloseHandles($blocking)
-    {
-        return array_replace($this->readStreams($blocking, true), $this->readFileHandles(true));
-    }
-
-    /**
-     * Returns if the current state has open file handles or pipes.
-     *
-     * @return bool
-     */
-    public function hasOpenHandles()
-    {
-        if (!$this->useFiles) {
-            return (bool) $this->pipes;
-        }
-
-        return (bool) $this->pipes && (bool) $this->fileHandles;
-    }
-
-    /**
-     * Writes stdin data.
-     *
-     * @param bool        $blocking Whether to use blocking calls or not.
-     * @param string|null $stdin    The data to write.
-     */
-    public function write($blocking, $stdin)
-    {
-        if (null === $stdin) {
-            fclose($this->pipes[0]);
-            unset($this->pipes[0]);
-
-            return;
-        }
-
-        $writePipes = array($this->pipes[0]);
-        unset($this->pipes[0]);
-        $stdinLen = strlen($stdin);
-        $stdinOffset = 0;
-
-        while ($writePipes) {
-            $r = null;
-            $w = $writePipes;
-            $e = null;
-
-            if (false === $n = @stream_select($r, $w, $e, 0, $blocking ? ceil(Process::TIMEOUT_PRECISION * 1E6) : 0)) {
-                // if a system call has been interrupted, forget about it, let's try again
-                if ($this->hasSystemCallBeenInterrupted()) {
-                    continue;
-                }
-                break;
-            }
-
-            // nothing has changed, let's wait until the process is ready
-            if (0 === $n) {
-                continue;
-            }
-
-            if ($w) {
-                $written = fwrite($writePipes[0], (binary) substr($stdin, $stdinOffset), 8192);
-                if (false !== $written) {
-                    $stdinOffset += $written;
-                }
-                if ($stdinOffset >= $stdinLen) {
-                    fclose($writePipes[0]);
-                    $writePipes = null;
-                }
-            }
-        }
-    }
-
-    /**
-     * Reads data in file handles.
-     *
-     * @param bool    $close Whether to close file handles or not.
-     *
-     * @return array An array of read data indexed by their fd.
-     */
-    private function readFileHandles($close = false)
-    {
-        $read = array();
-        $fh = $this->fileHandles;
-        foreach ($fh as $type => $fileHandle) {
-            if (0 !== fseek($fileHandle, $this->readBytes[$type])) {
-                continue;
-            }
-            $data = '';
-            $dataread = null;
-            while (!feof($fileHandle)) {
-                if (false !== $dataread = fread($fileHandle, self::CHUNK_SIZE)) {
-                    $data .= $dataread;
-                }
-            }
-            if (0 < $length = strlen($data)) {
-                $this->readBytes[$type] += $length;
-                $read[$type] = $data;
-            }
-
-            if (false === $dataread || (true === $close && feof($fileHandle) && '' === $data)) {
-                fclose($this->fileHandles[$type]);
-                unset($this->fileHandles[$type]);
-            }
-        }
-
-        return $read;
-    }
-
-    /**
-     * Reads data in file pipes streams.
-     *
-     * @param bool    $blocking Whether to use blocking calls or not.
-     * @param bool    $close    Whether to close file handles or not.
-     *
-     * @return array An array of read data indexed by their fd.
-     */
-    private function readStreams($blocking, $close = false)
-    {
-        if (empty($this->pipes)) {
-            return array();
-        }
-
-        $read = array();
-
-        $r = $this->pipes;
-        $w = null;
-        $e = null;
-
-        // let's have a look if something changed in streams
-        if (false === $n = @stream_select($r, $w, $e, 0, $blocking ? ceil(Process::TIMEOUT_PRECISION * 1E6) : 0)) {
-            // if a system call has been interrupted, forget about it, let's try again
-            // otherwise, an error occurred, let's reset pipes
-            if (!$this->hasSystemCallBeenInterrupted()) {
-                $this->pipes = array();
-            }
-
-            return $read;
-        }
-
-        // nothing has changed
-        if (0 === $n) {
-            return $read;
-        }
-
-        foreach ($r as $pipe) {
-            $type = array_search($pipe, $this->pipes);
-
-            $data = '';
-            while ($dataread = fread($pipe, self::CHUNK_SIZE)) {
-                $data .= $dataread;
-            }
-
-            if ($data) {
-                $read[$type] = $data;
-            }
-
-            if (false === $data || (true === $close && feof($pipe) && '' === $data)) {
-                fclose($this->pipes[$type]);
-                unset($this->pipes[$type]);
-            }
-        }
-
-        return $read;
-    }
-
-    /**
-     * Returns true if a system call has been interrupted.
-     *
-     * @return bool
-     */
-    private function hasSystemCallBeenInterrupted()
-    {
-        $lastError = error_get_last();
-
-        // stream_select returns false when the `select` system call is interrupted by an incoming signal
-        return isset($lastError['message']) && false !== stripos($lastError['message'], 'interrupted system call');
-    }
-
-    /**
-     * Removes temporary files
-     */
-    private function removeFiles()
-    {
-        foreach ($this->files as $filename) {
-            if (file_exists($filename)) {
-                @unlink($filename);
-            }
-        }
-        $this->files = array();
-    }
-}
diff --git a/src/Symfony/Component/Process/ProcessUtils.php b/src/Symfony/Component/Process/ProcessUtils.php
index 35ae17c50882..2ec321cc12c6 100644
--- a/src/Symfony/Component/Process/ProcessUtils.php
+++ b/src/Symfony/Component/Process/ProcessUtils.php
@@ -87,6 +87,9 @@ public static function escapeArgument($argument)
     public static function validateInput($caller, $input)
     {
         if (null !== $input) {
+            if (is_resource($input)) {
+                return $input;
+            }
             if (is_scalar($input)) {
                 return (string) $input;
             }
@@ -95,7 +98,7 @@ public static function validateInput($caller, $input)
                 return (string) $input;
             }

-            throw new InvalidArgumentException(sprintf('%s only accepts strings.', $caller));
+            throw new InvalidArgumentException(sprintf('%s only accepts strings or stream resources.', $caller));
         }

         return $input;
diff --git a/src/Symfony/Component/Process/Tests/AbstractProcessTest.php b/src/Symfony/Component/Process/Tests/AbstractProcessTest.php
index 4e0f4b5bb1cb..9872fee56756 100644
--- a/src/Symfony/Component/Process/Tests/AbstractProcessTest.php
+++ b/src/Symfony/Component/Process/Tests/AbstractProcessTest.php
@@ -13,9 +13,9 @@

 use Symfony\Component\Process\Exception\ProcessTimedOutException;
 use Symfony\Component\Process\Exception\LogicException;
+use Symfony\Component\Process\Pipes\PipesInterface;
 use Symfony\Component\Process\Process;
 use Symfony\Component\Process\Exception\RuntimeException;
-use Symfony\Component\Process\ProcessPipes;

 /**
  * @author Robert Schönthal <seroscho@googlemail.com>
@@ -90,9 +90,9 @@ public function testAllOutputIsActuallyReadOnTermination()
         // has terminated so the internal pipes array is already empty. normally
         // the call to start() will not read any data as the process will not have
         // generated output, but this is non-deterministic so we must count it as
-        // a possibility.  therefore we need 2 * ProcessPipes::CHUNK_SIZE plus
+        // a possibility.  therefore we need 2 * PipesInterface::CHUNK_SIZE plus
         // another byte which will never be read.
-        $expectedOutputSize = ProcessPipes::CHUNK_SIZE * 2 + 2;
+        $expectedOutputSize = PipesInterface::CHUNK_SIZE * 2 + 2;

         $code = sprintf('echo str_repeat(\'*\', %d);', $expectedOutputSize);
         $p = $this->getProcess(sprintf('php -r %s', escapeshellarg($code)));
@@ -158,6 +158,28 @@ public function testProcessPipes($code, $size)
         $this->assertEquals($expectedLength, strlen($p->getErrorOutput()));
     }

+    /**
+     * @dataProvider pipesCodeProvider
+     */
+    public function testSetStreamAsInput($code, $size)
+    {
+        $expected = str_repeat(str_repeat('*', 1024), $size) . '!';
+        $expectedLength = (1024 * $size) + 1;
+
+        $stream = fopen('php://temporary', 'w+');
+        fwrite($stream, $expected);
+        rewind($stream);
+
+        $p = $this->getProcess(sprintf('php -r %s', escapeshellarg($code)));
+        $p->setInput($stream);
+        $p->run();
+
+        fclose($stream);
+
+        $this->assertEquals($expectedLength, strlen($p->getOutput()));
+        $this->assertEquals($expectedLength, strlen($p->getErrorOutput()));
+    }
+
     public function testSetInputWhileRunningThrowsAnException()
     {
         $process = $this->getProcess('php -r "usleep(500000);"');
@@ -175,7 +197,7 @@ public function testSetInputWhileRunningThrowsAnException()
     /**
      * @dataProvider provideInvalidInputValues
      * @expectedException \Symfony\Component\Process\Exception\InvalidArgumentException
-     * @expectedExceptionMessage Symfony\Component\Process\Process::setInput only accepts strings.
+     * @expectedExceptionMessage Symfony\Component\Process\Process::setInput only accepts strings or stream resources.
      */
     public function testInvalidInput($value)
     {
@@ -188,7 +210,6 @@ public function provideInvalidInputValues()
         return array(
             array(array()),
             array(new NonStringifiable()),
-            array(fopen('php://temporary', 'w')),
         );
     }

diff --git a/src/Symfony/Component/Process/Tests/ExecutableFinderTest.php b/src/Symfony/Component/Process/Tests/ExecutableFinderTest.php
new file mode 100644
index 000000000000..abaa47d8ddd7
--- /dev/null
+++ b/src/Symfony/Component/Process/Tests/ExecutableFinderTest.php
@@ -0,0 +1,112 @@
+<?php
+
+/*
+ * This file is part of the Symfony package.
+ *
+ * (c) Fabien Potencier <fabien@symfony.com>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace Symfony\Component\Process\Tests;
+
+use Symfony\Component\Process\ExecutableFinder;
+
+/**
+ * @author Chris Smith <chris@cs278.org>
+ */
+class ExecutableFinderTest extends \PHPUnit_Framework_TestCase
+{
+    private $path;
+
+    public function tearDown()
+    {
+        if ($this->path) {
+            // Restore path if it was changed.
+            putenv('PATH='.$this->path);
+        }
+    }
+
+    private function setPath($path)
+    {
+        $this->path = getenv('PATH');
+        putenv('PATH='.$path);
+    }
+
+    public function testFind()
+    {
+        if (!defined('PHP_BINARY')) {
+            $this->markTestSkipped('Requires the PHP_BINARY constant');
+        }
+
+        if (ini_get('open_basedir')) {
+            $this->markTestSkipped('Cannot test when open_basedir is set');
+        }
+
+        $this->setPath(dirname(PHP_BINARY));
+
+        $finder = new ExecutableFinder;
+        $result = $finder->find(basename(PHP_BINARY));
+
+        $this->assertEquals($result, PHP_BINARY);
+    }
+
+    public function testFindWithDefault()
+    {
+        if (ini_get('open_basedir')) {
+            $this->markTestSkipped('Cannot test when open_basedir is set');
+        }
+
+        $expected = 'defaultValue';
+
+        $this->setPath('');
+
+        $finder = new ExecutableFinder;
+        $result = $finder->find('foo', $expected);
+
+        $this->assertEquals($expected, $result);
+    }
+
+    public function testFindWithExtraDirs()
+    {
+        if (!defined('PHP_BINARY')) {
+            $this->markTestSkipped('Requires the PHP_BINARY constant');
+        }
+
+        if (ini_get('open_basedir')) {
+            $this->markTestSkipped('Cannot test when open_basedir is set');
+        }
+
+        $this->setPath('');
+
+        $extraDirs = array(dirname(PHP_BINARY));
+
+        $finder = new ExecutableFinder;
+        $result = $finder->find(basename(PHP_BINARY), null, $extraDirs);
+
+        $this->assertEquals(PHP_BINARY, $result);
+    }
+
+    public function testFindWithOpenBaseDir()
+    {
+        if (!defined('PHP_BINARY')) {
+            $this->markTestSkipped('Requires the PHP_BINARY constant');
+        }
+
+        if (defined('PHP_WINDOWS_VERSION_BUILD')) {
+            $this->markTestSkipped('Cannot run test on windows');
+        }
+
+        if (ini_get('open_basedir')) {
+            $this->markTestSkipped('Cannot test when open_basedir is set');
+        }
+
+        ini_set('open_basedir', dirname(PHP_BINARY).PATH_SEPARATOR.'/');
+
+        $finder = new ExecutableFinder;
+        $result = $finder->find(basename(PHP_BINARY));
+
+        $this->assertEquals(PHP_BINARY, $result);
+    }
+}
diff --git a/src/Symfony/Component/Process/Tests/ProcessBuilderTest.php b/src/Symfony/Component/Process/Tests/ProcessBuilderTest.php
index 56e40520754b..e864f6623456 100644
--- a/src/Symfony/Component/Process/Tests/ProcessBuilderTest.php
+++ b/src/Symfony/Component/Process/Tests/ProcessBuilderTest.php
@@ -215,7 +215,7 @@ public function testShouldReturnProcessWithEnabledOutput()

     /**
      * @expectedException \Symfony\Component\Process\Exception\InvalidArgumentException
-     * @expectedExceptionMessage Symfony\Component\Process\ProcessBuilder::setInput only accepts strings.
+     * @expectedExceptionMessage Symfony\Component\Process\ProcessBuilder::setInput only accepts strings or stream resources.
      */
     public function testInvalidInput()
     {
diff --git a/src/Symfony/Component/Process/composer.json b/src/Symfony/Component/Process/composer.json
index b5dbfe1390a2..39fa97cb59b0 100644
--- a/src/Symfony/Component/Process/composer.json
+++ b/src/Symfony/Component/Process/composer.json
@@ -25,7 +25,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Component/PropertyAccess/composer.json b/src/Symfony/Component/PropertyAccess/composer.json
index a34297fd9ed1..ebf35abc283e 100644
--- a/src/Symfony/Component/PropertyAccess/composer.json
+++ b/src/Symfony/Component/PropertyAccess/composer.json
@@ -25,7 +25,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Component/Routing/composer.json b/src/Symfony/Component/Routing/composer.json
index 9a88cc149fb3..1226298cc304 100644
--- a/src/Symfony/Component/Routing/composer.json
+++ b/src/Symfony/Component/Routing/composer.json
@@ -38,7 +38,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Component/Security/Acl/README.md b/src/Symfony/Component/Security/Acl/README.md
index 6c009a368eb6..bb2d4d77f328 100644
--- a/src/Symfony/Component/Security/Acl/README.md
+++ b/src/Symfony/Component/Security/Acl/README.md
@@ -11,7 +11,7 @@ Resources

 Documentation:

-http://symfony.com/doc/2.5/book/security.html
+http://symfony.com/doc/2.6/book/security.html

 Tests
 -----
diff --git a/src/Symfony/Component/Security/Acl/composer.json b/src/Symfony/Component/Security/Acl/composer.json
index 5f5787fcc69f..fb25b5d783a3 100644
--- a/src/Symfony/Component/Security/Acl/composer.json
+++ b/src/Symfony/Component/Security/Acl/composer.json
@@ -36,7 +36,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Component/Security/Core/Exception/UsernameNotFoundException.php b/src/Symfony/Component/Security/Core/Exception/UsernameNotFoundException.php
index 11607d336d34..8b72dc2ae022 100644
--- a/src/Symfony/Component/Security/Core/Exception/UsernameNotFoundException.php
+++ b/src/Symfony/Component/Security/Core/Exception/UsernameNotFoundException.php
@@ -69,4 +69,12 @@ public function unserialize($str)

         parent::unserialize($parentData);
     }
+
+    /**
+     * {@inheritDoc}
+     */
+    public function getMessageData()
+    {
+        return array('{{ username }}' => $this->username);
+    }
 }
diff --git a/src/Symfony/Component/Security/Core/README.md b/src/Symfony/Component/Security/Core/README.md
index 4585a5d67533..66c323e65a75 100644
--- a/src/Symfony/Component/Security/Core/README.md
+++ b/src/Symfony/Component/Security/Core/README.md
@@ -11,7 +11,7 @@ Resources

 Documentation:

-http://symfony.com/doc/2.5/book/security.html
+http://symfony.com/doc/2.6/book/security.html

 Tests
 -----
diff --git a/src/Symfony/Component/Security/Core/Tests/Exception/UsernameNotFoundExceptionTest.php b/src/Symfony/Component/Security/Core/Tests/Exception/UsernameNotFoundExceptionTest.php
new file mode 100644
index 000000000000..b460229ac6ab
--- /dev/null
+++ b/src/Symfony/Component/Security/Core/Tests/Exception/UsernameNotFoundExceptionTest.php
@@ -0,0 +1,25 @@
+<?php
+
+/*
+ * This file is part of the Symfony package.
+ *
+ * (c) Fabien Potencier <fabien@symfony.com>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace Symfony\Component\Security\Tests\Core\Exception;
+
+use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
+
+class UsernameNotFoundExceptionTest extends \PHPUnit_Framework_TestCase
+{
+    public function testGetMessageData()
+    {
+        $exception = new UsernameNotFoundException('Username could not be found.');
+        $this->assertEquals(array('{{ username }}' => null), $exception->getMessageData());
+        $exception->setUsername('username');
+        $this->assertEquals(array('{{ username }}' => 'username'), $exception->getMessageData());
+    }
+}
diff --git a/src/Symfony/Component/Security/Core/composer.json b/src/Symfony/Component/Security/Core/composer.json
index 249d4c14f319..54a76dc551c8 100644
--- a/src/Symfony/Component/Security/Core/composer.json
+++ b/src/Symfony/Component/Security/Core/composer.json
@@ -40,7 +40,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Component/Security/Csrf/README.md b/src/Symfony/Component/Security/Csrf/README.md
index 95a1062091ed..89ed66cb5a72 100644
--- a/src/Symfony/Component/Security/Csrf/README.md
+++ b/src/Symfony/Component/Security/Csrf/README.md
@@ -9,7 +9,7 @@ Resources

 Documentation:

-http://symfony.com/doc/2.5/book/security.html
+http://symfony.com/doc/2.6/book/security.html

 Tests
 -----
diff --git a/src/Symfony/Component/Security/Csrf/composer.json b/src/Symfony/Component/Security/Csrf/composer.json
index 398a2d3c454f..4daba5ca38b4 100644
--- a/src/Symfony/Component/Security/Csrf/composer.json
+++ b/src/Symfony/Component/Security/Csrf/composer.json
@@ -32,7 +32,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Component/Security/Http/Firewall/ContextListener.php b/src/Symfony/Component/Security/Http/Firewall/ContextListener.php
index 435c44026ead..e61907eff302 100644
--- a/src/Symfony/Component/Security/Http/Firewall/ContextListener.php
+++ b/src/Symfony/Component/Security/Http/Firewall/ContextListener.php
@@ -142,7 +142,7 @@ public function onKernelResponse(FilterResponseEvent $event)
      *
      * @throws \RuntimeException
      */
-    private function refreshUser(TokenInterface $token)
+    protected function refreshUser(TokenInterface $token)
     {
         $user = $token->getUser();
         if (!$user instanceof UserInterface) {
diff --git a/src/Symfony/Component/Security/Http/README.md b/src/Symfony/Component/Security/Http/README.md
index c0760d4edae4..e19af427b84e 100644
--- a/src/Symfony/Component/Security/Http/README.md
+++ b/src/Symfony/Component/Security/Http/README.md
@@ -11,7 +11,7 @@ Resources

 Documentation:

-http://symfony.com/doc/2.5/book/security.html
+http://symfony.com/doc/2.6/book/security.html

 Tests
 -----
diff --git a/src/Symfony/Component/Security/Http/composer.json b/src/Symfony/Component/Security/Http/composer.json
index c544ad173ab4..812952339211 100644
--- a/src/Symfony/Component/Security/Http/composer.json
+++ b/src/Symfony/Component/Security/Http/composer.json
@@ -38,7 +38,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Component/Security/README.md b/src/Symfony/Component/Security/README.md
index 5866d129e9fc..c799a5d843c5 100644
--- a/src/Symfony/Component/Security/README.md
+++ b/src/Symfony/Component/Security/README.md
@@ -11,7 +11,7 @@ Resources

 Documentation:

-http://symfony.com/doc/2.5/book/security.html
+http://symfony.com/doc/2.6/book/security.html

 Tests
 -----
diff --git a/src/Symfony/Component/Security/composer.json b/src/Symfony/Component/Security/composer.json
index a8a99f553f48..6d60781bfdb5 100644
--- a/src/Symfony/Component/Security/composer.json
+++ b/src/Symfony/Component/Security/composer.json
@@ -52,7 +52,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Component/Serializer/Normalizer/GetSetMethodNormalizer.php b/src/Symfony/Component/Serializer/Normalizer/GetSetMethodNormalizer.php
index 1f45bf053b04..9f2374266c65 100644
--- a/src/Symfony/Component/Serializer/Normalizer/GetSetMethodNormalizer.php
+++ b/src/Symfony/Component/Serializer/Normalizer/GetSetMethodNormalizer.php
@@ -143,7 +143,9 @@ public function denormalize($data, $class, $format = null, array $context = arra
                     $params[] = $data[$paramName];
                     // don't run set for a parameter passed to the constructor
                     unset($data[$paramName]);
-                } elseif (!$constructorParameter->isOptional()) {
+                } elseif ($constructorParameter->isOptional()) {
+                    $params[] = $constructorParameter->getDefaultValue();
+                } else {
                     throw new RuntimeException(
                         'Cannot create an instance of '.$class.
                         ' from serialized data because its constructor requires '.
diff --git a/src/Symfony/Component/Serializer/Tests/Encoder/XmlEncoderTest.php b/src/Symfony/Component/Serializer/Tests/Encoder/XmlEncoderTest.php
index 4f83c6f948a7..d3463d41bd78 100644
--- a/src/Symfony/Component/Serializer/Tests/Encoder/XmlEncoderTest.php
+++ b/src/Symfony/Component/Serializer/Tests/Encoder/XmlEncoderTest.php
@@ -312,6 +312,29 @@ public function testDecodeArray()
         $this->assertEquals($expected, $this->encoder->decode($source, 'xml'));
     }

+    public function testDecodeIgnoreWhiteSpace()
+    {
+        $source = <<<XML
+<?xml version="1.0"?>
+<people>
+    <person>
+        <firstname>Benjamin</firstname>
+        <lastname>Alexandre</lastname>
+    </person>
+    <person>
+        <firstname>Damien</firstname>
+        <lastname>Clay</lastname>
+    </person>
+</people>
+XML;
+        $expected = array('person' => array(
+            array('firstname' => 'Benjamin', 'lastname' => 'Alexandre'),
+            array('firstname' => 'Damien', 'lastname' => 'Clay')
+        ));
+
+        $this->assertEquals($expected, $this->encoder->decode($source, 'xml'));
+    }
+
     public function testDecodeWithoutItemHash()
     {
         $obj = new ScalarDummy();
diff --git a/src/Symfony/Component/Serializer/Tests/Normalizer/GetSetMethodNormalizerTest.php b/src/Symfony/Component/Serializer/Tests/Normalizer/GetSetMethodNormalizerTest.php
index 99a2e37c4c76..2ec68c0a0d0e 100644
--- a/src/Symfony/Component/Serializer/Tests/Normalizer/GetSetMethodNormalizerTest.php
+++ b/src/Symfony/Component/Serializer/Tests/Normalizer/GetSetMethodNormalizerTest.php
@@ -109,6 +109,16 @@ public function testConstructorDenormalize()
         $this->assertTrue($obj->isBaz());
     }

+    public function testConstructorDenormalizeWithMissingOptionalArgument()
+    {
+        $obj = $this->normalizer->denormalize(
+            array('foo' => 'test', 'baz' => array(1, 2, 3)),
+            __NAMESPACE__.'\GetConstructorOptionalArgsDummy', 'any');
+        $this->assertEquals('test', $obj->getFoo());
+        $this->assertEquals(array(), $obj->getBar());
+        $this->assertEquals(array(1, 2, 3), $obj->getBaz());
+    }
+
     /**
      * @dataProvider provideCallbacks
      */
@@ -336,3 +346,37 @@ public function otherMethod()
 abstract class SerializerNormalizer implements SerializerInterface, NormalizerInterface
 {
 }
+
+class GetConstructorOptionalArgsDummy
+{
+    protected $foo;
+    private $bar;
+    private $baz;
+
+    public function __construct($foo, $bar = array(), $baz = array())
+    {
+        $this->foo = $foo;
+        $this->bar = $bar;
+        $this->baz = $baz;
+    }
+
+    public function getFoo()
+    {
+        return $this->foo;
+    }
+
+    public function getBar()
+    {
+        return $this->bar;
+    }
+
+    public function getBaz()
+    {
+        return $this->baz;
+    }
+
+    public function otherMethod()
+    {
+        throw new \RuntimeException("Dummy::otherMethod() should not be called");
+    }
+}
diff --git a/src/Symfony/Component/Serializer/composer.json b/src/Symfony/Component/Serializer/composer.json
index 9e0fe096b07e..eab354fa9172 100644
--- a/src/Symfony/Component/Serializer/composer.json
+++ b/src/Symfony/Component/Serializer/composer.json
@@ -25,7 +25,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Component/Stopwatch/Section.php b/src/Symfony/Component/Stopwatch/Section.php
new file mode 100644
index 000000000000..5423741db81c
--- /dev/null
+++ b/src/Symfony/Component/Stopwatch/Section.php
@@ -0,0 +1,193 @@
+<?php
+
+/*
+ * This file is part of the Symfony package.
+ *
+ * (c) Fabien Potencier <fabien@symfony.com>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace Symfony\Component\Stopwatch;
+
+/**
+ * Stopwatch section.
+ *
+ * @author Fabien Potencier <fabien@symfony.com>
+ */
+class Section
+{
+    /**
+     * @var StopwatchEvent[]
+     */
+    private $events = array();
+
+    /**
+     * @var null|float
+     */
+    private $origin;
+
+    /**
+     * @var string
+     */
+    private $id;
+
+    /**
+     * @var Section[]
+     */
+    private $children = array();
+
+    /**
+     * Constructor.
+     *
+     * @param float|null $origin Set the origin of the events in this section, use null to set their origin to their start time
+     */
+    public function __construct($origin = null)
+    {
+        $this->origin = is_numeric($origin) ? $origin : null;
+    }
+
+    /**
+     * Returns the child section.
+     *
+     * @param string $id The child section identifier
+     *
+     * @return Section|null The child section or null when none found
+     */
+    public function get($id)
+    {
+        foreach ($this->children as $child) {
+            if ($id === $child->getId()) {
+                return $child;
+            }
+        }
+    }
+
+    /**
+     * Creates or re-opens a child section.
+     *
+     * @param string|null $id null to create a new section, the identifier to re-open an existing one.
+     *
+     * @return Section A child section
+     */
+    public function open($id)
+    {
+        if (null === $session = $this->get($id)) {
+            $session = $this->children[] = new self(microtime(true) * 1000);
+        }
+
+        return $session;
+    }
+
+    /**
+     * @return string The identifier of the section
+     */
+    public function getId()
+    {
+        return $this->id;
+    }
+
+    /**
+     * Sets the session identifier.
+     *
+     * @param string $id The session identifier
+     *
+     * @return Section The current section
+     */
+    public function setId($id)
+    {
+        $this->id = $id;
+
+        return $this;
+    }
+
+    /**
+     * Starts an event.
+     *
+     * @param string $name     The event name
+     * @param string $category The event category
+     *
+     * @return StopwatchEvent The event
+     */
+    public function startEvent($name, $category)
+    {
+        if (!isset($this->events[$name])) {
+            $this->events[$name] = new StopwatchEvent($this->origin ?: microtime(true) * 1000, $category);
+        }
+
+        return $this->events[$name]->start();
+    }
+
+    /**
+     * Checks if the event was started
+     *
+     * @param string $name The event name
+     *
+     * @return bool
+     */
+    public function isEventStarted($name)
+    {
+        return isset($this->events[$name]) && $this->events[$name]->isStarted();
+    }
+
+    /**
+     * Stops an event.
+     *
+     * @param string $name The event name
+     *
+     * @return StopwatchEvent The event
+     *
+     * @throws \LogicException When the event has not been started
+     */
+    public function stopEvent($name)
+    {
+        if (!isset($this->events[$name])) {
+            throw new \LogicException(sprintf('Event "%s" is not started.', $name));
+        }
+
+        return $this->events[$name]->stop();
+    }
+
+    /**
+     * Stops then restarts an event.
+     *
+     * @param string $name The event name
+     *
+     * @return StopwatchEvent The event
+     *
+     * @throws \LogicException When the event has not been started
+     */
+    public function lap($name)
+    {
+        return $this->stopEvent($name)->start();
+    }
+
+    /**
+     * Returns a specific event by name
+     *
+     * @param string $name The event name
+     *
+     * @return StopwatchEvent The event
+     *
+     * @throws \LogicException When the event is not known
+     */
+    public function getEvent($name)
+    {
+        if (!isset($this->events[$name])) {
+            throw new \LogicException(sprintf('Event "%s" is not known.', $name));
+        }
+
+        return $this->events[$name];
+    }
+
+    /**
+     * Returns the events from this section.
+     *
+     * @return StopwatchEvent[] An array of StopwatchEvent instances
+     */
+    public function getEvents()
+    {
+        return $this->events;
+    }
+}
diff --git a/src/Symfony/Component/Stopwatch/Stopwatch.php b/src/Symfony/Component/Stopwatch/Stopwatch.php
index 291928eb081f..c1bec426a639 100644
--- a/src/Symfony/Component/Stopwatch/Stopwatch.php
+++ b/src/Symfony/Component/Stopwatch/Stopwatch.php
@@ -24,7 +24,7 @@ class Stopwatch
     private $sections;

     /**
-     * @var array
+     * @var Section[]
      */
     private $activeSections;

@@ -33,6 +33,14 @@ public function __construct()
         $this->sections = $this->activeSections = array('__root__' => new Section('__root__'));
     }

+    /**
+     * @return Section[]
+     */
+    public function getSections()
+    {
+        return $this->sections;
+    }
+
     /**
      * Creates a new section or re-opens an existing section.
      *
@@ -149,185 +157,3 @@ public function getSectionEvents($id)
         return isset($this->sections[$id]) ? $this->sections[$id]->getEvents() : array();
     }
 }
-
-
-/**
- * @internal This class is for internal usage only
- *
- * @author Fabien Potencier <fabien@symfony.com>
- */
-class Section
-{
-    /**
-     * @var StopwatchEvent[]
-     */
-    private $events = array();
-
-    /**
-     * @var null|float
-     */
-    private $origin;
-
-    /**
-     * @var string
-     */
-    private $id;
-
-    /**
-     * @var Section[]
-     */
-    private $children = array();
-
-    /**
-     * Constructor.
-     *
-     * @param float|null $origin Set the origin of the events in this section, use null to set their origin to their start time
-     */
-    public function __construct($origin = null)
-    {
-        $this->origin = is_numeric($origin) ? $origin : null;
-    }
-
-    /**
-     * Returns the child section.
-     *
-     * @param string $id The child section identifier
-     *
-     * @return Section|null The child section or null when none found
-     */
-    public function get($id)
-    {
-        foreach ($this->children as $child) {
-            if ($id === $child->getId()) {
-                return $child;
-            }
-        }
-    }
-
-    /**
-     * Creates or re-opens a child section.
-     *
-     * @param string|null $id null to create a new section, the identifier to re-open an existing one.
-     *
-     * @return Section A child section
-     */
-    public function open($id)
-    {
-        if (null === $session = $this->get($id)) {
-            $session = $this->children[] = new self(microtime(true) * 1000);
-        }
-
-        return $session;
-    }
-
-    /**
-     * @return string The identifier of the section
-     */
-    public function getId()
-    {
-        return $this->id;
-    }
-
-    /**
-     * Sets the session identifier.
-     *
-     * @param string $id The session identifier
-     *
-     * @return Section The current section
-     */
-    public function setId($id)
-    {
-        $this->id = $id;
-
-        return $this;
-    }
-
-    /**
-     * Starts an event.
-     *
-     * @param string $name     The event name
-     * @param string $category The event category
-     *
-     * @return StopwatchEvent The event
-     */
-    public function startEvent($name, $category)
-    {
-        if (!isset($this->events[$name])) {
-            $this->events[$name] = new StopwatchEvent($this->origin ?: microtime(true) * 1000, $category);
-        }
-
-        return $this->events[$name]->start();
-    }
-
-    /**
-     * Checks if the event was started
-     *
-     * @param string $name The event name
-     *
-     * @return bool
-     */
-    public function isEventStarted($name)
-    {
-        return isset($this->events[$name]) && $this->events[$name]->isStarted();
-    }
-
-    /**
-     * Stops an event.
-     *
-     * @param string $name The event name
-     *
-     * @return StopwatchEvent The event
-     *
-     * @throws \LogicException When the event has not been started
-     */
-    public function stopEvent($name)
-    {
-        if (!isset($this->events[$name])) {
-            throw new \LogicException(sprintf('Event "%s" is not started.', $name));
-        }
-
-        return $this->events[$name]->stop();
-    }
-
-    /**
-     * Stops then restarts an event.
-     *
-     * @param string $name The event name
-     *
-     * @return StopwatchEvent The event
-     *
-     * @throws \LogicException When the event has not been started
-     */
-    public function lap($name)
-    {
-        return $this->stopEvent($name)->start();
-    }
-
-    /**
-     * Returns a specific event by name
-     *
-     * @param string $name The event name
-     *
-     * @return StopwatchEvent The event
-     *
-     * @throws \LogicException When the event is not known
-     */
-    public function getEvent($name)
-    {
-        if (!isset($this->events[$name])) {
-            throw new \LogicException(sprintf('Event "%s" is not known.', $name));
-        }
-
-        return $this->events[$name];
-    }
-
-    /**
-     * Returns the events from this section.
-     *
-     * @return StopwatchEvent[] An array of StopwatchEvent instances
-     */
-    public function getEvents()
-    {
-        return $this->events;
-    }
-}
diff --git a/src/Symfony/Component/Stopwatch/composer.json b/src/Symfony/Component/Stopwatch/composer.json
index 75ed1f60fc05..b424c4ea1a0b 100644
--- a/src/Symfony/Component/Stopwatch/composer.json
+++ b/src/Symfony/Component/Stopwatch/composer.json
@@ -25,7 +25,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Component/Templating/composer.json b/src/Symfony/Component/Templating/composer.json
index d1dd60d15a2e..c6b42ba5921d 100644
--- a/src/Symfony/Component/Templating/composer.json
+++ b/src/Symfony/Component/Templating/composer.json
@@ -31,7 +31,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Component/Translation/Catalogue/DiffOperation.php b/src/Symfony/Component/Translation/Catalogue/DiffOperation.php
index 1672d121da41..5a153e207b9d 100644
--- a/src/Symfony/Component/Translation/Catalogue/DiffOperation.php
+++ b/src/Symfony/Component/Translation/Catalogue/DiffOperation.php
@@ -33,6 +33,9 @@ protected function processDomain($domain)
             if ($this->target->has($id, $domain)) {
                 $this->messages[$domain]['all'][$id] = $message;
                 $this->result->add(array($id => $message), $domain);
+                if (null !== $keyMetadata = $this->source->getMetadata($id, $domain)) {
+                    $this->result->setMetadata($id, $keyMetadata, $domain);
+                }
             } else {
                 $this->messages[$domain]['obsolete'][$id] = $message;
             }
@@ -43,6 +46,9 @@ protected function processDomain($domain)
                 $this->messages[$domain]['all'][$id] = $message;
                 $this->messages[$domain]['new'][$id] = $message;
                 $this->result->add(array($id => $message), $domain);
+                if (null !== $keyMetadata = $this->target->getMetadata($id, $domain)) {
+                    $this->result->setMetadata($id, $keyMetadata, $domain);
+                }
             }
         }
     }
diff --git a/src/Symfony/Component/Translation/Catalogue/MergeOperation.php b/src/Symfony/Component/Translation/Catalogue/MergeOperation.php
index 0052363efeaf..a91124433dbc 100644
--- a/src/Symfony/Component/Translation/Catalogue/MergeOperation.php
+++ b/src/Symfony/Component/Translation/Catalogue/MergeOperation.php
@@ -32,6 +32,9 @@ protected function processDomain($domain)
         foreach ($this->source->all($domain) as $id => $message) {
             $this->messages[$domain]['all'][$id] = $message;
             $this->result->add(array($id => $message), $domain);
+            if (null !== $keyMetadata = $this->source->getMetadata($id, $domain)) {
+                $this->result->setMetadata($id, $keyMetadata, $domain);
+            }
         }

         foreach ($this->target->all($domain) as $id => $message) {
@@ -39,6 +42,9 @@ protected function processDomain($domain)
                 $this->messages[$domain]['all'][$id] = $message;
                 $this->messages[$domain]['new'][$id] = $message;
                 $this->result->add(array($id => $message), $domain);
+                if (null !== $keyMetadata = $this->target->getMetadata($id, $domain)) {
+                    $this->result->setMetadata($id, $keyMetadata, $domain);
+                }
             }
         }
     }
diff --git a/src/Symfony/Component/Translation/Dumper/XliffFileDumper.php b/src/Symfony/Component/Translation/Dumper/XliffFileDumper.php
index 96c0c8a38745..bd9b01255eeb 100644
--- a/src/Symfony/Component/Translation/Dumper/XliffFileDumper.php
+++ b/src/Symfony/Component/Translation/Dumper/XliffFileDumper.php
@@ -50,6 +50,26 @@ protected function format(MessageCatalogue $messages, $domain)
             $t = $translation->appendChild($dom->createElement('target'));
             $t->appendChild($dom->createTextNode($target));

+            $metadata = $messages->getMetadata($source, $domain);
+            if (null !== $metadata && array_key_exists('notes', $metadata) && is_array($metadata['notes'])) {
+                foreach ($metadata['notes'] as $note) {
+                    if (!isset($note['content'])) {
+                        continue;
+                    }
+
+                    $n = $translation->appendChild($dom->createElement('note'));
+                    $n->appendChild($dom->createTextNode($note['content']));
+
+                    if (isset($note['priority'])) {
+                        $n->setAttribute('priority', $note['priority']);
+                    }
+
+                    if (isset($note['from'])) {
+                        $n->setAttribute('from', $note['from']);
+                    }
+                }
+            }
+
             $xliffBody->appendChild($translation);
         }

diff --git a/src/Symfony/Component/Translation/Loader/XliffFileLoader.php b/src/Symfony/Component/Translation/Loader/XliffFileLoader.php
index a86b02c2ee3b..18cd291d41d1 100644
--- a/src/Symfony/Component/Translation/Loader/XliffFileLoader.php
+++ b/src/Symfony/Component/Translation/Loader/XliffFileLoader.php
@@ -53,27 +53,61 @@ public function load($resource, $locale, $domain = 'messages')
             }

             $source = isset($attributes['resname']) && $attributes['resname'] ? $attributes['resname'] : $translation->source;
-            $target = (string) $translation->target;
-
             // If the xlf file has another encoding specified, try to convert it because
             // simple_xml will always return utf-8 encoded values
-            if ('UTF-8' !== $encoding && !empty($encoding)) {
-                if (function_exists('mb_convert_encoding')) {
-                    $target = mb_convert_encoding($target, $encoding, 'UTF-8');
-                } elseif (function_exists('iconv')) {
-                    $target = iconv('UTF-8', $encoding, $target);
-                } else {
-                    throw new \RuntimeException('No suitable convert encoding function (use UTF-8 as your encoding or install the iconv or mbstring extension).');
-                }
-            }
+            $target = $this->utf8ToCharset((string) $translation->target, $encoding);

             $catalogue->set((string) $source, $target, $domain);
+
+            if (isset($translation->note)) {
+                $notes = array();
+                foreach ($translation->note as $xmlNote) {
+                    $noteAttributes = $xmlNote->attributes();
+                    $note = array('content' => $this->utf8ToCharset((string) $xmlNote, $encoding));
+                    if (isset($noteAttributes['priority'])) {
+                        $note['priority'] = (int) $noteAttributes['priority'];
+                    }
+
+                    if (isset($noteAttributes['from'])) {
+                        $note['from'] = (string) $noteAttributes['from'];
+                    }
+
+                    $notes[] = $note;
+                }
+
+                $catalogue->setMetadata((string) $source, array('notes' => $notes), $domain);
+            }
         }
         $catalogue->addResource(new FileResource($resource));

         return $catalogue;
     }

+    /**
+     * Convert a UTF8 string to the specified encoding
+     *
+     * @param string $content  String to decode
+     * @param string $encoding Target encoding
+     *
+     * @return string
+     */
+    private function utf8ToCharset($content, $encoding=null)
+    {
+        if ('UTF-8' !== $encoding && !empty($encoding)) {
+            if (function_exists('mb_convert_encoding')) {
+                return mb_convert_encoding($content, $encoding, 'UTF-8');
+            }
+
+            if (function_exists('iconv')) {
+                return iconv('UTF-8', $encoding, $content);
+            }
+
+            throw new \RuntimeException('No suitable convert encoding function (use UTF-8 as your encoding or install the iconv or mbstring extension).');
+        }
+
+        return $content;
+    }
+
     /**
      * Validates and parses the given file into a SimpleXMLElement
      *
diff --git a/src/Symfony/Component/Translation/README.md b/src/Symfony/Component/Translation/README.md
index 641db8733c3c..a9e395c54d2e 100644
--- a/src/Symfony/Component/Translation/README.md
+++ b/src/Symfony/Component/Translation/README.md
@@ -26,7 +26,7 @@ https://github.com/fabpot/Silex/blob/master/src/Silex/Provider/TranslationServic

 Documentation:

-http://symfony.com/doc/2.5/book/translation.html
+http://symfony.com/doc/2.6/book/translation.html

 You can run the unit tests with the following command:

diff --git a/src/Symfony/Component/Translation/Tests/Catalogue/DiffOperationTest.php b/src/Symfony/Component/Translation/Tests/Catalogue/DiffOperationTest.php
index b70324285e60..28808ded8a9e 100644
--- a/src/Symfony/Component/Translation/Tests/Catalogue/DiffOperationTest.php
+++ b/src/Symfony/Component/Translation/Tests/Catalogue/DiffOperationTest.php
@@ -53,6 +53,28 @@ public function testGetResultFromSingleDomain()
         );
     }

+    public function testGetResultWithMetadata()
+    {
+        $leftCatalogue = new MessageCatalogue('en', array('messages' => array('a' => 'old_a', 'b' => 'old_b')));
+        $leftCatalogue->setMetadata('a', 'foo', 'messages');
+        $leftCatalogue->setMetadata('b', 'bar', 'messages');
+        $rightCatalogue = new MessageCatalogue('en', array('messages' => array('b' => 'new_b', 'c' => 'new_c')));
+        $rightCatalogue->setMetadata('b', 'baz', 'messages');
+        $rightCatalogue->setMetadata('c', 'qux', 'messages');
+
+        $diffCatalogue = new MessageCatalogue('en', array('messages' => array('b' => 'old_b', 'c' => 'new_c')));
+        $diffCatalogue->setMetadata('b', 'bar', 'messages');
+        $diffCatalogue->setMetadata('c', 'qux', 'messages');
+
+        $this->assertEquals(
+            $diffCatalogue,
+            $this->createOperation(
+                $leftCatalogue,
+                $rightCatalogue
+            )->getResult()
+        );
+    }
+
     protected function createOperation(MessageCatalogueInterface $source, MessageCatalogueInterface $target)
     {
         return new DiffOperation($source, $target);
diff --git a/src/Symfony/Component/Translation/Tests/Catalogue/MergeOperationTest.php b/src/Symfony/Component/Translation/Tests/Catalogue/MergeOperationTest.php
index 6f463b9a02da..22b53fcc8fff 100644
--- a/src/Symfony/Component/Translation/Tests/Catalogue/MergeOperationTest.php
+++ b/src/Symfony/Component/Translation/Tests/Catalogue/MergeOperationTest.php
@@ -53,6 +53,29 @@ public function testGetResultFromSingleDomain()
         );
     }

+    public function testGetResultWithMetadata()
+    {
+        $leftCatalogue = new MessageCatalogue('en', array('messages' => array('a' => 'old_a', 'b' => 'old_b')));
+        $leftCatalogue->setMetadata('a', 'foo', 'messages');
+        $leftCatalogue->setMetadata('b', 'bar', 'messages');
+        $rightCatalogue = new MessageCatalogue('en', array('messages' => array('b' => 'new_b', 'c' => 'new_c')));
+        $rightCatalogue->setMetadata('b', 'baz', 'messages');
+        $rightCatalogue->setMetadata('c', 'qux', 'messages');
+
+        $mergedCatalogue = new MessageCatalogue('en', array('messages' => array('a' => 'old_a', 'b' => 'old_b', 'c' => 'new_c')));
+        $mergedCatalogue->setMetadata('a', 'foo', 'messages');
+        $mergedCatalogue->setMetadata('b', 'bar', 'messages');
+        $mergedCatalogue->setMetadata('c', 'qux', 'messages');
+
+        $this->assertEquals(
+            $mergedCatalogue,
+            $this->createOperation(
+                $leftCatalogue,
+                $rightCatalogue
+            )->getResult()
+        );
+    }
+
     protected function createOperation(MessageCatalogueInterface $source, MessageCatalogueInterface $target)
     {
         return new MergeOperation($source, $target);
diff --git a/src/Symfony/Component/Translation/Tests/Dumper/XliffFileDumperTest.php b/src/Symfony/Component/Translation/Tests/Dumper/XliffFileDumperTest.php
index bef31358c58f..daf0f7a37d8d 100644
--- a/src/Symfony/Component/Translation/Tests/Dumper/XliffFileDumperTest.php
+++ b/src/Symfony/Component/Translation/Tests/Dumper/XliffFileDumperTest.php
@@ -20,6 +20,8 @@ public function testDump()
     {
         $catalogue = new MessageCatalogue('en');
         $catalogue->add(array('foo' => 'bar', 'key' => ''));
+        $catalogue->setMetadata('foo', array('notes' => array(array('priority' => 1, 'from' => 'bar', 'content' => 'baz'))));
+        $catalogue->setMetadata('key', array('notes' => array(array('content' => 'baz'), array('content' => 'qux'))));

         $tempDir = sys_get_temp_dir();
         $dumper = new XliffFileDumper();
diff --git a/src/Symfony/Component/Translation/Tests/Loader/XliffFileLoaderTest.php b/src/Symfony/Component/Translation/Tests/Loader/XliffFileLoaderTest.php
index 49a6265dc24e..02b80ec7ef06 100644
--- a/src/Symfony/Component/Translation/Tests/Loader/XliffFileLoaderTest.php
+++ b/src/Symfony/Component/Translation/Tests/Loader/XliffFileLoaderTest.php
@@ -54,6 +54,7 @@ public function testEncoding()

         $this->assertEquals(utf8_decode('föö'), $catalogue->get('bar', 'domain1'));
         $this->assertEquals(utf8_decode('bär'), $catalogue->get('foo', 'domain1'));
+        $this->assertEquals(array('notes' => array(array('content' => utf8_decode('bäz')))), $catalogue->getMetadata('foo', 'domain1'));
     }

     /**
@@ -111,4 +112,15 @@ public function testParseEmptyFile()
         $this->setExpectedException('Symfony\Component\Translation\Exception\InvalidResourceException', sprintf('Unable to load "%s":', $resource));
         $loader->load($resource, 'en', 'domain1');
     }
+
+    public function testLoadNotes()
+    {
+        $loader = new XliffFileLoader();
+        $catalogue = $loader->load(__DIR__.'/../fixtures/withnote.xlf', 'en', 'domain1');
+
+        $this->assertEquals(array('notes' => array(array('priority' => 1, 'content' => 'foo'))), $catalogue->getMetadata('foo', 'domain1'));
+        // message without target
+        $this->assertNull($catalogue->getMetadata('extra', 'domain1'));
+        $this->assertEquals(array('notes' => array(array('content' => 'baz'), array('priority' => 2, 'from' => 'bar', 'content' => 'qux'))), $catalogue->getMetadata('key', 'domain1'));
+    }
 }
diff --git a/src/Symfony/Component/Translation/Tests/fixtures/encoding.xlf b/src/Symfony/Component/Translation/Tests/fixtures/encoding.xlf
index 6be901bd75e0..0a88f9265052 100644
--- a/src/Symfony/Component/Translation/Tests/fixtures/encoding.xlf
+++ b/src/Symfony/Component/Translation/Tests/fixtures/encoding.xlf
@@ -5,6 +5,7 @@
       <trans-unit id="1" resname="foo">
         <source>foo</source>
         <target>b�r</target>
+        <note>b�z</note>
       </trans-unit>
       <trans-unit id="2" resname="bar">
         <source>bar</source>
diff --git a/src/Symfony/Component/Translation/Tests/fixtures/resources-clean.xlf b/src/Symfony/Component/Translation/Tests/fixtures/resources-clean.xlf
index 464b07920021..3c38d3d19af5 100644
--- a/src/Symfony/Component/Translation/Tests/fixtures/resources-clean.xlf
+++ b/src/Symfony/Component/Translation/Tests/fixtures/resources-clean.xlf
@@ -5,10 +5,13 @@
       <trans-unit id="acbd18db4cc2f85cedef654fccc4a4d8" resname="foo">
         <source>foo</source>
         <target>bar</target>
+        <note priority="1" from="bar">baz</note>
       </trans-unit>
       <trans-unit id="3c6e0b8a9c15224a8228b9a98ca1531d" resname="key">
         <source>key</source>
         <target></target>
+        <note>baz</note>
+        <note>qux</note>
       </trans-unit>
     </body>
   </file>
diff --git a/src/Symfony/Component/Translation/Tests/fixtures/withnote.xlf b/src/Symfony/Component/Translation/Tests/fixtures/withnote.xlf
new file mode 100644
index 000000000000..b1d3f83a0c71
--- /dev/null
+++ b/src/Symfony/Component/Translation/Tests/fixtures/withnote.xlf
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
+  <file source-language="en" datatype="plaintext" original="file.ext">
+    <body>
+      <trans-unit id="1">
+        <source>foo</source>
+        <target>bar</target>
+        <note priority="1">foo</note>
+      </trans-unit>
+      <trans-unit id="2">
+        <source>extra</source>
+        <note from="foo">bar</note>
+      </trans-unit>
+      <trans-unit id="3">
+        <source>key</source>
+        <target></target>
+        <note>baz</note>
+        <note priority="2" from="bar">qux</note>
+      </trans-unit>
+    </body>
+  </file>
+</xliff>
diff --git a/src/Symfony/Component/Translation/composer.json b/src/Symfony/Component/Translation/composer.json
index 37fef3045138..37248c45400e 100644
--- a/src/Symfony/Component/Translation/composer.json
+++ b/src/Symfony/Component/Translation/composer.json
@@ -33,7 +33,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Component/Validator/CHANGELOG.md b/src/Symfony/Component/Validator/CHANGELOG.md
index 34fe232dcfe7..4dcb568a6174 100644
--- a/src/Symfony/Component/Validator/CHANGELOG.md
+++ b/src/Symfony/Component/Validator/CHANGELOG.md
@@ -1,6 +1,11 @@
 CHANGELOG
 =========

+2.6.0
+-----
+
+ * [BC BREAK] `FileValidator` disallow empty files
+
 2.5.0
 -----

diff --git a/src/Symfony/Component/Validator/Constraints/Choice.php b/src/Symfony/Component/Validator/Constraints/Choice.php
index c2b3436206f6..467b58630310 100644
--- a/src/Symfony/Component/Validator/Constraints/Choice.php
+++ b/src/Symfony/Component/Validator/Constraints/Choice.php
@@ -27,8 +27,8 @@ class Choice extends Constraint
     public $callback;
     public $multiple = false;
     public $strict = false;
-    public $min = null;
-    public $max = null;
+    public $min;
+    public $max;
     public $message = 'The value you selected is not a valid choice.';
     public $multipleMessage = 'One or more of the given values is invalid.';
     public $minMessage = 'You must select at least {{ limit }} choice.|You must select at least {{ limit }} choices.';
diff --git a/src/Symfony/Component/Validator/Constraints/Email.php b/src/Symfony/Component/Validator/Constraints/Email.php
index 8d239a4a81e0..1f8755750bc2 100644
--- a/src/Symfony/Component/Validator/Constraints/Email.php
+++ b/src/Symfony/Component/Validator/Constraints/Email.php
@@ -26,5 +26,5 @@ class Email extends Constraint
     public $message = 'This value is not a valid email address.';
     public $checkMX = false;
     public $checkHost = false;
-    public $strict = null;
+    public $strict;
 }
diff --git a/src/Symfony/Component/Validator/Constraints/File.php b/src/Symfony/Component/Validator/Constraints/File.php
index 80527171ecbe..9ed818c13bed 100644
--- a/src/Symfony/Component/Validator/Constraints/File.php
+++ b/src/Symfony/Component/Validator/Constraints/File.php
@@ -12,6 +12,7 @@
 namespace Symfony\Component\Validator\Constraints;

 use Symfony\Component\Validator\Constraint;
+use Symfony\Component\Validator\Exception\ConstraintDefinitionException;

 /**
  * @Annotation
@@ -23,12 +24,14 @@
  */
 class File extends Constraint
 {
-    public $maxSize = null;
+    public $maxSize;
+    public $binaryFormat;
     public $mimeTypes = array();
     public $notFoundMessage = 'The file could not be found.';
     public $notReadableMessage = 'The file is not readable.';
     public $maxSizeMessage = 'The file is too large ({{ size }} {{ suffix }}). Allowed maximum size is {{ limit }} {{ suffix }}.';
     public $mimeTypesMessage = 'The mime type of the file is invalid ({{ type }}). Allowed mime types are {{ types }}.';
+    public $disallowEmptyMessage = 'An empty file is not allowed.';

     public $uploadIniSizeErrorMessage   = 'The file is too large. Allowed maximum size is {{ limit }} {{ suffix }}.';
     public $uploadFormSizeErrorMessage  = 'The file is too large.';
@@ -38,4 +41,30 @@ class File extends Constraint
     public $uploadCantWriteErrorMessage = 'Cannot write temporary file to disk.';
     public $uploadExtensionErrorMessage = 'A PHP extension caused the upload to fail.';
     public $uploadErrorMessage          = 'The file could not be uploaded.';
+
+    public function __construct($options = null)
+    {
+        parent::__construct($options);
+
+        if ($this->maxSize) {
+            if (ctype_digit((string) $this->maxSize)) {
+                $this->maxSize = (int) $this->maxSize;
+                $this->binaryFormat = null === $this->binaryFormat ? false : $this->binaryFormat;
+            } elseif (preg_match('/^\d++k$/i', $this->maxSize)) {
+                $this->maxSize = $this->maxSize * 1000;
+                $this->binaryFormat = null === $this->binaryFormat ? false : $this->binaryFormat;
+            } elseif (preg_match('/^\d++M$/i', $this->maxSize)) {
+                $this->maxSize = $this->maxSize * 1000000;
+                $this->binaryFormat = null === $this->binaryFormat ? false : $this->binaryFormat;
+            } elseif (preg_match('/^\d++Ki$/i', $this->maxSize)) {
+                $this->maxSize = $this->maxSize << 10;
+                $this->binaryFormat = null === $this->binaryFormat ? true : $this->binaryFormat;
+            } elseif (preg_match('/^\d++Mi$/i', $this->maxSize)) {
+                $this->maxSize = $this->maxSize << 20;
+                $this->binaryFormat = null === $this->binaryFormat ? true : $this->binaryFormat;
+            } else {
+                throw new ConstraintDefinitionException(sprintf('"%s" is not a valid maximum size', $this->maxSize));
+            }
+        }
+    }
 }
diff --git a/src/Symfony/Component/Validator/Constraints/FileValidator.php b/src/Symfony/Component/Validator/Constraints/FileValidator.php
index aa81ba25c1e9..2c1378e588a2 100644
--- a/src/Symfony/Component/Validator/Constraints/FileValidator.php
+++ b/src/Symfony/Component/Validator/Constraints/FileValidator.php
@@ -15,7 +15,6 @@
 use Symfony\Component\HttpFoundation\File\UploadedFile;
 use Symfony\Component\Validator\Constraint;
 use Symfony\Component\Validator\ConstraintValidator;
-use Symfony\Component\Validator\Exception\ConstraintDefinitionException;
 use Symfony\Component\Validator\Exception\UnexpectedTypeException;

 /**
@@ -26,13 +25,16 @@
 class FileValidator extends ConstraintValidator
 {
     const KB_BYTES = 1000;
-
     const MB_BYTES = 1000000;
+    const KIB_BYTES = 1024;
+    const MIB_BYTES = 1048576;

     private static $suffices = array(
         1 => 'bytes',
         self::KB_BYTES => 'kB',
         self::MB_BYTES => 'MB',
+        self::KIB_BYTES => 'KiB',
+        self::MIB_BYTES => 'MiB',
     );

     /**
@@ -52,16 +54,7 @@ public function validate($value, Constraint $constraint)
             switch ($value->getError()) {
                 case UPLOAD_ERR_INI_SIZE:
                     if ($constraint->maxSize) {
-                        if (ctype_digit((string) $constraint->maxSize)) {
-                            $limitInBytes = (int) $constraint->maxSize;
-                        } elseif (preg_match('/^\d++k$/', $constraint->maxSize)) {
-                            $limitInBytes = $constraint->maxSize * self::KB_BYTES;
-                        } elseif (preg_match('/^\d++M$/', $constraint->maxSize)) {
-                            $limitInBytes = $constraint->maxSize * self::MB_BYTES;
-                        } else {
-                            throw new ConstraintDefinitionException(sprintf('"%s" is not a valid maximum size', $constraint->maxSize));
-                        }
-                        $limitInBytes = min(UploadedFile::getMaxFilesize(), $limitInBytes);
+                        $limitInBytes = min(UploadedFile::getMaxFilesize(), $constraint->maxSize);
                     } else {
                         $limitInBytes = UploadedFile::getMaxFilesize();
                     }
@@ -121,28 +114,29 @@ public function validate($value, Constraint $constraint)
             return;
         }

-        if ($constraint->maxSize) {
-            $sizeInBytes = filesize($path);
-            $limitInBytes = (int) $constraint->maxSize;
-
-            if (preg_match('/^\d++k$/', $constraint->maxSize)) {
-                $limitInBytes *= self::KB_BYTES;
-            } elseif (preg_match('/^\d++M$/', $constraint->maxSize)) {
-                $limitInBytes *= self::MB_BYTES;
-            } elseif (!ctype_digit((string) $constraint->maxSize)) {
-                throw new ConstraintDefinitionException(sprintf('"%s" is not a valid maximum size', $constraint->maxSize));
-            }
+        $sizeInBytes = filesize($path);
+        if (0 === $sizeInBytes) {
+            $this->context->addViolation($constraint->disallowEmptyMessage);
+        } elseif ($constraint->maxSize) {
+            $limitInBytes = $constraint->maxSize;

             if ($sizeInBytes > $limitInBytes) {
                 // Convert the limit to the smallest possible number
                 // (i.e. try "MB", then "kB", then "bytes")
-                $coef = self::MB_BYTES;
+                if ($constraint->binaryFormat) {
+                    $coef = self::MIB_BYTES;
+                    $coefFactor = self::KIB_BYTES;
+                } else {
+                    $coef = self::MB_BYTES;
+                    $coefFactor = self::KB_BYTES;
+                }
+
                 $limitAsString = (string) ($limitInBytes / $coef);

                 // Restrict the limit to 2 decimals (without rounding! we
                 // need the precise value)
                 while (self::moreDecimalsThan($limitAsString, 2)) {
-                    $coef /= 1000;
+                    $coef /= $coefFactor;
                     $limitAsString = (string) ($limitInBytes / $coef);
                 }

@@ -152,7 +146,7 @@ public function validate($value, Constraint $constraint)
                 // If the size and limit produce the same string output
                 // (due to rounding), reduce the coefficient
                 while ($sizeAsString === $limitAsString) {
-                    $coef /= 1000;
+                    $coef /= $coefFactor;
                     $limitAsString = (string) ($limitInBytes / $coef);
                     $sizeAsString = (string) round($sizeInBytes / $coef, 2);
                 }
diff --git a/src/Symfony/Component/Validator/Constraints/Image.php b/src/Symfony/Component/Validator/Constraints/Image.php
index 6401603a752e..85f2f3c9c87c 100644
--- a/src/Symfony/Component/Validator/Constraints/Image.php
+++ b/src/Symfony/Component/Validator/Constraints/Image.php
@@ -20,12 +20,12 @@
 class Image extends File
 {
     public $mimeTypes = 'image/*';
-    public $minWidth = null;
-    public $maxWidth = null;
-    public $maxHeight = null;
-    public $minHeight = null;
-    public $maxRatio = null;
-    public $minRatio = null;
+    public $minWidth;
+    public $maxWidth;
+    public $maxHeight;
+    public $minHeight;
+    public $maxRatio;
+    public $minRatio;
     public $allowSquare = true;
     public $allowLandscape = true;
     public $allowPortrait = true;
diff --git a/src/Symfony/Component/Validator/Constraints/Regex.php b/src/Symfony/Component/Validator/Constraints/Regex.php
index aa4babba68e1..01cd1065e1de 100644
--- a/src/Symfony/Component/Validator/Constraints/Regex.php
+++ b/src/Symfony/Component/Validator/Constraints/Regex.php
@@ -25,7 +25,7 @@ class Regex extends Constraint
 {
     public $message = 'This value is not valid.';
     public $pattern;
-    public $htmlPattern = null;
+    public $htmlPattern;
     public $match = true;

     /**
diff --git a/src/Symfony/Component/Validator/Mapping/Factory/LazyLoadingMetadataFactory.php b/src/Symfony/Component/Validator/Mapping/Factory/LazyLoadingMetadataFactory.php
index eb0f3c460e09..dc84824c6c38 100644
--- a/src/Symfony/Component/Validator/Mapping/Factory/LazyLoadingMetadataFactory.php
+++ b/src/Symfony/Component/Validator/Mapping/Factory/LazyLoadingMetadataFactory.php
@@ -42,14 +42,14 @@ class LazyLoadingMetadataFactory implements MetadataFactoryInterface
     /**
      * The loader for loading the class metadata
      *
-     * @var LoaderInterface
+     * @var LoaderInterface|null
      */
     protected $loader;

     /**
      * The cache for caching class metadata
      *
-     * @var CacheInterface
+     * @var CacheInterface|null
      */
     protected $cache;

diff --git a/src/Symfony/Component/Validator/Mapping/Loader/XmlFileLoader.php b/src/Symfony/Component/Validator/Mapping/Loader/XmlFileLoader.php
index b9ddaa3505a2..5d63f4018437 100644
--- a/src/Symfony/Component/Validator/Mapping/Loader/XmlFileLoader.php
+++ b/src/Symfony/Component/Validator/Mapping/Loader/XmlFileLoader.php
@@ -20,9 +20,9 @@ class XmlFileLoader extends FileLoader
     /**
      * An array of SimpleXMLElement instances.
      *
-     * @var \SimpleXMLElement[]
+     * @var \SimpleXMLElement[]|null
      */
-    protected $classes = null;
+    protected $classes;

     /**
      * {@inheritdoc}
diff --git a/src/Symfony/Component/Validator/README.md b/src/Symfony/Component/Validator/README.md
index 6825a2feee19..83eaa1e3ba2c 100644
--- a/src/Symfony/Component/Validator/README.md
+++ b/src/Symfony/Component/Validator/README.md
@@ -107,7 +107,7 @@ https://github.com/fabpot/Silex/blob/master/src/Silex/Provider/ValidatorServiceP

 Documentation:

-http://symfony.com/doc/2.5/book/validation.html
+http://symfony.com/doc/2.6/book/validation.html

 JSR-303 Specification:

diff --git a/src/Symfony/Component/Validator/Resources/translations/validators.cs.xlf b/src/Symfony/Component/Validator/Resources/translations/validators.cs.xlf
index 51de1275de19..178af1765e69 100644
--- a/src/Symfony/Component/Validator/Resources/translations/validators.cs.xlf
+++ b/src/Symfony/Component/Validator/Resources/translations/validators.cs.xlf
@@ -92,11 +92,11 @@
             </trans-unit>
             <trans-unit id="23">
                 <source>This value should not be null.</source>
-                <target>Tato hodnota nesmí být prázdná.</target>
+                <target>Tato hodnota nesmí být null.</target>
             </trans-unit>
             <trans-unit id="24">
                 <source>This value should be null.</source>
-                <target>Tato hodnota musí být prázdná.</target>
+                <target>Tato hodnota musí být null.</target>
             </trans-unit>
             <trans-unit id="25">
                 <source>This value is not valid.</source>
@@ -298,6 +298,10 @@
                 <source>The image is portrait oriented ({{ width }}x{{ height }}px). Portrait oriented images are not allowed.</source>
                 <target>Obrázek je orientovaný na výšku ({{ width }}x{{ height }}px). Obrázky orientované na výšku nejsou povolené.</target>
             </trans-unit>
+            <trans-unit id="78">
+                <source>An empty file is not allowed.</source>
+                <target>Soubor nesmí být prázdný.</target>
+            </trans-unit>
         </body>
     </file>
 </xliff>
diff --git a/src/Symfony/Component/Validator/Resources/translations/validators.en.xlf b/src/Symfony/Component/Validator/Resources/translations/validators.en.xlf
index 052189b0aa3d..c358387cc611 100644
--- a/src/Symfony/Component/Validator/Resources/translations/validators.en.xlf
+++ b/src/Symfony/Component/Validator/Resources/translations/validators.en.xlf
@@ -298,6 +298,10 @@
                 <source>The image is portrait oriented ({{ width }}x{{ height }}px). Portrait oriented images are not allowed.</source>
                 <target>The image is portrait oriented ({{ width }}x{{ height }}px). Portrait oriented images are not allowed.</target>
             </trans-unit>
+            <trans-unit id="78">
+                <source>An empty file is not allowed.</source>
+                <target>An empty file is not allowed.</target>
+            </trans-unit>
         </body>
     </file>
 </xliff>
diff --git a/src/Symfony/Component/Validator/Resources/translations/validators.es.xlf b/src/Symfony/Component/Validator/Resources/translations/validators.es.xlf
index 2765fa2ae400..6c5629c6fb18 100644
--- a/src/Symfony/Component/Validator/Resources/translations/validators.es.xlf
+++ b/src/Symfony/Component/Validator/Resources/translations/validators.es.xlf
@@ -298,6 +298,10 @@
                 <source>The image is portrait oriented ({{ width }}x{{ height }}px). Portrait oriented images are not allowed.</source>
                 <target>La imagen está orientada vertical ({{ width }}x{{ height }}px). Imágenes orientada vertical no está permitido.</target>
             </trans-unit>
+            <trans-unit id="78">
+                <source>An empty file is not allowed.</source>
+                <target>No está permitido un archivo vacío.</target>
+            </trans-unit>
         </body>
     </file>
 </xliff>
diff --git a/src/Symfony/Component/Validator/Resources/translations/validators.hu.xlf b/src/Symfony/Component/Validator/Resources/translations/validators.hu.xlf
index f563c88554d6..09996479ea9b 100644
--- a/src/Symfony/Component/Validator/Resources/translations/validators.hu.xlf
+++ b/src/Symfony/Component/Validator/Resources/translations/validators.hu.xlf
@@ -297,7 +297,11 @@
             <trans-unit id="77">
                 <source>The image is portrait oriented ({{ width }}x{{ height }}px). Portrait oriented images are not allowed.</source>
                 <target>A kép álló tájolású ({{ width }}x{{ height }}px). Az álló tájolású képek nem engedélyezettek.</target>
-            </trans-unit>
+            </trans-unit>
+            <trans-unit id="78">
+                <source>An empty file is not allowed.</source>
+                <target>Üres fájl nem megengedett.</target>
+            </trans-unit>
         </body>
     </file>
 </xliff>
diff --git a/src/Symfony/Component/Validator/Resources/translations/validators.ja.xlf b/src/Symfony/Component/Validator/Resources/translations/validators.ja.xlf
index 1366192f3384..9512cb260458 100644
--- a/src/Symfony/Component/Validator/Resources/translations/validators.ja.xlf
+++ b/src/Symfony/Component/Validator/Resources/translations/validators.ja.xlf
@@ -298,6 +298,10 @@
                 <source>The image is portrait oriented ({{ width }}x{{ height }}px). Portrait oriented images are not allowed.</source>
                 <target>画像が縦向きになっています({{ width }}x{{ height }}ピクセル)。縦向きの画像は許可されていません。</target>
             </trans-unit>
+            <trans-unit id="78">
+                <source>An empty file is not allowed.</source>
+                <target>空のファイルは許可されていません。</target>
+            </trans-unit>
         </body>
     </file>
 </xliff>
diff --git a/src/Symfony/Component/Validator/Resources/translations/validators.lt.xlf b/src/Symfony/Component/Validator/Resources/translations/validators.lt.xlf
index 41b0e3b19a1d..58737da20f95 100644
--- a/src/Symfony/Component/Validator/Resources/translations/validators.lt.xlf
+++ b/src/Symfony/Component/Validator/Resources/translations/validators.lt.xlf
@@ -278,6 +278,30 @@
                 <source>This value should not be identical to {{ compared_value_type }} {{ compared_value }}.</source>
                 <target>Ši reikšmė neturi būti identiška {{ compared_value_type }} {{ compared_value }}.</target>
             </trans-unit>
+            <trans-unit id="73">
+                <source>The image ratio is too big ({{ ratio }}). Allowed maximum ratio is {{ max_ratio }}.</source>
+                <target>Nuotraukos santykis yra per didelis ({{ ratio }}). Didžiausias leistinas santykis yra {{ max_ratio }}.</target>
+            </trans-unit>
+            <trans-unit id="74">
+                <source>The image ratio is too small ({{ ratio }}). Minimum ratio expected is {{ min_ratio }}.</source>
+                <target>Nuotraukos santykis yra per mažas ({{ ratio }}). Mažiausias leistinas santykis yra {{ min_ratio }}.</target>
+            </trans-unit>
+            <trans-unit id="75">
+                <source>The image is square ({{ width }}x{{ height }}px). Square images are not allowed.</source>
+                <target>Nuotrauka yra kvadratinė ({{ width }}x{{ height }}px). Kvadratinės nuotraukos nėra leistinos.</target>
+            </trans-unit>
+            <trans-unit id="76">
+                <source>The image is landscape oriented ({{ width }}x{{ height }}px). Landscape oriented images are not allowed.</source>
+                <target>Nuotrauka orientuota į plotį ({{ width }}x{{ height }}px). Nuotraukos orientuotos į plotį nėra leistinos.</target>
+            </trans-unit>
+            <trans-unit id="77">
+                <source>The image is portrait oriented ({{ width }}x{{ height }}px). Portrait oriented images are not allowed.</source>
+                <target>Nuotrauka orientuota į aukštį ({{ width }}x{{ height }}px). Nuotraukos orientuotos į aukštį nėra leistinos.</target>
+            </trans-unit>
+            <trans-unit id="78">
+                <source>An empty file is not allowed.</source>
+                <target>Failas negali būti tuščias.</target>
+            </trans-unit>
         </body>
     </file>
 </xliff>
diff --git a/src/Symfony/Component/Validator/Resources/translations/validators.nl.xlf b/src/Symfony/Component/Validator/Resources/translations/validators.nl.xlf
index 1caed4eef7f9..235083f1e4f8 100644
--- a/src/Symfony/Component/Validator/Resources/translations/validators.nl.xlf
+++ b/src/Symfony/Component/Validator/Resources/translations/validators.nl.xlf
@@ -278,6 +278,30 @@
                 <source>This value should not be identical to {{ compared_value }}.</source>
                 <target>Deze waarde mag niet identiek zijn aan {{ compared_value }}.</target>
             </trans-unit>
+            <trans-unit id="73">
+                <source>The image ratio is too big ({{ ratio }}). Allowed maximum ratio is {{ max_ratio }}.</source>
+                <target>De afbeeldingsverhouding is te groot ({{ ratio }}). Maximale verhouding is {{ max_ratio }}.</target>
+            </trans-unit>
+            <trans-unit id="74">
+                <source>The image ratio is too small ({{ ratio }}). Minimum ratio expected is {{ min_ratio }}.</source>
+                <target>De afbeeldingsverhouding is te klein ({{ ratio }}). Minimale verhouding is {{ min_ratio }}.</target>
+            </trans-unit>
+            <trans-unit id="75">
+                <source>The image is square ({{ width }}x{{ height }}px). Square images are not allowed.</source>
+                <target>De afbeelding is vierkant ({{ width }}x{{ height }}px). Vierkante afbeeldingen zijn niet toegestaan.</target>
+            </trans-unit>
+            <trans-unit id="76">
+                <source>The image is landscape oriented ({{ width }}x{{ height }}px). Landscape oriented images are not allowed.</source>
+                <target>De afbeelding is liggend ({{ width }}x{{ height }}px). Liggende afbeeldingen zijn niet toegestaan.</target>
+            </trans-unit>
+            <trans-unit id="77">
+                <source>The image is portrait oriented ({{ width }}x{{ height }}px). Portrait oriented images are not allowed.</source>
+                <target>De afbeelding is staand ({{ width }}x{{ height }}px). Staande afbeeldingen zijn niet toegestaan.</target>
+            </trans-unit>
+            <trans-unit id="78">
+                <source>An empty file is not allowed.</source>
+                <target>Lege bestanden zijn niet toegestaan.</target>
+            </trans-unit>
         </body>
     </file>
 </xliff>
diff --git a/src/Symfony/Component/Validator/Resources/translations/validators.pl.xlf b/src/Symfony/Component/Validator/Resources/translations/validators.pl.xlf
index 85c2e88c8a74..795ee36e217f 100644
--- a/src/Symfony/Component/Validator/Resources/translations/validators.pl.xlf
+++ b/src/Symfony/Component/Validator/Resources/translations/validators.pl.xlf
@@ -298,6 +298,10 @@
                 <source>The image is portrait oriented ({{ width }}x{{ height }}px). Portrait oriented images are not allowed.</source>
                 <target>Obraz jest portretowy ({{ width }}x{{ height }}px). Portretowe zdjęcia nie są akceptowane.</target>
             </trans-unit>
+            <trans-unit id="78">
+                <source>An empty file is not allowed.</source>
+                <target>Plik nie może być pusty.</target>
+            </trans-unit>
         </body>
     </file>
 </xliff>
diff --git a/src/Symfony/Component/Validator/Resources/translations/validators.pt.xlf b/src/Symfony/Component/Validator/Resources/translations/validators.pt.xlf
index 354ecc6cc9ba..6332c4886f4a 100644
--- a/src/Symfony/Component/Validator/Resources/translations/validators.pt.xlf
+++ b/src/Symfony/Component/Validator/Resources/translations/validators.pt.xlf
@@ -278,6 +278,30 @@
                 <source>This value should not be identical to {{ compared_value_type }} {{ compared_value }}.</source>
                 <target>Este valor não deve ser idêntico a {{ compared_value_type }} {{ compared_value }}.</target>
             </trans-unit>
+            <trans-unit id="73">
+                <source>The image ratio is too big ({{ ratio }}). Allowed maximum ratio is {{ max_ratio }}.</source>
+                <target>O formato da imagem é muito grande ({{ ratio }}). O formato máximo é {{ max_ratio }}.</target>
+            </trans-unit>
+            <trans-unit id="74">
+                <source>The image ratio is too small ({{ ratio }}). Minimum ratio expected is {{ min_ratio }}.</source>
+                <target>O formato da imagem é muito pequeno ({{ ratio }}). O formato mínimo esperado é {{ min_ratio }}.</target>
+            </trans-unit>
+            <trans-unit id="75">
+                <source>The image is square ({{ width }}x{{ height }}px). Square images are not allowed.</source>
+                <target>A imagem é um quadrado ({{ width }}x{{ height }}px). Imagens quadradas não são permitidas.</target>
+            </trans-unit>
+            <trans-unit id="76">
+                <source>The image is landscape oriented ({{ width }}x{{ height }}px). Landscape oriented images are not allowed.</source>
+                <target>A imagem está orientada à paisagem ({{ width }}x{{ height }}px). Imagens orientadas à paisagem não são permitidas.</target>
+            </trans-unit>
+            <trans-unit id="77">
+                <source>The image is portrait oriented ({{ width }}x{{ height }}px). Portrait oriented images are not allowed.</source>
+                <target>A imagem está orientada ao retrato ({{ width }}x{{ height }}px). Imagens orientadas ao retrato não são permitidas.</target>
+            </trans-unit>
+            <trans-unit id="78">
+                <source>An empty file is not allowed.</source>
+                <target>Ficheiro vazio não é permitido.</target>
+            </trans-unit>
         </body>
     </file>
 </xliff>
diff --git a/src/Symfony/Component/Validator/Resources/translations/validators.pt_BR.xlf b/src/Symfony/Component/Validator/Resources/translations/validators.pt_BR.xlf
index f8b0d9b248a5..f74fe906153b 100644
--- a/src/Symfony/Component/Validator/Resources/translations/validators.pt_BR.xlf
+++ b/src/Symfony/Component/Validator/Resources/translations/validators.pt_BR.xlf
@@ -278,6 +278,30 @@
                 <source>This value should not be identical to {{ compared_value_type }} {{ compared_value }}.</source>
                 <target>Este valor não deve ser idêntico a {{ compared_value_type }} {{ compared_value }}.</target>
             </trans-unit>
+            <trans-unit id="73">
+                <source>The image ratio is too big ({{ ratio }}). Allowed maximum ratio is {{ max_ratio }}.</source>
+                <target>O formato da imagem é muito grande ({{ ratio }}). O formato máximo é {{ max_ratio }}.</target>
+            </trans-unit>
+            <trans-unit id="74">
+                <source>The image ratio is too small ({{ ratio }}). Minimum ratio expected is {{ min_ratio }}.</source>
+                <target>O formato da imagem é muito pequeno ({{ ratio }}). O formato mínimo esperado é {{ min_ratio }}.</target>
+            </trans-unit>
+            <trans-unit id="75">
+                <source>The image is square ({{ width }}x{{ height }}px). Square images are not allowed.</source>
+                <target>A imagem está num formato quadrado ({{ width }}x{{ height }}px). Imagens com formato quadrado não são permitidas.</target>
+            </trans-unit>
+            <trans-unit id="76">
+                <source>The image is landscape oriented ({{ width }}x{{ height }}px). Landscape oriented images are not allowed.</source>
+                <target>A imagem está orientada à paisagem ({{ width }}x{{ height }}px). Imagens orientadas à paisagem não são permitidas.</target>
+            </trans-unit>
+            <trans-unit id="77">
+                <source>The image is portrait oriented ({{ width }}x{{ height }}px). Portrait oriented images are not allowed.</source>
+                <target>A imagem está orientada ao retrato ({{ width }}x{{ height }}px). Imagens orientadas ao retrato não são permitidas.</target>
+            </trans-unit>
+            <trans-unit id="78">
+                <source>An empty file is not allowed.</source>
+                <target>Ficheiro vazio não é permitido.</target>
+            </trans-unit>
         </body>
     </file>
 </xliff>
diff --git a/src/Symfony/Component/Validator/Resources/translations/validators.ru.xlf b/src/Symfony/Component/Validator/Resources/translations/validators.ru.xlf
index 0dd06e789751..00bf50f7ef0b 100644
--- a/src/Symfony/Component/Validator/Resources/translations/validators.ru.xlf
+++ b/src/Symfony/Component/Validator/Resources/translations/validators.ru.xlf
@@ -298,6 +298,10 @@
                 <source>The image is portrait oriented ({{ width }}x{{ height }}px). Portrait oriented images are not allowed.</source>
                 <target>Изображение в портретной ориентации ({{ width }}x{{ height }}px). Изображения в портретной ориентации не разрешены.</target>
             </trans-unit>
+            <trans-unit id="78">
+                <source>An empty file is not allowed.</source>
+                <target>Пустые файлы не разрешены.</target>
+            </trans-unit>
         </body>
     </file>
 </xliff>
diff --git a/src/Symfony/Component/Validator/Resources/translations/validators.sl.xlf b/src/Symfony/Component/Validator/Resources/translations/validators.sl.xlf
index f23c20fdd3f7..ebe15a31141b 100644
--- a/src/Symfony/Component/Validator/Resources/translations/validators.sl.xlf
+++ b/src/Symfony/Component/Validator/Resources/translations/validators.sl.xlf
@@ -297,7 +297,11 @@
             <trans-unit id="77">
                 <source>The image is portrait oriented ({{ width }}x{{ height }}px). Portrait oriented images are not allowed.</source>
                 <target>Slika je pokončno usmerjena ({{ width }}x{{ height }}px). Pokončno usmerjene slike niso dovoljene.</target>
-           </trans-unit>
+            </trans-unit>
+            <trans-unit id="78">
+                <source>An empty file is not allowed.</source>
+                <target>Prazna datoteka ni dovoljena.</target>
+            </trans-unit>
         </body>
     </file>
 </xliff>
diff --git a/src/Symfony/Component/Validator/Tests/Constraints/FileTest.php b/src/Symfony/Component/Validator/Tests/Constraints/FileTest.php
new file mode 100644
index 000000000000..801de83993c9
--- /dev/null
+++ b/src/Symfony/Component/Validator/Tests/Constraints/FileTest.php
@@ -0,0 +1,108 @@
+<?php
+
+/*
+ * This file is part of the Symfony package.
+ *
+ * (c) Fabien Potencier <fabien@symfony.com>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace Symfony\Component\Validator\Tests\Constraints;
+
+use Symfony\Component\Validator\Constraints\File;
+
+class FileTest extends \PHPUnit_Framework_TestCase
+{
+
+    /**
+     * @param mixed $maxSize
+     * @param int   bytes
+     * @param bool  $bytes
+     * @dataProvider provideValidSizes
+     */
+    public function testMaxSize($maxSize, $bytes, $binaryFormat)
+    {
+        $file = new File(array('maxSize' => $maxSize));
+
+        $this->assertSame($bytes, $file->maxSize);
+        $this->assertSame($binaryFormat, $file->binaryFormat);
+    }
+
+    /**
+     * @param mixed $maxSize
+     * @param int   $bytes
+     * @dataProvider provideInValidSizes
+     * @expectedException Symfony\Component\Validator\Exception\ConstraintDefinitionException
+     */
+    public function testInvalideMaxSize($maxSize)
+    {
+        $file = new File(array('maxSize' => $maxSize));
+    }
+
+    /**
+     * @return array
+     */
+    public function provideValidSizes()
+    {
+        return array(
+            array('500', 500, false),
+            array(12300, 12300, false),
+            array('1ki', 1024, true),
+            array('1KI', 1024, true),
+            array('2k', 2000, false),
+            array('2K', 2000, false),
+            array('1mi', 1048576, true),
+            array('1MI', 1048576, true),
+            array('3m', 3000000, false),
+            array('3M', 3000000, false),
+        );
+    }
+
+    /**
+     * @return array
+     */
+    public function provideInvalidSizes()
+    {
+        return array(
+            array('+100'),
+            array('foo'),
+            array('1Ko'),
+            array('1kio'),
+            array('1G'),
+            array('1Gi'),
+        );
+    }
+
+    /**
+     * @param mixed $maxSize
+     * @param bool  $guessedFormat
+     * @param bool  $binaryFormat
+     * @dataProvider provideFormats
+     */
+    public function testBinaryFormat($maxSize, $guessedFormat, $binaryFormat)
+    {
+        $file = new File(array('maxSize' => $maxSize, 'binaryFormat' => $guessedFormat));
+
+        $this->assertSame($binaryFormat, $file->binaryFormat);
+    }
+
+    /**
+     * @return array
+     */
+    public function provideFormats()
+    {
+        return array(
+            array(100, null, false),
+            array(100, true, true),
+            array(100, false, false),
+            array('100K', null, false),
+            array('100K', true, true),
+            array('100K', false, false),
+            array('100Ki', null, true),
+            array('100Ki', true, true),
+            array('100Ki', false, false),
+        );
+    }
+}
diff --git a/src/Symfony/Component/Validator/Tests/Constraints/FileValidatorTest.php b/src/Symfony/Component/Validator/Tests/Constraints/FileValidatorTest.php
index 8b9ce99b8036..755176b8bf26 100644
--- a/src/Symfony/Component/Validator/Tests/Constraints/FileValidatorTest.php
+++ b/src/Symfony/Component/Validator/Tests/Constraints/FileValidatorTest.php
@@ -29,6 +29,7 @@ protected function setUp()
         $this->validator->initialize($this->context);
         $this->path = sys_get_temp_dir().DIRECTORY_SEPARATOR.'FileValidatorTest';
         $this->file = fopen($this->path, 'w');
+        fwrite($this->file, ' ', 1);
     }

     protected function tearDown()
@@ -99,27 +100,36 @@ public function provideMaxSizeExceededTests()
             // round(size) == 1.01kB, limit == 1kB
             array(ceil(1.005*1000), 1000, '1.01', '1', 'kB'),
             array(ceil(1.005*1000), '1k', '1.01', '1', 'kB'),
+            array(ceil(1.005*1024), '1Ki', '1.01', '1', 'KiB'),

             // round(size) == 1kB, limit == 1kB -> use bytes
             array(ceil(1.004*1000), 1000, '1004', '1000', 'bytes'),
             array(ceil(1.004*1000), '1k', '1004', '1000', 'bytes'),
+            array(ceil(1.004*1024), '1Ki', '1029', '1024', 'bytes'),

             array(1000 + 1, 1000, '1001', '1000', 'bytes'),
             array(1000 + 1, '1k', '1001', '1000', 'bytes'),
+            array(1024 + 1, '1Ki', '1025', '1024', 'bytes'),

             // round(size) == 1.01MB, limit == 1MB
             array(ceil(1.005*1000*1000), 1000*1000, '1.01', '1', 'MB'),
             array(ceil(1.005*1000*1000), '1000k', '1.01', '1', 'MB'),
             array(ceil(1.005*1000*1000), '1M', '1.01', '1', 'MB'),
+            array(ceil(1.005*1024*1024), '1024Ki', '1.01', '1', 'MiB'),
+            array(ceil(1.005*1024*1024), '1Mi', '1.01', '1', 'MiB'),

             // round(size) == 1MB, limit == 1MB -> use kB
             array(ceil(1.004*1000*1000), 1000*1000, '1004', '1000', 'kB'),
             array(ceil(1.004*1000*1000), '1000k', '1004', '1000', 'kB'),
             array(ceil(1.004*1000*1000), '1M', '1004', '1000', 'kB'),
+            array(ceil(1.004*1024*1024), '1024Ki', '1028.1', '1024', 'KiB'),
+            array(ceil(1.004*1024*1024), '1Mi', '1028.1', '1024', 'KiB'),

             array(1000*1000 + 1, 1000*1000, '1000001', '1000000', 'bytes'),
             array(1000*1000 + 1, '1000k', '1000001', '1000000', 'bytes'),
             array(1000*1000 + 1, '1M', '1000001', '1000000', 'bytes'),
+            array(1024*1024 + 1, '1024Ki', '1048577', '1048576', 'bytes'),
+            array(1024*1024 + 1, '1Mi', '1048577', '1048576', 'bytes'),
         );
     }

@@ -157,9 +167,13 @@ public function provideMaxSizeNotExceededTests()

             array(1000, '1k'),
             array(1000 - 1, '1k'),
+            array(1024, '1Ki'),
+            array(1024 - 1, '1Ki'),

             array(1000*1000, '1M'),
             array(1000*1000 - 1, '1M'),
+            array(1024*1024, '1Mi'),
+            array(1024*1024 - 1, '1Mi'),
         );
     }

@@ -195,6 +209,55 @@ public function testInvalidMaxSize()
         $this->validator->validate($this->path, $constraint);
     }

+    public function provideBinaryFormatTests()
+    {
+        return array(
+            array(11, 10, null, '11', '10', 'bytes'),
+            array(11, 10, true, '11', '10', 'bytes'),
+            array(11, 10, false, '11', '10', 'bytes'),
+
+            // round(size) == 1.01kB, limit == 1kB
+            array(ceil(1000*1.01), 1000, null, '1.01', '1', 'kB'),
+            array(ceil(1000*1.01), '1k', null, '1.01', '1', 'kB'),
+            array(ceil(1024*1.01), '1Ki', null, '1.01', '1', 'KiB'),
+
+            array(ceil(1024*1.01), 1024, true, '1.01', '1', 'KiB'),
+            array(ceil(1024*1.01*1000), '1024k', true, '1010', '1000', 'KiB'),
+            array(ceil(1024*1.01), '1Ki', true, '1.01', '1', 'KiB'),
+
+            array(ceil(1000*1.01), 1000, false, '1.01', '1', 'kB'),
+            array(ceil(1000*1.01), '1k', false, '1.01', '1', 'kB'),
+            array(ceil(1024*1.01*10), '10Ki', false, '10.34', '10.24', 'kB'),
+        );
+    }
+
+    /**
+     * @dataProvider provideBinaryFormatTests
+     */
+    public function testBinaryFormat($bytesWritten, $limit, $binaryFormat, $sizeAsString, $limitAsString, $suffix)
+    {
+        fseek($this->file, $bytesWritten-1, SEEK_SET);
+        fwrite($this->file, '0');
+        fclose($this->file);
+
+        $constraint = new File(array(
+            'maxSize'           => $limit,
+            'binaryFormat'      => $binaryFormat,
+            'maxSizeMessage'    => 'myMessage',
+        ));
+
+        $this->context->expects($this->once())
+            ->method('addViolation')
+            ->with('myMessage', array(
+                '{{ limit }}'   => $limitAsString,
+                '{{ size }}'    => $sizeAsString,
+                '{{ suffix }}'  => $suffix,
+                '{{ file }}'    => $this->path,
+            ));
+
+        $this->validator->validate($this->getFile($this->path), $constraint);
+    }
+
     public function testValidMimeType()
     {
         $file = $this
@@ -319,6 +382,21 @@ public function testInvalidWildcardMimeType()
         $this->validator->validate($file, $constraint);
     }

+    public function testDisallowEmpty()
+    {
+        ftruncate($this->file, 0);
+
+        $constraint = new File(array(
+            'disallowEmptyMessage' => 'myMessage',
+        ));
+
+        $this->context->expects($this->once())
+            ->method('addViolation')
+            ->with('myMessage');
+
+        $this->validator->validate($this->getFile($this->path), $constraint);
+    }
+
     /**
      * @dataProvider uploadedFileErrorProvider
      */
diff --git a/src/Symfony/Component/Validator/ValidatorBuilder.php b/src/Symfony/Component/Validator/ValidatorBuilder.php
index 896eaecbdfea..0219e7c7a554 100644
--- a/src/Symfony/Component/Validator/ValidatorBuilder.php
+++ b/src/Symfony/Component/Validator/ValidatorBuilder.php
@@ -62,27 +62,27 @@ class ValidatorBuilder implements ValidatorBuilderInterface
     private $methodMappings = array();

     /**
-     * @var Reader
+     * @var Reader|null
      */
-    private $annotationReader = null;
+    private $annotationReader;

     /**
-     * @var MetadataFactoryInterface
+     * @var MetadataFactoryInterface|null
      */
     private $metadataFactory;

     /**
-     * @var ConstraintValidatorFactoryInterface
+     * @var ConstraintValidatorFactoryInterface|null
      */
     private $validatorFactory;

     /**
-     * @var CacheInterface
+     * @var CacheInterface|null
      */
     private $metadataCache;

     /**
-     * @var TranslatorInterface
+     * @var TranslatorInterface|null
      */
     private $translator;

@@ -92,12 +92,12 @@ class ValidatorBuilder implements ValidatorBuilderInterface
     private $translationDomain;

     /**
-     * @var PropertyAccessorInterface
+     * @var PropertyAccessorInterface|null
      */
     private $propertyAccessor;

     /**
-     * @var int
+     * @var int|null
      */
     private $apiVersion;

diff --git a/src/Symfony/Component/Validator/composer.json b/src/Symfony/Component/Validator/composer.json
index 012697b19b3c..cfc6fbfffec6 100644
--- a/src/Symfony/Component/Validator/composer.json
+++ b/src/Symfony/Component/Validator/composer.json
@@ -48,7 +48,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
diff --git a/src/Symfony/Component/Yaml/Inline.php b/src/Symfony/Component/Yaml/Inline.php
index 2242d12c7be4..8e83bd0b8d9f 100644
--- a/src/Symfony/Component/Yaml/Inline.php
+++ b/src/Symfony/Component/Yaml/Inline.php
@@ -25,22 +25,25 @@ class Inline

     private static $exceptionOnInvalidType = false;
     private static $objectSupport = false;
+    private static $objectForMap = false;

     /**
      * Converts a YAML string to a PHP array.
      *
-     * @param string  $value                  A YAML string
-     * @param bool    $exceptionOnInvalidType true if an exception must be thrown on invalid types (a PHP resource or object), false otherwise
-     * @param bool    $objectSupport          true if object support is enabled, false otherwise
+     * @param string $value                  A YAML string
+     * @param bool   $exceptionOnInvalidType true if an exception must be thrown on invalid types (a PHP resource or object), false otherwise
+     * @param bool   $objectSupport          true if object support is enabled, false otherwise
+     * @param bool   $objectForMap           true if maps should return a stdClass instead of array()
      *
      * @return array A PHP array representing the YAML string
      *
      * @throws ParseException
      */
-    public static function parse($value, $exceptionOnInvalidType = false, $objectSupport = false)
+    public static function parse($value, $exceptionOnInvalidType = false, $objectSupport = false, $objectForMap = false)
     {
         self::$exceptionOnInvalidType = $exceptionOnInvalidType;
         self::$objectSupport = $objectSupport;
+        self::$objectForMap = $objectForMap;

         $value = trim($value);

@@ -181,9 +184,9 @@ private static function dumpArray($value, $exceptionOnInvalidType, $objectSuppor
     /**
      * Parses a scalar to a YAML string.
      *
-     * @param scalar $scalar
-     * @param string $delimiters
-     * @param array  $stringDelimiters
+     * @param scalar  $scalar
+     * @param string  $delimiters
+     * @param array   $stringDelimiters
      * @param int     &$i
      * @param bool    $evaluate
      *
@@ -232,7 +235,7 @@ public static function parseScalar($scalar, $delimiters = null, $stringDelimiter
      * Parses a quoted scalar to YAML.
      *
      * @param string $scalar
-     * @param int     &$i
+     * @param int    &$i
      *
      * @return string A YAML string
      *
@@ -261,7 +264,7 @@ private static function parseQuotedScalar($scalar, &$i)
     /**
      * Parses a sequence to a YAML string.
      *
-     * @param string $sequence
+     * @param string  $sequence
      * @param int     &$i
      *
      * @return string A YAML string
@@ -317,7 +320,7 @@ private static function parseSequence($sequence, &$i = 0)
     /**
      * Parses a mapping to a YAML string.
      *
-     * @param string $mapping
+     * @param string  $mapping
      * @param int     &$i
      *
      * @return string A YAML string
@@ -338,6 +341,10 @@ private static function parseMapping($mapping, &$i = 0)
                     ++$i;
                     continue 2;
                 case '}':
+                    if (self::$objectForMap) {
+                        return (object) $output;
+                    }
+
                     return $output;
             }

@@ -346,6 +353,7 @@ private static function parseMapping($mapping, &$i = 0)

             // value
             $done = false;
+
             while ($i < $len) {
                 switch ($mapping[$i]) {
                     case '[':
@@ -399,7 +407,7 @@ private static function parseMapping($mapping, &$i = 0)
     /**
      * Evaluates scalars and replaces magic values.
      *
-     * @param string $scalar
+     * @param string  $scalar
      *
      * @return string A YAML string
      */
diff --git a/src/Symfony/Component/Yaml/Parser.php b/src/Symfony/Component/Yaml/Parser.php
index 0577b5e8853b..7bdd87687767 100644
--- a/src/Symfony/Component/Yaml/Parser.php
+++ b/src/Symfony/Component/Yaml/Parser.php
@@ -44,12 +44,13 @@ public function __construct($offset = 0)
      * @param string  $value                  A YAML string
      * @param bool    $exceptionOnInvalidType true if an exception must be thrown on invalid types (a PHP resource or object), false otherwise
      * @param bool    $objectSupport          true if object support is enabled, false otherwise
+     * @param bool    $objectForMap           true if maps should return a stdClass instead of array()
      *
      * @return mixed  A PHP value
      *
      * @throws ParseException If the YAML is not valid
      */
-    public function parse($value, $exceptionOnInvalidType = false, $objectSupport = false)
+    public function parse($value, $exceptionOnInvalidType = false, $objectSupport = false, $objectForMap = false)
     {
         $this->currentLineNb = -1;
         $this->currentLine = '';
@@ -94,7 +95,7 @@ public function parse($value, $exceptionOnInvalidType = false, $objectSupport =
                     $c = $this->getRealCurrentLineNb() + 1;
                     $parser = new Parser($c);
                     $parser->refs =& $this->refs;
-                    $data[] = $parser->parse($this->getNextEmbedBlock(), $exceptionOnInvalidType, $objectSupport);
+                    $data[] = $parser->parse($this->getNextEmbedBlock(), $exceptionOnInvalidType, $objectSupport, $objectForMap);
                 } else {
                     if (isset($values['leadspaces'])
                         && ' ' == $values['leadspaces']
@@ -110,9 +111,9 @@ public function parse($value, $exceptionOnInvalidType = false, $objectSupport =
                             $block .= "\n".$this->getNextEmbedBlock($this->getCurrentLineIndentation() + 2);
                         }

-                        $data[] = $parser->parse($block, $exceptionOnInvalidType, $objectSupport);
+                        $data[] = $parser->parse($block, $exceptionOnInvalidType, $objectSupport, $objectForMap);
                     } else {
-                        $data[] = $this->parseValue($values['value'], $exceptionOnInvalidType, $objectSupport);
+                        $data[] = $this->parseValue($values['value'], $exceptionOnInvalidType, $objectSupport, $objectForMap);
                     }
                 }
             } elseif (preg_match('#^(?P<key>'.Inline::REGEX_QUOTED_STRING.'|[^ \'"\[\{].*?) *\:(\s+(?P<value>.+?))?\s*$#u', $this->currentLine, $values) && false === strpos($values['key'],' #')) {
@@ -122,7 +123,7 @@ public function parse($value, $exceptionOnInvalidType = false, $objectSupport =
                 $context = 'mapping';

                 // force correct settings
-                Inline::parse(null, $exceptionOnInvalidType, $objectSupport);
+                Inline::parse(null, $exceptionOnInvalidType, $objectSupport, $objectForMap);
                 try {
                     $key = Inline::parseScalar($values['key']);
                 } catch (ParseException $e) {
@@ -161,7 +162,7 @@ public function parse($value, $exceptionOnInvalidType = false, $objectSupport =
                         $c = $this->getRealCurrentLineNb() + 1;
                         $parser = new Parser($c);
                         $parser->refs =& $this->refs;
-                        $parsed = $parser->parse($value, $exceptionOnInvalidType, $objectSupport);
+                        $parsed = $parser->parse($value, $exceptionOnInvalidType, $objectSupport, $objectForMap);

                         if (!is_array($parsed)) {
                             throw new ParseException('YAML merge keys used with a scalar value instead of an array.', $this->getRealCurrentLineNb() + 1, $this->currentLine);
@@ -212,7 +213,7 @@ public function parse($value, $exceptionOnInvalidType = false, $objectSupport =
                         $c = $this->getRealCurrentLineNb() + 1;
                         $parser = new Parser($c);
                         $parser->refs =& $this->refs;
-                        $value = $parser->parse($this->getNextEmbedBlock(), $exceptionOnInvalidType, $objectSupport);
+                        $value = $parser->parse($this->getNextEmbedBlock(), $exceptionOnInvalidType, $objectSupport, $objectForMap);
                         // Spec: Keys MUST be unique; first one wins.
                         // But overwriting is allowed when a merge node is used in current block.
                         if ($allowOverwrite || !isset($data[$key])) {
@@ -220,7 +221,7 @@ public function parse($value, $exceptionOnInvalidType = false, $objectSupport =
                         }
                     }
                 } else {
-                    $value = $this->parseValue($values['value'], $exceptionOnInvalidType, $objectSupport);
+                    $value = $this->parseValue($values['value'], $exceptionOnInvalidType, $objectSupport, $objectForMap);
                     // Spec: Keys MUST be unique; first one wins.
                     // But overwriting is allowed when a merge node is used in current block.
                     if ($allowOverwrite || !isset($data[$key])) {
@@ -232,7 +233,7 @@ public function parse($value, $exceptionOnInvalidType = false, $objectSupport =
                 $lineCount = count($this->lines);
                 if (1 === $lineCount || (2 === $lineCount && empty($this->lines[1]))) {
                     try {
-                        $value = Inline::parse($this->lines[0], $exceptionOnInvalidType, $objectSupport);
+                        $value = Inline::parse($this->lines[0], $exceptionOnInvalidType, $objectSupport, $objectForMap);
                     } catch (ParseException $e) {
                         $e->setParsedLine($this->getRealCurrentLineNb() + 1);
                         $e->setSnippet($this->currentLine);
@@ -408,15 +409,16 @@ private function moveToPreviousLine()
     /**
      * Parses a YAML value.
      *
-     * @param string  $value                  A YAML value
-     * @param bool    $exceptionOnInvalidType True if an exception must be thrown on invalid types false otherwise
-     * @param bool    $objectSupport          True if object support is enabled, false otherwise
+     * @param string $value                  A YAML value
+     * @param bool   $exceptionOnInvalidType True if an exception must be thrown on invalid types false otherwise
+     * @param bool   $objectSupport          True if object support is enabled, false otherwise
+     * @param bool   $objectForMap           true if maps should return a stdClass instead of array()
      *
-     * @return mixed  A PHP value
+     * @return mixed A PHP value
      *
      * @throws ParseException When reference does not exist
      */
-    private function parseValue($value, $exceptionOnInvalidType, $objectSupport)
+    private function parseValue($value, $exceptionOnInvalidType, $objectSupport, $objectForMap)
     {
         if (0 === strpos($value, '*')) {
             if (false !== $pos = strpos($value, '#')) {
@@ -439,7 +441,7 @@ private function parseValue($value, $exceptionOnInvalidType, $objectSupport)
         }

         try {
-            return Inline::parse($value, $exceptionOnInvalidType, $objectSupport);
+            return Inline::parse($value, $exceptionOnInvalidType, $objectSupport, $objectForMap);
         } catch (ParseException $e) {
             $e->setParsedLine($this->getRealCurrentLineNb() + 1);
             $e->setSnippet($this->currentLine);
diff --git a/src/Symfony/Component/Yaml/Tests/InlineTest.php b/src/Symfony/Component/Yaml/Tests/InlineTest.php
index dc497ca21c7c..ba7f7a252359 100644
--- a/src/Symfony/Component/Yaml/Tests/InlineTest.php
+++ b/src/Symfony/Component/Yaml/Tests/InlineTest.php
@@ -15,28 +15,32 @@

 class InlineTest extends \PHPUnit_Framework_TestCase
 {
-    public function testParse()
+    /**
+     * @dataProvider getTestsForParse
+     */
+    public function testParse($yaml, $value)
     {
-        foreach ($this->getTestsForParse() as $yaml => $value) {
-            $this->assertSame($value, Inline::parse($yaml), sprintf('::parse() converts an inline YAML to a PHP structure (%s)', $yaml));
-        }
+        $this->assertSame($value, Inline::parse($yaml), sprintf('::parse() converts an inline YAML to a PHP structure (%s)', $yaml));
     }

-    public function testDump()
+    /**
+     * @dataProvider getTestsForParseWithMapObjects
+     */
+    public function testParseWithMapObjects($yaml, $value)
     {
-        $testsForDump = $this->getTestsForDump();
+        $actual = Inline::parse($yaml, false, false, true);

-        foreach ($testsForDump as $yaml => $value) {
-            $this->assertEquals($yaml, Inline::dump($value), sprintf('::dump() converts a PHP structure to an inline YAML (%s)', $yaml));
-        }
+        $this->assertSame(serialize($value), serialize($actual));
+    }

-        foreach ($this->getTestsForParse() as $value) {
-            $this->assertEquals($value, Inline::parse(Inline::dump($value)), 'check consistency');
-        }
+    /**
+     * @dataProvider getTestsForDump
+     */
+    public function testDump($yaml, $value)
+    {
+        $this->assertEquals($yaml, Inline::dump($value), sprintf('::dump() converts a PHP structure to an inline YAML (%s)', $yaml));

-        foreach ($testsForDump as $value) {
-            $this->assertEquals($value, Inline::parse(Inline::dump($value)), 'check consistency');
-        }
+        $this->assertEquals($value, Inline::parse(Inline::dump($value)), 'check consistency');
     }

     public function testDumpNumericValueWithLocale()
@@ -115,117 +119,196 @@ public function testParseScalarWithCorrectlyQuotedStringShouldReturnString()
         $this->assertSame($expect, Inline::parseScalar($value));
     }

-    protected function getTestsForParse()
+    public function getTestsForParse()
     {
         return array(
-            '' => '',
-            'null' => null,
-            'false' => false,
-            'true' => true,
-            '12' => 12,
-            '-12' => -12,
-            '"quoted string"' => 'quoted string',
-            "'quoted string'" => 'quoted string',
-            '12.30e+02' => 12.30e+02,
-            '0x4D2' => 0x4D2,
-            '02333' => 02333,
-            '.Inf' => -log(0),
-            '-.Inf' => log(0),
-            "'686e444'" => '686e444',
-            '686e444' => 646e444,
-            '123456789123456789123456789123456789' => '123456789123456789123456789123456789',
-            '"foo\r\nbar"' => "foo\r\nbar",
-            "'foo#bar'" => 'foo#bar',
-            "'foo # bar'" => 'foo # bar',
-            "'#cfcfcf'" => '#cfcfcf',
-            '::form_base.html.twig' => '::form_base.html.twig',
-
-            '2007-10-30' => mktime(0, 0, 0, 10, 30, 2007),
-            '2007-10-30T02:59:43Z' => gmmktime(2, 59, 43, 10, 30, 2007),
-            '2007-10-30 02:59:43 Z' => gmmktime(2, 59, 43, 10, 30, 2007),
-            '1960-10-30 02:59:43 Z' => gmmktime(2, 59, 43, 10, 30, 1960),
-            '1730-10-30T02:59:43Z' => gmmktime(2, 59, 43, 10, 30, 1730),
-
-            '"a \\"string\\" with \'quoted strings inside\'"' => 'a "string" with \'quoted strings inside\'',
-            "'a \"string\" with ''quoted strings inside'''" => 'a "string" with \'quoted strings inside\'',
+            array('', ''),
+            array('null', null),
+            array('false', false),
+            array('true', true),
+            array('12', 12),
+            array('-12', -12),
+            array('"quoted string"', 'quoted string'),
+            array("'quoted string'", 'quoted string'),
+            array('12.30e+02', 12.30e+02),
+            array('0x4D2', 0x4D2),
+            array('02333', 02333),
+            array('.Inf', -log(0)),
+            array('-.Inf', log(0)),
+            array("'686e444'", '686e444'),
+            array('686e444', 646e444),
+            array('123456789123456789123456789123456789', '123456789123456789123456789123456789'),
+            array('"foo\r\nbar"', "foo\r\nbar"),
+            array("'foo#bar'", 'foo#bar'),
+            array("'foo # bar'", 'foo # bar'),
+            array("'#cfcfcf'", '#cfcfcf'),
+            array('::form_base.html.twig', '::form_base.html.twig'),
+
+            array('2007-10-30', mktime(0, 0, 0, 10, 30, 2007)),
+            array('2007-10-30T02:59:43Z', gmmktime(2, 59, 43, 10, 30, 2007)),
+            array('2007-10-30 02:59:43 Z', gmmktime(2, 59, 43, 10, 30, 2007)),
+            array('1960-10-30 02:59:43 Z', gmmktime(2, 59, 43, 10, 30, 1960)),
+            array('1730-10-30T02:59:43Z', gmmktime(2, 59, 43, 10, 30, 1730)),
+
+            array('"a \\"string\\" with \'quoted strings inside\'"', 'a "string" with \'quoted strings inside\''),
+            array("'a \"string\" with ''quoted strings inside'''", 'a "string" with \'quoted strings inside\''),

             // sequences
             // urls are no key value mapping. see #3609. Valid yaml "key: value" mappings require a space after the colon
-            '[foo, http://urls.are/no/mappings, false, null, 12]' => array('foo', 'http://urls.are/no/mappings', false, null, 12),
-            '[  foo  ,   bar , false  ,  null     ,  12  ]' => array('foo', 'bar', false, null, 12),
-            '[\'foo,bar\', \'foo bar\']' => array('foo,bar', 'foo bar'),
+            array('[foo, http://urls.are/no/mappings, false, null, 12]', array('foo', 'http://urls.are/no/mappings', false, null, 12)),
+            array('[  foo  ,   bar , false  ,  null     ,  12  ]', array('foo', 'bar', false, null, 12)),
+            array('[\'foo,bar\', \'foo bar\']', array('foo,bar', 'foo bar')),

             // mappings
-            '{foo:bar,bar:foo,false:false,null:null,integer:12}' => array('foo' => 'bar', 'bar' => 'foo', 'false' => false, 'null' => null, 'integer' => 12),
-            '{ foo  : bar, bar : foo,  false  :   false,  null  :   null,  integer :  12  }' => array('foo' => 'bar', 'bar' => 'foo', 'false' => false, 'null' => null, 'integer' => 12),
-            '{foo: \'bar\', bar: \'foo: bar\'}' => array('foo' => 'bar', 'bar' => 'foo: bar'),
-            '{\'foo\': \'bar\', "bar": \'foo: bar\'}' => array('foo' => 'bar', 'bar' => 'foo: bar'),
-            '{\'foo\'\'\': \'bar\', "bar\"": \'foo: bar\'}' => array('foo\'' => 'bar', "bar\"" => 'foo: bar'),
-            '{\'foo: \': \'bar\', "bar: ": \'foo: bar\'}' => array('foo: ' => 'bar', "bar: " => 'foo: bar'),
+            array('{foo:bar,bar:foo,false:false,null:null,integer:12}', array('foo' => 'bar', 'bar' => 'foo', 'false' => false, 'null' => null, 'integer' => 12)),
+            array('{ foo  : bar, bar : foo,  false  :   false,  null  :   null,  integer :  12  }', array('foo' => 'bar', 'bar' => 'foo', 'false' => false, 'null' => null, 'integer' => 12)),
+            array('{foo: \'bar\', bar: \'foo: bar\'}', array('foo' => 'bar', 'bar' => 'foo: bar')),
+            array('{\'foo\': \'bar\', "bar": \'foo: bar\'}', array('foo' => 'bar', 'bar' => 'foo: bar')),
+            array('{\'foo\'\'\': \'bar\', "bar\"": \'foo: bar\'}', array('foo\'' => 'bar', "bar\"" => 'foo: bar')),
+            array('{\'foo: \': \'bar\', "bar: ": \'foo: bar\'}', array('foo: ' => 'bar', "bar: " => 'foo: bar')),

             // nested sequences and mappings
-            '[foo, [bar, foo]]' => array('foo', array('bar', 'foo')),
-            '[foo, {bar: foo}]' => array('foo', array('bar' => 'foo')),
-            '{ foo: {bar: foo} }' => array('foo' => array('bar' => 'foo')),
-            '{ foo: [bar, foo] }' => array('foo' => array('bar', 'foo')),
+            array('[foo, [bar, foo]]', array('foo', array('bar', 'foo'))),
+            array('[foo, {bar: foo}]', array('foo', array('bar' => 'foo'))),
+            array('{ foo: {bar: foo} }', array('foo' => array('bar' => 'foo'))),
+            array('{ foo: [bar, foo] }', array('foo' => array('bar', 'foo'))),
+
+            array('[  foo, [  bar, foo  ]  ]', array('foo', array('bar', 'foo'))),
+
+            array('[{ foo: {bar: foo} }]', array(array('foo' => array('bar' => 'foo')))),
+
+            array('[foo, [bar, [foo, [bar, foo]], foo]]', array('foo', array('bar', array('foo', array('bar', 'foo')), 'foo'))),
+
+            array('[foo, {bar: foo, foo: [foo, {bar: foo}]}, [foo, {bar: foo}]]', array('foo', array('bar' => 'foo', 'foo' => array('foo', array('bar' => 'foo'))), array('foo', array('bar' => 'foo')))),
+
+            array('[foo, bar: { foo: bar }]', array('foo', '1' => array('bar' => array('foo' => 'bar')))),
+            array('[foo, \'@foo.baz\', { \'%foo%\': \'foo is %foo%\', bar: \'%foo%\' }, true, \'@service_container\']', array('foo', '@foo.baz', array('%foo%' => 'foo is %foo%', 'bar' => '%foo%',), true, '@service_container',)),
+        );
+    }
+
+    public function getTestsForParseWithMapObjects()
+    {
+        return array(
+            array('', ''),
+            array('null', null),
+            array('false', false),
+            array('true', true),
+            array('12', 12),
+            array('-12', -12),
+            array('"quoted string"', 'quoted string'),
+            array("'quoted string'", 'quoted string'),
+            array('12.30e+02', 12.30e+02),
+            array('0x4D2', 0x4D2),
+            array('02333', 02333),
+            array('.Inf', -log(0)),
+            array('-.Inf', log(0)),
+            array("'686e444'", '686e444'),
+            array('686e444', 646e444),
+            array('123456789123456789123456789123456789', '123456789123456789123456789123456789'),
+            array('"foo\r\nbar"', "foo\r\nbar"),
+            array("'foo#bar'", 'foo#bar'),
+            array("'foo # bar'", 'foo # bar'),
+            array("'#cfcfcf'", '#cfcfcf'),
+            array('::form_base.html.twig', '::form_base.html.twig'),
+
+            array('2007-10-30', mktime(0, 0, 0, 10, 30, 2007)),
+            array('2007-10-30T02:59:43Z', gmmktime(2, 59, 43, 10, 30, 2007)),
+            array('2007-10-30 02:59:43 Z', gmmktime(2, 59, 43, 10, 30, 2007)),
+            array('1960-10-30 02:59:43 Z', gmmktime(2, 59, 43, 10, 30, 1960)),
+            array('1730-10-30T02:59:43Z', gmmktime(2, 59, 43, 10, 30, 1730)),
+
+            array('"a \\"string\\" with \'quoted strings inside\'"', 'a "string" with \'quoted strings inside\''),
+            array("'a \"string\" with ''quoted strings inside'''", 'a "string" with \'quoted strings inside\''),
+
+            // sequences
+            // urls are no key value mapping. see #3609. Valid yaml "key: value" mappings require a space after the colon
+            array('[foo, http://urls.are/no/mappings, false, null, 12]', array('foo', 'http://urls.are/no/mappings', false, null, 12)),
+            array('[  foo  ,   bar , false  ,  null     ,  12  ]', array('foo', 'bar', false, null, 12)),
+            array('[\'foo,bar\', \'foo bar\']', array('foo,bar', 'foo bar')),
+
+            // mappings
+            array('{foo:bar,bar:foo,false:false,null:null,integer:12}', (object) array('foo' => 'bar', 'bar' => 'foo', 'false' => false, 'null' => null, 'integer' => 12)),
+            array('{ foo  : bar, bar : foo,  false  :   false,  null  :   null,  integer :  12  }', (object) array('foo' => 'bar', 'bar' => 'foo', 'false' => false, 'null' => null, 'integer' => 12)),
+            array('{foo: \'bar\', bar: \'foo: bar\'}', (object) array('foo' => 'bar', 'bar' => 'foo: bar')),
+            array('{\'foo\': \'bar\', "bar": \'foo: bar\'}', (object) array('foo' => 'bar', 'bar' => 'foo: bar')),
+            array('{\'foo\'\'\': \'bar\', "bar\"": \'foo: bar\'}', (object) array('foo\'' => 'bar', "bar\"" => 'foo: bar')),
+            array('{\'foo: \': \'bar\', "bar: ": \'foo: bar\'}', (object) array('foo: ' => 'bar', "bar: " => 'foo: bar')),
+
+            // nested sequences and mappings
+            array('[foo, [bar, foo]]', array('foo', array('bar', 'foo'))),
+            array('[foo, {bar: foo}]', array('foo', (object) array('bar' => 'foo'))),
+            array('{ foo: {bar: foo} }', (object) array('foo' => (object) array('bar' => 'foo'))),
+            array('{ foo: [bar, foo] }', (object) array('foo' => array('bar', 'foo'))),
+
+            array('[  foo, [  bar, foo  ]  ]', array('foo', array('bar', 'foo'))),
+
+            array('[{ foo: {bar: foo} }]', array((object) array('foo' => (object) array('bar' => 'foo')))),

-            '[  foo, [  bar, foo  ]  ]' => array('foo', array('bar', 'foo')),
+            array('[foo, [bar, [foo, [bar, foo]], foo]]', array('foo', array('bar', array('foo', array('bar', 'foo')), 'foo'))),

-            '[{ foo: {bar: foo} }]' => array(array('foo' => array('bar' => 'foo'))),
+            array('[foo, {bar: foo, foo: [foo, {bar: foo}]}, [foo, {bar: foo}]]', array('foo', (object) array('bar' => 'foo', 'foo' => array('foo', (object) array('bar' => 'foo'))), array('foo', (object) array('bar' => 'foo')))),

-            '[foo, [bar, [foo, [bar, foo]], foo]]' => array('foo', array('bar', array('foo', array('bar', 'foo')), 'foo')),
+            array('[foo, bar: { foo: bar }]', array('foo', '1' => (object) array('bar' => (object) array('foo' => 'bar')))),
+            array('[foo, \'@foo.baz\', { \'%foo%\': \'foo is %foo%\', bar: \'%foo%\' }, true, \'@service_container\']', array('foo', '@foo.baz', (object) array('%foo%' => 'foo is %foo%', 'bar' => '%foo%',), true, '@service_container',)),

-            '[foo, {bar: foo, foo: [foo, {bar: foo}]}, [foo, {bar: foo}]]' => array('foo', array('bar' => 'foo', 'foo' => array('foo', array('bar' => 'foo'))), array('foo', array('bar' => 'foo'))),
+            array('{}', new \stdClass()),
+            array('{ foo  : bar, bar : {}  }', (object) array('foo' => 'bar', 'bar' => new \stdClass())),
+            array('{ foo  : [], bar : {}  }', (object) array('foo' => array(), 'bar' => new \stdClass())),
+            array('{foo: \'bar\', bar: {} }', (object) array('foo' => 'bar', 'bar' => new \stdClass())),
+            array('{\'foo\': \'bar\', "bar": {}}', (object) array('foo' => 'bar', 'bar' => new \stdClass())),
+            array('{\'foo\': \'bar\', "bar": \'{}\'}', (object) array('foo' => 'bar', 'bar' => '{}')),

-            '[foo, bar: { foo: bar }]' => array('foo', '1' => array('bar' => array('foo' => 'bar'))),
-            '[foo, \'@foo.baz\', { \'%foo%\': \'foo is %foo%\', bar: \'%foo%\' }, true, \'@service_container\']' => array('foo', '@foo.baz', array('%foo%' => 'foo is %foo%', 'bar' => '%foo%',), true, '@service_container',),
+            array('[foo, [{}, {}]]', array('foo', array(new \stdClass(), new \stdClass()))),
+            array('[foo, [[], {}]]', array('foo', array(array(), new \stdClass()))),
+            array('[foo, [[{}, {}], {}]]', array('foo', array(array(new \stdClass(), new \stdClass()), new \stdClass()))),
+            array('[foo, {bar: {}}]', array('foo', '1' => (object) array('bar' => new \stdClass()))),
         );
     }

-    protected function getTestsForDump()
+    public function getTestsForDump()
     {
         return array(
-            'null' => null,
-            'false' => false,
-            'true' => true,
-            '12' => 12,
-            "'quoted string'" => 'quoted string',
-            '12.30e+02' => 12.30e+02,
-            '1234' => 0x4D2,
-            '1243' => 02333,
-            '.Inf' => -log(0),
-            '-.Inf' => log(0),
-            "'686e444'" => '686e444',
-            '"foo\r\nbar"' => "foo\r\nbar",
-            "'foo#bar'" => 'foo#bar',
-            "'foo # bar'" => 'foo # bar',
-            "'#cfcfcf'" => '#cfcfcf',
-
-            "'a \"string\" with ''quoted strings inside'''" => 'a "string" with \'quoted strings inside\'',
-
-            "'-dash'" => '-dash',
-            "'-'" => '-',
+            array('null', null),
+            array('false', false),
+            array('true', true),
+            array('12', 12),
+            array("'quoted string'", 'quoted string'),
+            array('12.30e+02', 12.30e+02),
+            array('1234', 0x4D2),
+            array('1243', 02333),
+            array('.Inf', -log(0)),
+            array('-.Inf', log(0)),
+            array("'686e444'", '686e444'),
+            array('"foo\r\nbar"', "foo\r\nbar"),
+            array("'foo#bar'", 'foo#bar'),
+            array("'foo # bar'", 'foo # bar'),
+            array("'#cfcfcf'", '#cfcfcf'),
+
+            array("'a \"string\" with ''quoted strings inside'''", 'a "string" with \'quoted strings inside\''),
+
+            array("'-dash'", '-dash'),
+            array("'-'", '-'),

             // sequences
-            '[foo, bar, false, null, 12]' => array('foo', 'bar', false, null, 12),
-            '[\'foo,bar\', \'foo bar\']' => array('foo,bar', 'foo bar'),
+            array('[foo, bar, false, null, 12]', array('foo', 'bar', false, null, 12)),
+            array('[\'foo,bar\', \'foo bar\']', array('foo,bar', 'foo bar')),

             // mappings
-            '{ foo: bar, bar: foo, \'false\': false, \'null\': null, integer: 12 }' => array('foo' => 'bar', 'bar' => 'foo', 'false' => false, 'null' => null, 'integer' => 12),
-            '{ foo: bar, bar: \'foo: bar\' }' => array('foo' => 'bar', 'bar' => 'foo: bar'),
+            array('{ foo: bar, bar: foo, \'false\': false, \'null\': null, integer: 12 }', array('foo' => 'bar', 'bar' => 'foo', 'false' => false, 'null' => null, 'integer' => 12)),
+            array('{ foo: bar, bar: \'foo: bar\' }', array('foo' => 'bar', 'bar' => 'foo: bar')),

             // nested sequences and mappings
-            '[foo, [bar, foo]]' => array('foo', array('bar', 'foo')),
+            array('[foo, [bar, foo]]', array('foo', array('bar', 'foo'))),

-            '[foo, [bar, [foo, [bar, foo]], foo]]' => array('foo', array('bar', array('foo', array('bar', 'foo')), 'foo')),
+            array('[foo, [bar, [foo, [bar, foo]], foo]]', array('foo', array('bar', array('foo', array('bar', 'foo')), 'foo'))),

-            '{ foo: { bar: foo } }' => array('foo' => array('bar' => 'foo')),
+            array('{ foo: { bar: foo } }', array('foo' => array('bar' => 'foo'))),

-            '[foo, { bar: foo }]' => array('foo', array('bar' => 'foo')),
+            array('[foo, { bar: foo }]', array('foo', array('bar' => 'foo'))),

-            '[foo, { bar: foo, foo: [foo, { bar: foo }] }, [foo, { bar: foo }]]' => array('foo', array('bar' => 'foo', 'foo' => array('foo', array('bar' => 'foo'))), array('foo', array('bar' => 'foo'))),
+            array('[foo, { bar: foo, foo: [foo, { bar: foo }] }, [foo, { bar: foo }]]', array('foo', array('bar' => 'foo', 'foo' => array('foo', array('bar' => 'foo'))), array('foo', array('bar' => 'foo')))),

-            '[foo, \'@foo.baz\', { \'%foo%\': \'foo is %foo%\', bar: \'%foo%\' }, true, \'@service_container\']' => array('foo', '@foo.baz', array('%foo%' => 'foo is %foo%', 'bar' => '%foo%',), true, '@service_container',),
+            array('[foo, \'@foo.baz\', { \'%foo%\': \'foo is %foo%\', bar: \'%foo%\' }, true, \'@service_container\']', array('foo', '@foo.baz', array('%foo%' => 'foo is %foo%', 'bar' => '%foo%',), true, '@service_container',)),
         );
     }
 }
diff --git a/src/Symfony/Component/Yaml/composer.json b/src/Symfony/Component/Yaml/composer.json
index ceabb0c132ec..2b2d961b7b35 100644
--- a/src/Symfony/Component/Yaml/composer.json
+++ b/src/Symfony/Component/Yaml/composer.json
@@ -25,7 +25,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "2.5-dev"
+            "dev-master": "2.6-dev"
         }
     }
 }
